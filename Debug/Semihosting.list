
Semihosting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000225c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800231c  0800231c  0001231c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023d4  080023d4  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080023d4  080023d4  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023d4  080023d4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023d4  080023d4  000123d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023d8  080023d8  000123d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080023dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000078  08002454  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08002454  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003f46  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001161  00000000  00000000  00023fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000388  00000000  00000000  00025148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002e0  00000000  00000000  000254d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000111bc  00000000  00000000  000257b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000553e  00000000  00000000  0003696c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000640df  00000000  00000000  0003beaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0009ff89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001468  00000000  00000000  0009ffdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002304 	.word	0x08002304

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08002304 	.word	0x08002304

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000230:	b590      	push	{r4, r7, lr}
 8000232:	b089      	sub	sp, #36	; 0x24
 8000234:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000236:	240c      	movs	r4, #12
 8000238:	193b      	adds	r3, r7, r4
 800023a:	0018      	movs	r0, r3
 800023c:	2314      	movs	r3, #20
 800023e:	001a      	movs	r2, r3
 8000240:	2100      	movs	r1, #0
 8000242:	f001 f8a5 	bl	8001390 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000246:	4b2c      	ldr	r3, [pc, #176]	; (80002f8 <MX_GPIO_Init+0xc8>)
 8000248:	695a      	ldr	r2, [r3, #20]
 800024a:	4b2b      	ldr	r3, [pc, #172]	; (80002f8 <MX_GPIO_Init+0xc8>)
 800024c:	2180      	movs	r1, #128	; 0x80
 800024e:	03c9      	lsls	r1, r1, #15
 8000250:	430a      	orrs	r2, r1
 8000252:	615a      	str	r2, [r3, #20]
 8000254:	4b28      	ldr	r3, [pc, #160]	; (80002f8 <MX_GPIO_Init+0xc8>)
 8000256:	695a      	ldr	r2, [r3, #20]
 8000258:	2380      	movs	r3, #128	; 0x80
 800025a:	03db      	lsls	r3, r3, #15
 800025c:	4013      	ands	r3, r2
 800025e:	60bb      	str	r3, [r7, #8]
 8000260:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000262:	4b25      	ldr	r3, [pc, #148]	; (80002f8 <MX_GPIO_Init+0xc8>)
 8000264:	695a      	ldr	r2, [r3, #20]
 8000266:	4b24      	ldr	r3, [pc, #144]	; (80002f8 <MX_GPIO_Init+0xc8>)
 8000268:	2180      	movs	r1, #128	; 0x80
 800026a:	0289      	lsls	r1, r1, #10
 800026c:	430a      	orrs	r2, r1
 800026e:	615a      	str	r2, [r3, #20]
 8000270:	4b21      	ldr	r3, [pc, #132]	; (80002f8 <MX_GPIO_Init+0xc8>)
 8000272:	695a      	ldr	r2, [r3, #20]
 8000274:	2380      	movs	r3, #128	; 0x80
 8000276:	029b      	lsls	r3, r3, #10
 8000278:	4013      	ands	r3, r2
 800027a:	607b      	str	r3, [r7, #4]
 800027c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800027e:	4b1e      	ldr	r3, [pc, #120]	; (80002f8 <MX_GPIO_Init+0xc8>)
 8000280:	695a      	ldr	r2, [r3, #20]
 8000282:	4b1d      	ldr	r3, [pc, #116]	; (80002f8 <MX_GPIO_Init+0xc8>)
 8000284:	2180      	movs	r1, #128	; 0x80
 8000286:	0309      	lsls	r1, r1, #12
 8000288:	430a      	orrs	r2, r1
 800028a:	615a      	str	r2, [r3, #20]
 800028c:	4b1a      	ldr	r3, [pc, #104]	; (80002f8 <MX_GPIO_Init+0xc8>)
 800028e:	695a      	ldr	r2, [r3, #20]
 8000290:	2380      	movs	r3, #128	; 0x80
 8000292:	031b      	lsls	r3, r3, #12
 8000294:	4013      	ands	r3, r2
 8000296:	603b      	str	r3, [r7, #0]
 8000298:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 800029a:	23c0      	movs	r3, #192	; 0xc0
 800029c:	009b      	lsls	r3, r3, #2
 800029e:	4817      	ldr	r0, [pc, #92]	; (80002fc <MX_GPIO_Init+0xcc>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	0019      	movs	r1, r3
 80002a4:	f000 fbe0 	bl	8000a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002a8:	193b      	adds	r3, r7, r4
 80002aa:	2201      	movs	r2, #1
 80002ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80002ae:	193b      	adds	r3, r7, r4
 80002b0:	4a13      	ldr	r2, [pc, #76]	; (8000300 <MX_GPIO_Init+0xd0>)
 80002b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b4:	193b      	adds	r3, r7, r4
 80002b6:	2200      	movs	r2, #0
 80002b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002ba:	193a      	adds	r2, r7, r4
 80002bc:	2390      	movs	r3, #144	; 0x90
 80002be:	05db      	lsls	r3, r3, #23
 80002c0:	0011      	movs	r1, r2
 80002c2:	0018      	movs	r0, r3
 80002c4:	f000 fa60 	bl	8000788 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80002c8:	0021      	movs	r1, r4
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	22c0      	movs	r2, #192	; 0xc0
 80002ce:	0092      	lsls	r2, r2, #2
 80002d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2201      	movs	r2, #1
 80002d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2200      	movs	r2, #0
 80002dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	2200      	movs	r2, #0
 80002e2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002e4:	187b      	adds	r3, r7, r1
 80002e6:	4a05      	ldr	r2, [pc, #20]	; (80002fc <MX_GPIO_Init+0xcc>)
 80002e8:	0019      	movs	r1, r3
 80002ea:	0010      	movs	r0, r2
 80002ec:	f000 fa4c 	bl	8000788 <HAL_GPIO_Init>

}
 80002f0:	46c0      	nop			; (mov r8, r8)
 80002f2:	46bd      	mov	sp, r7
 80002f4:	b009      	add	sp, #36	; 0x24
 80002f6:	bd90      	pop	{r4, r7, pc}
 80002f8:	40021000 	.word	0x40021000
 80002fc:	48000800 	.word	0x48000800
 8000300:	10120000 	.word	0x10120000

08000304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000308:	f000 f902 	bl	8000510 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800030c:	f000 f810 	bl	8000330 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000310:	f7ff ff8e 	bl	8000230 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  initialise_monitor_handles();
 8000314:	f001 ff7e 	bl	8002214 <initialise_monitor_handles>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	printf("test \n");
 8000318:	4b04      	ldr	r3, [pc, #16]	; (800032c <main+0x28>)
 800031a:	0018      	movs	r0, r3
 800031c:	f001 f8b2 	bl	8001484 <puts>
	HAL_Delay(2000);
 8000320:	23fa      	movs	r3, #250	; 0xfa
 8000322:	00db      	lsls	r3, r3, #3
 8000324:	0018      	movs	r0, r3
 8000326:	f000 f957 	bl	80005d8 <HAL_Delay>
	printf("test \n");
 800032a:	e7f5      	b.n	8000318 <main+0x14>
 800032c:	0800231c 	.word	0x0800231c

08000330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000330:	b590      	push	{r4, r7, lr}
 8000332:	b091      	sub	sp, #68	; 0x44
 8000334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000336:	2410      	movs	r4, #16
 8000338:	193b      	adds	r3, r7, r4
 800033a:	0018      	movs	r0, r3
 800033c:	2330      	movs	r3, #48	; 0x30
 800033e:	001a      	movs	r2, r3
 8000340:	2100      	movs	r1, #0
 8000342:	f001 f825 	bl	8001390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000346:	003b      	movs	r3, r7
 8000348:	0018      	movs	r0, r3
 800034a:	2310      	movs	r3, #16
 800034c:	001a      	movs	r2, r3
 800034e:	2100      	movs	r1, #0
 8000350:	f001 f81e 	bl	8001390 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000354:	0021      	movs	r1, r4
 8000356:	187b      	adds	r3, r7, r1
 8000358:	2201      	movs	r2, #1
 800035a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800035c:	187b      	adds	r3, r7, r1
 800035e:	2205      	movs	r2, #5
 8000360:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000362:	187b      	adds	r3, r7, r1
 8000364:	2202      	movs	r2, #2
 8000366:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000368:	187b      	adds	r3, r7, r1
 800036a:	2280      	movs	r2, #128	; 0x80
 800036c:	0252      	lsls	r2, r2, #9
 800036e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000370:	187b      	adds	r3, r7, r1
 8000372:	2280      	movs	r2, #128	; 0x80
 8000374:	0352      	lsls	r2, r2, #13
 8000376:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000378:	187b      	adds	r3, r7, r1
 800037a:	2200      	movs	r2, #0
 800037c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037e:	187b      	adds	r3, r7, r1
 8000380:	0018      	movs	r0, r3
 8000382:	f000 fb8f 	bl	8000aa4 <HAL_RCC_OscConfig>
 8000386:	1e03      	subs	r3, r0, #0
 8000388:	d001      	beq.n	800038e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800038a:	f000 f819 	bl	80003c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038e:	003b      	movs	r3, r7
 8000390:	2207      	movs	r2, #7
 8000392:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000394:	003b      	movs	r3, r7
 8000396:	2202      	movs	r2, #2
 8000398:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800039a:	003b      	movs	r3, r7
 800039c:	2200      	movs	r2, #0
 800039e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003a0:	003b      	movs	r3, r7
 80003a2:	2200      	movs	r2, #0
 80003a4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003a6:	003b      	movs	r3, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	0018      	movs	r0, r3
 80003ac:	f000 fe94 	bl	80010d8 <HAL_RCC_ClockConfig>
 80003b0:	1e03      	subs	r3, r0, #0
 80003b2:	d001      	beq.n	80003b8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80003b4:	f000 f804 	bl	80003c0 <Error_Handler>
  }
}
 80003b8:	46c0      	nop			; (mov r8, r8)
 80003ba:	46bd      	mov	sp, r7
 80003bc:	b011      	add	sp, #68	; 0x44
 80003be:	bd90      	pop	{r4, r7, pc}

080003c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c4:	b672      	cpsid	i
}
 80003c6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003c8:	e7fe      	b.n	80003c8 <Error_Handler+0x8>
	...

080003cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003d2:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <HAL_MspInit+0x44>)
 80003d4:	699a      	ldr	r2, [r3, #24]
 80003d6:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <HAL_MspInit+0x44>)
 80003d8:	2101      	movs	r1, #1
 80003da:	430a      	orrs	r2, r1
 80003dc:	619a      	str	r2, [r3, #24]
 80003de:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <HAL_MspInit+0x44>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	2201      	movs	r2, #1
 80003e4:	4013      	ands	r3, r2
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ea:	4b09      	ldr	r3, [pc, #36]	; (8000410 <HAL_MspInit+0x44>)
 80003ec:	69da      	ldr	r2, [r3, #28]
 80003ee:	4b08      	ldr	r3, [pc, #32]	; (8000410 <HAL_MspInit+0x44>)
 80003f0:	2180      	movs	r1, #128	; 0x80
 80003f2:	0549      	lsls	r1, r1, #21
 80003f4:	430a      	orrs	r2, r1
 80003f6:	61da      	str	r2, [r3, #28]
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <HAL_MspInit+0x44>)
 80003fa:	69da      	ldr	r2, [r3, #28]
 80003fc:	2380      	movs	r3, #128	; 0x80
 80003fe:	055b      	lsls	r3, r3, #21
 8000400:	4013      	ands	r3, r2
 8000402:	603b      	str	r3, [r7, #0]
 8000404:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000406:	46c0      	nop			; (mov r8, r8)
 8000408:	46bd      	mov	sp, r7
 800040a:	b002      	add	sp, #8
 800040c:	bd80      	pop	{r7, pc}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	40021000 	.word	0x40021000

08000414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000418:	e7fe      	b.n	8000418 <NMI_Handler+0x4>

0800041a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800041a:	b580      	push	{r7, lr}
 800041c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800041e:	e7fe      	b.n	800041e <HardFault_Handler+0x4>

08000420 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000424:	46c0      	nop			; (mov r8, r8)
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}

0800042a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800042a:	b580      	push	{r7, lr}
 800042c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}

08000434 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000438:	f000 f8b2 	bl	80005a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800043c:	46c0      	nop			; (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
	...

08000444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800044c:	4a14      	ldr	r2, [pc, #80]	; (80004a0 <_sbrk+0x5c>)
 800044e:	4b15      	ldr	r3, [pc, #84]	; (80004a4 <_sbrk+0x60>)
 8000450:	1ad3      	subs	r3, r2, r3
 8000452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000454:	697b      	ldr	r3, [r7, #20]
 8000456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000458:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <_sbrk+0x64>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	2b00      	cmp	r3, #0
 800045e:	d102      	bne.n	8000466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000460:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <_sbrk+0x64>)
 8000462:	4a12      	ldr	r2, [pc, #72]	; (80004ac <_sbrk+0x68>)
 8000464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000466:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <_sbrk+0x64>)
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	18d3      	adds	r3, r2, r3
 800046e:	693a      	ldr	r2, [r7, #16]
 8000470:	429a      	cmp	r2, r3
 8000472:	d207      	bcs.n	8000484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000474:	f000 ff62 	bl	800133c <__errno>
 8000478:	0003      	movs	r3, r0
 800047a:	220c      	movs	r2, #12
 800047c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800047e:	2301      	movs	r3, #1
 8000480:	425b      	negs	r3, r3
 8000482:	e009      	b.n	8000498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000484:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <_sbrk+0x64>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800048a:	4b07      	ldr	r3, [pc, #28]	; (80004a8 <_sbrk+0x64>)
 800048c:	681a      	ldr	r2, [r3, #0]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	18d2      	adds	r2, r2, r3
 8000492:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <_sbrk+0x64>)
 8000494:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000496:	68fb      	ldr	r3, [r7, #12]
}
 8000498:	0018      	movs	r0, r3
 800049a:	46bd      	mov	sp, r7
 800049c:	b006      	add	sp, #24
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	20002000 	.word	0x20002000
 80004a4:	00000400 	.word	0x00000400
 80004a8:	20000094 	.word	0x20000094
 80004ac:	20000160 	.word	0x20000160

080004b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80004b4:	46c0      	nop			; (mov r8, r8)
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
	...

080004bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004bc:	480d      	ldr	r0, [pc, #52]	; (80004f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004c0:	480d      	ldr	r0, [pc, #52]	; (80004f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80004c2:	490e      	ldr	r1, [pc, #56]	; (80004fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80004c4:	4a0e      	ldr	r2, [pc, #56]	; (8000500 <LoopForever+0xe>)
  movs r3, #0
 80004c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004c8:	e002      	b.n	80004d0 <LoopCopyDataInit>

080004ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ce:	3304      	adds	r3, #4

080004d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004d4:	d3f9      	bcc.n	80004ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004d6:	4a0b      	ldr	r2, [pc, #44]	; (8000504 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004d8:	4c0b      	ldr	r4, [pc, #44]	; (8000508 <LoopForever+0x16>)
  movs r3, #0
 80004da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004dc:	e001      	b.n	80004e2 <LoopFillZerobss>

080004de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004e0:	3204      	adds	r2, #4

080004e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004e4:	d3fb      	bcc.n	80004de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004e6:	f7ff ffe3 	bl	80004b0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80004ea:	f000 ff2d 	bl	8001348 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ee:	f7ff ff09 	bl	8000304 <main>

080004f2 <LoopForever>:

LoopForever:
    b LoopForever
 80004f2:	e7fe      	b.n	80004f2 <LoopForever>
  ldr   r0, =_estack
 80004f4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80004f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004fc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000500:	080023dc 	.word	0x080023dc
  ldr r2, =_sbss
 8000504:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000508:	20000160 	.word	0x20000160

0800050c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800050c:	e7fe      	b.n	800050c <ADC1_COMP_IRQHandler>
	...

08000510 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000514:	4b07      	ldr	r3, [pc, #28]	; (8000534 <HAL_Init+0x24>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <HAL_Init+0x24>)
 800051a:	2110      	movs	r1, #16
 800051c:	430a      	orrs	r2, r1
 800051e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000520:	2000      	movs	r0, #0
 8000522:	f000 f809 	bl	8000538 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000526:	f7ff ff51 	bl	80003cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800052a:	2300      	movs	r3, #0
}
 800052c:	0018      	movs	r0, r3
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	40022000 	.word	0x40022000

08000538 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000538:	b590      	push	{r4, r7, lr}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000540:	4b14      	ldr	r3, [pc, #80]	; (8000594 <HAL_InitTick+0x5c>)
 8000542:	681c      	ldr	r4, [r3, #0]
 8000544:	4b14      	ldr	r3, [pc, #80]	; (8000598 <HAL_InitTick+0x60>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	0019      	movs	r1, r3
 800054a:	23fa      	movs	r3, #250	; 0xfa
 800054c:	0098      	lsls	r0, r3, #2
 800054e:	f7ff fde3 	bl	8000118 <__udivsi3>
 8000552:	0003      	movs	r3, r0
 8000554:	0019      	movs	r1, r3
 8000556:	0020      	movs	r0, r4
 8000558:	f7ff fdde 	bl	8000118 <__udivsi3>
 800055c:	0003      	movs	r3, r0
 800055e:	0018      	movs	r0, r3
 8000560:	f000 f905 	bl	800076e <HAL_SYSTICK_Config>
 8000564:	1e03      	subs	r3, r0, #0
 8000566:	d001      	beq.n	800056c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000568:	2301      	movs	r3, #1
 800056a:	e00f      	b.n	800058c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	2b03      	cmp	r3, #3
 8000570:	d80b      	bhi.n	800058a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000572:	6879      	ldr	r1, [r7, #4]
 8000574:	2301      	movs	r3, #1
 8000576:	425b      	negs	r3, r3
 8000578:	2200      	movs	r2, #0
 800057a:	0018      	movs	r0, r3
 800057c:	f000 f8e2 	bl	8000744 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <HAL_InitTick+0x64>)
 8000582:	687a      	ldr	r2, [r7, #4]
 8000584:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000586:	2300      	movs	r3, #0
 8000588:	e000      	b.n	800058c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800058a:	2301      	movs	r3, #1
}
 800058c:	0018      	movs	r0, r3
 800058e:	46bd      	mov	sp, r7
 8000590:	b003      	add	sp, #12
 8000592:	bd90      	pop	{r4, r7, pc}
 8000594:	20000000 	.word	0x20000000
 8000598:	20000008 	.word	0x20000008
 800059c:	20000004 	.word	0x20000004

080005a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <HAL_IncTick+0x1c>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	001a      	movs	r2, r3
 80005aa:	4b05      	ldr	r3, [pc, #20]	; (80005c0 <HAL_IncTick+0x20>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	18d2      	adds	r2, r2, r3
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <HAL_IncTick+0x20>)
 80005b2:	601a      	str	r2, [r3, #0]
}
 80005b4:	46c0      	nop			; (mov r8, r8)
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	20000008 	.word	0x20000008
 80005c0:	2000014c 	.word	0x2000014c

080005c4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  return uwTick;
 80005c8:	4b02      	ldr	r3, [pc, #8]	; (80005d4 <HAL_GetTick+0x10>)
 80005ca:	681b      	ldr	r3, [r3, #0]
}
 80005cc:	0018      	movs	r0, r3
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	2000014c 	.word	0x2000014c

080005d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005e0:	f7ff fff0 	bl	80005c4 <HAL_GetTick>
 80005e4:	0003      	movs	r3, r0
 80005e6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	3301      	adds	r3, #1
 80005f0:	d005      	beq.n	80005fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005f2:	4b0a      	ldr	r3, [pc, #40]	; (800061c <HAL_Delay+0x44>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	001a      	movs	r2, r3
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	189b      	adds	r3, r3, r2
 80005fc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	f7ff ffe0 	bl	80005c4 <HAL_GetTick>
 8000604:	0002      	movs	r2, r0
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	1ad3      	subs	r3, r2, r3
 800060a:	68fa      	ldr	r2, [r7, #12]
 800060c:	429a      	cmp	r2, r3
 800060e:	d8f7      	bhi.n	8000600 <HAL_Delay+0x28>
  {
  }
}
 8000610:	46c0      	nop			; (mov r8, r8)
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	46bd      	mov	sp, r7
 8000616:	b004      	add	sp, #16
 8000618:	bd80      	pop	{r7, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	20000008 	.word	0x20000008

08000620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	0002      	movs	r2, r0
 8000628:	6039      	str	r1, [r7, #0]
 800062a:	1dfb      	adds	r3, r7, #7
 800062c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800062e:	1dfb      	adds	r3, r7, #7
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b7f      	cmp	r3, #127	; 0x7f
 8000634:	d828      	bhi.n	8000688 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000636:	4a2f      	ldr	r2, [pc, #188]	; (80006f4 <__NVIC_SetPriority+0xd4>)
 8000638:	1dfb      	adds	r3, r7, #7
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	b25b      	sxtb	r3, r3
 800063e:	089b      	lsrs	r3, r3, #2
 8000640:	33c0      	adds	r3, #192	; 0xc0
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	589b      	ldr	r3, [r3, r2]
 8000646:	1dfa      	adds	r2, r7, #7
 8000648:	7812      	ldrb	r2, [r2, #0]
 800064a:	0011      	movs	r1, r2
 800064c:	2203      	movs	r2, #3
 800064e:	400a      	ands	r2, r1
 8000650:	00d2      	lsls	r2, r2, #3
 8000652:	21ff      	movs	r1, #255	; 0xff
 8000654:	4091      	lsls	r1, r2
 8000656:	000a      	movs	r2, r1
 8000658:	43d2      	mvns	r2, r2
 800065a:	401a      	ands	r2, r3
 800065c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	019b      	lsls	r3, r3, #6
 8000662:	22ff      	movs	r2, #255	; 0xff
 8000664:	401a      	ands	r2, r3
 8000666:	1dfb      	adds	r3, r7, #7
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	0018      	movs	r0, r3
 800066c:	2303      	movs	r3, #3
 800066e:	4003      	ands	r3, r0
 8000670:	00db      	lsls	r3, r3, #3
 8000672:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000674:	481f      	ldr	r0, [pc, #124]	; (80006f4 <__NVIC_SetPriority+0xd4>)
 8000676:	1dfb      	adds	r3, r7, #7
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	b25b      	sxtb	r3, r3
 800067c:	089b      	lsrs	r3, r3, #2
 800067e:	430a      	orrs	r2, r1
 8000680:	33c0      	adds	r3, #192	; 0xc0
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000686:	e031      	b.n	80006ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000688:	4a1b      	ldr	r2, [pc, #108]	; (80006f8 <__NVIC_SetPriority+0xd8>)
 800068a:	1dfb      	adds	r3, r7, #7
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	0019      	movs	r1, r3
 8000690:	230f      	movs	r3, #15
 8000692:	400b      	ands	r3, r1
 8000694:	3b08      	subs	r3, #8
 8000696:	089b      	lsrs	r3, r3, #2
 8000698:	3306      	adds	r3, #6
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	18d3      	adds	r3, r2, r3
 800069e:	3304      	adds	r3, #4
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	1dfa      	adds	r2, r7, #7
 80006a4:	7812      	ldrb	r2, [r2, #0]
 80006a6:	0011      	movs	r1, r2
 80006a8:	2203      	movs	r2, #3
 80006aa:	400a      	ands	r2, r1
 80006ac:	00d2      	lsls	r2, r2, #3
 80006ae:	21ff      	movs	r1, #255	; 0xff
 80006b0:	4091      	lsls	r1, r2
 80006b2:	000a      	movs	r2, r1
 80006b4:	43d2      	mvns	r2, r2
 80006b6:	401a      	ands	r2, r3
 80006b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	019b      	lsls	r3, r3, #6
 80006be:	22ff      	movs	r2, #255	; 0xff
 80006c0:	401a      	ands	r2, r3
 80006c2:	1dfb      	adds	r3, r7, #7
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	0018      	movs	r0, r3
 80006c8:	2303      	movs	r3, #3
 80006ca:	4003      	ands	r3, r0
 80006cc:	00db      	lsls	r3, r3, #3
 80006ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006d0:	4809      	ldr	r0, [pc, #36]	; (80006f8 <__NVIC_SetPriority+0xd8>)
 80006d2:	1dfb      	adds	r3, r7, #7
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	001c      	movs	r4, r3
 80006d8:	230f      	movs	r3, #15
 80006da:	4023      	ands	r3, r4
 80006dc:	3b08      	subs	r3, #8
 80006de:	089b      	lsrs	r3, r3, #2
 80006e0:	430a      	orrs	r2, r1
 80006e2:	3306      	adds	r3, #6
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	18c3      	adds	r3, r0, r3
 80006e8:	3304      	adds	r3, #4
 80006ea:	601a      	str	r2, [r3, #0]
}
 80006ec:	46c0      	nop			; (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	b003      	add	sp, #12
 80006f2:	bd90      	pop	{r4, r7, pc}
 80006f4:	e000e100 	.word	0xe000e100
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	1e5a      	subs	r2, r3, #1
 8000708:	2380      	movs	r3, #128	; 0x80
 800070a:	045b      	lsls	r3, r3, #17
 800070c:	429a      	cmp	r2, r3
 800070e:	d301      	bcc.n	8000714 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000710:	2301      	movs	r3, #1
 8000712:	e010      	b.n	8000736 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000714:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <SysTick_Config+0x44>)
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	3a01      	subs	r2, #1
 800071a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800071c:	2301      	movs	r3, #1
 800071e:	425b      	negs	r3, r3
 8000720:	2103      	movs	r1, #3
 8000722:	0018      	movs	r0, r3
 8000724:	f7ff ff7c 	bl	8000620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000728:	4b05      	ldr	r3, [pc, #20]	; (8000740 <SysTick_Config+0x44>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800072e:	4b04      	ldr	r3, [pc, #16]	; (8000740 <SysTick_Config+0x44>)
 8000730:	2207      	movs	r2, #7
 8000732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000734:	2300      	movs	r3, #0
}
 8000736:	0018      	movs	r0, r3
 8000738:	46bd      	mov	sp, r7
 800073a:	b002      	add	sp, #8
 800073c:	bd80      	pop	{r7, pc}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	e000e010 	.word	0xe000e010

08000744 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	60b9      	str	r1, [r7, #8]
 800074c:	607a      	str	r2, [r7, #4]
 800074e:	210f      	movs	r1, #15
 8000750:	187b      	adds	r3, r7, r1
 8000752:	1c02      	adds	r2, r0, #0
 8000754:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000756:	68ba      	ldr	r2, [r7, #8]
 8000758:	187b      	adds	r3, r7, r1
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	b25b      	sxtb	r3, r3
 800075e:	0011      	movs	r1, r2
 8000760:	0018      	movs	r0, r3
 8000762:	f7ff ff5d 	bl	8000620 <__NVIC_SetPriority>
}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	b004      	add	sp, #16
 800076c:	bd80      	pop	{r7, pc}

0800076e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b082      	sub	sp, #8
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	0018      	movs	r0, r3
 800077a:	f7ff ffbf 	bl	80006fc <SysTick_Config>
 800077e:	0003      	movs	r3, r0
}
 8000780:	0018      	movs	r0, r3
 8000782:	46bd      	mov	sp, r7
 8000784:	b002      	add	sp, #8
 8000786:	bd80      	pop	{r7, pc}

08000788 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000796:	e14f      	b.n	8000a38 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2101      	movs	r1, #1
 800079e:	697a      	ldr	r2, [r7, #20]
 80007a0:	4091      	lsls	r1, r2
 80007a2:	000a      	movs	r2, r1
 80007a4:	4013      	ands	r3, r2
 80007a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d100      	bne.n	80007b0 <HAL_GPIO_Init+0x28>
 80007ae:	e140      	b.n	8000a32 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d00b      	beq.n	80007d0 <HAL_GPIO_Init+0x48>
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	2b02      	cmp	r3, #2
 80007be:	d007      	beq.n	80007d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007c4:	2b11      	cmp	r3, #17
 80007c6:	d003      	beq.n	80007d0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	2b12      	cmp	r3, #18
 80007ce:	d130      	bne.n	8000832 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	689b      	ldr	r3, [r3, #8]
 80007d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	2203      	movs	r2, #3
 80007dc:	409a      	lsls	r2, r3
 80007de:	0013      	movs	r3, r2
 80007e0:	43da      	mvns	r2, r3
 80007e2:	693b      	ldr	r3, [r7, #16]
 80007e4:	4013      	ands	r3, r2
 80007e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	68da      	ldr	r2, [r3, #12]
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	409a      	lsls	r2, r3
 80007f2:	0013      	movs	r3, r2
 80007f4:	693a      	ldr	r2, [r7, #16]
 80007f6:	4313      	orrs	r3, r2
 80007f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	693a      	ldr	r2, [r7, #16]
 80007fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000806:	2201      	movs	r2, #1
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	409a      	lsls	r2, r3
 800080c:	0013      	movs	r3, r2
 800080e:	43da      	mvns	r2, r3
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	4013      	ands	r3, r2
 8000814:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	091b      	lsrs	r3, r3, #4
 800081c:	2201      	movs	r2, #1
 800081e:	401a      	ands	r2, r3
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	409a      	lsls	r2, r3
 8000824:	0013      	movs	r3, r2
 8000826:	693a      	ldr	r2, [r7, #16]
 8000828:	4313      	orrs	r3, r2
 800082a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	693a      	ldr	r2, [r7, #16]
 8000830:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	68db      	ldr	r3, [r3, #12]
 8000836:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	2203      	movs	r2, #3
 800083e:	409a      	lsls	r2, r3
 8000840:	0013      	movs	r3, r2
 8000842:	43da      	mvns	r2, r3
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	4013      	ands	r3, r2
 8000848:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	689a      	ldr	r2, [r3, #8]
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	409a      	lsls	r2, r3
 8000854:	0013      	movs	r3, r2
 8000856:	693a      	ldr	r2, [r7, #16]
 8000858:	4313      	orrs	r3, r2
 800085a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	693a      	ldr	r2, [r7, #16]
 8000860:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	2b02      	cmp	r3, #2
 8000868:	d003      	beq.n	8000872 <HAL_GPIO_Init+0xea>
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	2b12      	cmp	r3, #18
 8000870:	d123      	bne.n	80008ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	08da      	lsrs	r2, r3, #3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	3208      	adds	r2, #8
 800087a:	0092      	lsls	r2, r2, #2
 800087c:	58d3      	ldr	r3, [r2, r3]
 800087e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	2207      	movs	r2, #7
 8000884:	4013      	ands	r3, r2
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	220f      	movs	r2, #15
 800088a:	409a      	lsls	r2, r3
 800088c:	0013      	movs	r3, r2
 800088e:	43da      	mvns	r2, r3
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	4013      	ands	r3, r2
 8000894:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	691a      	ldr	r2, [r3, #16]
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	2107      	movs	r1, #7
 800089e:	400b      	ands	r3, r1
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	409a      	lsls	r2, r3
 80008a4:	0013      	movs	r3, r2
 80008a6:	693a      	ldr	r2, [r7, #16]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	08da      	lsrs	r2, r3, #3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	3208      	adds	r2, #8
 80008b4:	0092      	lsls	r2, r2, #2
 80008b6:	6939      	ldr	r1, [r7, #16]
 80008b8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	2203      	movs	r2, #3
 80008c6:	409a      	lsls	r2, r3
 80008c8:	0013      	movs	r3, r2
 80008ca:	43da      	mvns	r2, r3
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	4013      	ands	r3, r2
 80008d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	2203      	movs	r2, #3
 80008d8:	401a      	ands	r2, r3
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	409a      	lsls	r2, r3
 80008e0:	0013      	movs	r3, r2
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	685a      	ldr	r2, [r3, #4]
 80008f2:	2380      	movs	r3, #128	; 0x80
 80008f4:	055b      	lsls	r3, r3, #21
 80008f6:	4013      	ands	r3, r2
 80008f8:	d100      	bne.n	80008fc <HAL_GPIO_Init+0x174>
 80008fa:	e09a      	b.n	8000a32 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fc:	4b54      	ldr	r3, [pc, #336]	; (8000a50 <HAL_GPIO_Init+0x2c8>)
 80008fe:	699a      	ldr	r2, [r3, #24]
 8000900:	4b53      	ldr	r3, [pc, #332]	; (8000a50 <HAL_GPIO_Init+0x2c8>)
 8000902:	2101      	movs	r1, #1
 8000904:	430a      	orrs	r2, r1
 8000906:	619a      	str	r2, [r3, #24]
 8000908:	4b51      	ldr	r3, [pc, #324]	; (8000a50 <HAL_GPIO_Init+0x2c8>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	2201      	movs	r2, #1
 800090e:	4013      	ands	r3, r2
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000914:	4a4f      	ldr	r2, [pc, #316]	; (8000a54 <HAL_GPIO_Init+0x2cc>)
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	089b      	lsrs	r3, r3, #2
 800091a:	3302      	adds	r3, #2
 800091c:	009b      	lsls	r3, r3, #2
 800091e:	589b      	ldr	r3, [r3, r2]
 8000920:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	2203      	movs	r2, #3
 8000926:	4013      	ands	r3, r2
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	220f      	movs	r2, #15
 800092c:	409a      	lsls	r2, r3
 800092e:	0013      	movs	r3, r2
 8000930:	43da      	mvns	r2, r3
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	4013      	ands	r3, r2
 8000936:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	2390      	movs	r3, #144	; 0x90
 800093c:	05db      	lsls	r3, r3, #23
 800093e:	429a      	cmp	r2, r3
 8000940:	d013      	beq.n	800096a <HAL_GPIO_Init+0x1e2>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	4a44      	ldr	r2, [pc, #272]	; (8000a58 <HAL_GPIO_Init+0x2d0>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d00d      	beq.n	8000966 <HAL_GPIO_Init+0x1de>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4a43      	ldr	r2, [pc, #268]	; (8000a5c <HAL_GPIO_Init+0x2d4>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d007      	beq.n	8000962 <HAL_GPIO_Init+0x1da>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4a42      	ldr	r2, [pc, #264]	; (8000a60 <HAL_GPIO_Init+0x2d8>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d101      	bne.n	800095e <HAL_GPIO_Init+0x1d6>
 800095a:	2303      	movs	r3, #3
 800095c:	e006      	b.n	800096c <HAL_GPIO_Init+0x1e4>
 800095e:	2305      	movs	r3, #5
 8000960:	e004      	b.n	800096c <HAL_GPIO_Init+0x1e4>
 8000962:	2302      	movs	r3, #2
 8000964:	e002      	b.n	800096c <HAL_GPIO_Init+0x1e4>
 8000966:	2301      	movs	r3, #1
 8000968:	e000      	b.n	800096c <HAL_GPIO_Init+0x1e4>
 800096a:	2300      	movs	r3, #0
 800096c:	697a      	ldr	r2, [r7, #20]
 800096e:	2103      	movs	r1, #3
 8000970:	400a      	ands	r2, r1
 8000972:	0092      	lsls	r2, r2, #2
 8000974:	4093      	lsls	r3, r2
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	4313      	orrs	r3, r2
 800097a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800097c:	4935      	ldr	r1, [pc, #212]	; (8000a54 <HAL_GPIO_Init+0x2cc>)
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	089b      	lsrs	r3, r3, #2
 8000982:	3302      	adds	r3, #2
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800098a:	4b36      	ldr	r3, [pc, #216]	; (8000a64 <HAL_GPIO_Init+0x2dc>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	43da      	mvns	r2, r3
 8000994:	693b      	ldr	r3, [r7, #16]
 8000996:	4013      	ands	r3, r2
 8000998:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685a      	ldr	r2, [r3, #4]
 800099e:	2380      	movs	r3, #128	; 0x80
 80009a0:	025b      	lsls	r3, r3, #9
 80009a2:	4013      	ands	r3, r2
 80009a4:	d003      	beq.n	80009ae <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	4313      	orrs	r3, r2
 80009ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80009ae:	4b2d      	ldr	r3, [pc, #180]	; (8000a64 <HAL_GPIO_Init+0x2dc>)
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80009b4:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <HAL_GPIO_Init+0x2dc>)
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	43da      	mvns	r2, r3
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	4013      	ands	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685a      	ldr	r2, [r3, #4]
 80009c8:	2380      	movs	r3, #128	; 0x80
 80009ca:	029b      	lsls	r3, r3, #10
 80009cc:	4013      	ands	r3, r2
 80009ce:	d003      	beq.n	80009d8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80009d8:	4b22      	ldr	r3, [pc, #136]	; (8000a64 <HAL_GPIO_Init+0x2dc>)
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009de:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <HAL_GPIO_Init+0x2dc>)
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	43da      	mvns	r2, r3
 80009e8:	693b      	ldr	r3, [r7, #16]
 80009ea:	4013      	ands	r3, r2
 80009ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	685a      	ldr	r2, [r3, #4]
 80009f2:	2380      	movs	r3, #128	; 0x80
 80009f4:	035b      	lsls	r3, r3, #13
 80009f6:	4013      	ands	r3, r2
 80009f8:	d003      	beq.n	8000a02 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a02:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <HAL_GPIO_Init+0x2dc>)
 8000a04:	693a      	ldr	r2, [r7, #16]
 8000a06:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000a08:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <HAL_GPIO_Init+0x2dc>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	43da      	mvns	r2, r3
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	4013      	ands	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	685a      	ldr	r2, [r3, #4]
 8000a1c:	2380      	movs	r3, #128	; 0x80
 8000a1e:	039b      	lsls	r3, r3, #14
 8000a20:	4013      	ands	r3, r2
 8000a22:	d003      	beq.n	8000a2c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000a24:	693a      	ldr	r2, [r7, #16]
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a2c:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <HAL_GPIO_Init+0x2dc>)
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	3301      	adds	r3, #1
 8000a36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	40da      	lsrs	r2, r3
 8000a40:	1e13      	subs	r3, r2, #0
 8000a42:	d000      	beq.n	8000a46 <HAL_GPIO_Init+0x2be>
 8000a44:	e6a8      	b.n	8000798 <HAL_GPIO_Init+0x10>
  } 
}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b006      	add	sp, #24
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40021000 	.word	0x40021000
 8000a54:	40010000 	.word	0x40010000
 8000a58:	48000400 	.word	0x48000400
 8000a5c:	48000800 	.word	0x48000800
 8000a60:	48000c00 	.word	0x48000c00
 8000a64:	40010400 	.word	0x40010400

08000a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	0008      	movs	r0, r1
 8000a72:	0011      	movs	r1, r2
 8000a74:	1cbb      	adds	r3, r7, #2
 8000a76:	1c02      	adds	r2, r0, #0
 8000a78:	801a      	strh	r2, [r3, #0]
 8000a7a:	1c7b      	adds	r3, r7, #1
 8000a7c:	1c0a      	adds	r2, r1, #0
 8000a7e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a80:	1c7b      	adds	r3, r7, #1
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d004      	beq.n	8000a92 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000a88:	1cbb      	adds	r3, r7, #2
 8000a8a:	881a      	ldrh	r2, [r3, #0]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000a90:	e003      	b.n	8000a9a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000a92:	1cbb      	adds	r3, r7, #2
 8000a94:	881a      	ldrh	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b002      	add	sp, #8
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b088      	sub	sp, #32
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d101      	bne.n	8000ab6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e301      	b.n	80010ba <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2201      	movs	r2, #1
 8000abc:	4013      	ands	r3, r2
 8000abe:	d100      	bne.n	8000ac2 <HAL_RCC_OscConfig+0x1e>
 8000ac0:	e08d      	b.n	8000bde <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ac2:	4bc3      	ldr	r3, [pc, #780]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	4013      	ands	r3, r2
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	d00e      	beq.n	8000aec <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ace:	4bc0      	ldr	r3, [pc, #768]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	2b08      	cmp	r3, #8
 8000ad8:	d116      	bne.n	8000b08 <HAL_RCC_OscConfig+0x64>
 8000ada:	4bbd      	ldr	r3, [pc, #756]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	2380      	movs	r3, #128	; 0x80
 8000ae0:	025b      	lsls	r3, r3, #9
 8000ae2:	401a      	ands	r2, r3
 8000ae4:	2380      	movs	r3, #128	; 0x80
 8000ae6:	025b      	lsls	r3, r3, #9
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d10d      	bne.n	8000b08 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000aec:	4bb8      	ldr	r3, [pc, #736]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	2380      	movs	r3, #128	; 0x80
 8000af2:	029b      	lsls	r3, r3, #10
 8000af4:	4013      	ands	r3, r2
 8000af6:	d100      	bne.n	8000afa <HAL_RCC_OscConfig+0x56>
 8000af8:	e070      	b.n	8000bdc <HAL_RCC_OscConfig+0x138>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d000      	beq.n	8000b04 <HAL_RCC_OscConfig+0x60>
 8000b02:	e06b      	b.n	8000bdc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000b04:	2301      	movs	r3, #1
 8000b06:	e2d8      	b.n	80010ba <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d107      	bne.n	8000b20 <HAL_RCC_OscConfig+0x7c>
 8000b10:	4baf      	ldr	r3, [pc, #700]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	4bae      	ldr	r3, [pc, #696]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000b16:	2180      	movs	r1, #128	; 0x80
 8000b18:	0249      	lsls	r1, r1, #9
 8000b1a:	430a      	orrs	r2, r1
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	e02f      	b.n	8000b80 <HAL_RCC_OscConfig+0xdc>
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d10c      	bne.n	8000b42 <HAL_RCC_OscConfig+0x9e>
 8000b28:	4ba9      	ldr	r3, [pc, #676]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	4ba8      	ldr	r3, [pc, #672]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000b2e:	49a9      	ldr	r1, [pc, #676]	; (8000dd4 <HAL_RCC_OscConfig+0x330>)
 8000b30:	400a      	ands	r2, r1
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	4ba6      	ldr	r3, [pc, #664]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4ba5      	ldr	r3, [pc, #660]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000b3a:	49a7      	ldr	r1, [pc, #668]	; (8000dd8 <HAL_RCC_OscConfig+0x334>)
 8000b3c:	400a      	ands	r2, r1
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	e01e      	b.n	8000b80 <HAL_RCC_OscConfig+0xdc>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	2b05      	cmp	r3, #5
 8000b48:	d10e      	bne.n	8000b68 <HAL_RCC_OscConfig+0xc4>
 8000b4a:	4ba1      	ldr	r3, [pc, #644]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	4ba0      	ldr	r3, [pc, #640]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000b50:	2180      	movs	r1, #128	; 0x80
 8000b52:	02c9      	lsls	r1, r1, #11
 8000b54:	430a      	orrs	r2, r1
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	4b9d      	ldr	r3, [pc, #628]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4b9c      	ldr	r3, [pc, #624]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000b5e:	2180      	movs	r1, #128	; 0x80
 8000b60:	0249      	lsls	r1, r1, #9
 8000b62:	430a      	orrs	r2, r1
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	e00b      	b.n	8000b80 <HAL_RCC_OscConfig+0xdc>
 8000b68:	4b99      	ldr	r3, [pc, #612]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	4b98      	ldr	r3, [pc, #608]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000b6e:	4999      	ldr	r1, [pc, #612]	; (8000dd4 <HAL_RCC_OscConfig+0x330>)
 8000b70:	400a      	ands	r2, r1
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	4b96      	ldr	r3, [pc, #600]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4b95      	ldr	r3, [pc, #596]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000b7a:	4997      	ldr	r1, [pc, #604]	; (8000dd8 <HAL_RCC_OscConfig+0x334>)
 8000b7c:	400a      	ands	r2, r1
 8000b7e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d014      	beq.n	8000bb2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b88:	f7ff fd1c 	bl	80005c4 <HAL_GetTick>
 8000b8c:	0003      	movs	r3, r0
 8000b8e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b90:	e008      	b.n	8000ba4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b92:	f7ff fd17 	bl	80005c4 <HAL_GetTick>
 8000b96:	0002      	movs	r2, r0
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	1ad3      	subs	r3, r2, r3
 8000b9c:	2b64      	cmp	r3, #100	; 0x64
 8000b9e:	d901      	bls.n	8000ba4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	e28a      	b.n	80010ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ba4:	4b8a      	ldr	r3, [pc, #552]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	2380      	movs	r3, #128	; 0x80
 8000baa:	029b      	lsls	r3, r3, #10
 8000bac:	4013      	ands	r3, r2
 8000bae:	d0f0      	beq.n	8000b92 <HAL_RCC_OscConfig+0xee>
 8000bb0:	e015      	b.n	8000bde <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bb2:	f7ff fd07 	bl	80005c4 <HAL_GetTick>
 8000bb6:	0003      	movs	r3, r0
 8000bb8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bba:	e008      	b.n	8000bce <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bbc:	f7ff fd02 	bl	80005c4 <HAL_GetTick>
 8000bc0:	0002      	movs	r2, r0
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	2b64      	cmp	r3, #100	; 0x64
 8000bc8:	d901      	bls.n	8000bce <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	e275      	b.n	80010ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bce:	4b80      	ldr	r3, [pc, #512]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	2380      	movs	r3, #128	; 0x80
 8000bd4:	029b      	lsls	r3, r3, #10
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	d1f0      	bne.n	8000bbc <HAL_RCC_OscConfig+0x118>
 8000bda:	e000      	b.n	8000bde <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bdc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2202      	movs	r2, #2
 8000be4:	4013      	ands	r3, r2
 8000be6:	d100      	bne.n	8000bea <HAL_RCC_OscConfig+0x146>
 8000be8:	e069      	b.n	8000cbe <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000bea:	4b79      	ldr	r3, [pc, #484]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	220c      	movs	r2, #12
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	d00b      	beq.n	8000c0c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000bf4:	4b76      	ldr	r3, [pc, #472]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	220c      	movs	r2, #12
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	2b08      	cmp	r3, #8
 8000bfe:	d11c      	bne.n	8000c3a <HAL_RCC_OscConfig+0x196>
 8000c00:	4b73      	ldr	r3, [pc, #460]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000c02:	685a      	ldr	r2, [r3, #4]
 8000c04:	2380      	movs	r3, #128	; 0x80
 8000c06:	025b      	lsls	r3, r3, #9
 8000c08:	4013      	ands	r3, r2
 8000c0a:	d116      	bne.n	8000c3a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c0c:	4b70      	ldr	r3, [pc, #448]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2202      	movs	r2, #2
 8000c12:	4013      	ands	r3, r2
 8000c14:	d005      	beq.n	8000c22 <HAL_RCC_OscConfig+0x17e>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d001      	beq.n	8000c22 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e24b      	b.n	80010ba <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c22:	4b6b      	ldr	r3, [pc, #428]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	22f8      	movs	r2, #248	; 0xf8
 8000c28:	4393      	bics	r3, r2
 8000c2a:	0019      	movs	r1, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	691b      	ldr	r3, [r3, #16]
 8000c30:	00da      	lsls	r2, r3, #3
 8000c32:	4b67      	ldr	r3, [pc, #412]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000c34:	430a      	orrs	r2, r1
 8000c36:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c38:	e041      	b.n	8000cbe <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d024      	beq.n	8000c8c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c42:	4b63      	ldr	r3, [pc, #396]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	4b62      	ldr	r3, [pc, #392]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000c48:	2101      	movs	r1, #1
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c4e:	f7ff fcb9 	bl	80005c4 <HAL_GetTick>
 8000c52:	0003      	movs	r3, r0
 8000c54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c56:	e008      	b.n	8000c6a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c58:	f7ff fcb4 	bl	80005c4 <HAL_GetTick>
 8000c5c:	0002      	movs	r2, r0
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d901      	bls.n	8000c6a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000c66:	2303      	movs	r3, #3
 8000c68:	e227      	b.n	80010ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c6a:	4b59      	ldr	r3, [pc, #356]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2202      	movs	r2, #2
 8000c70:	4013      	ands	r3, r2
 8000c72:	d0f1      	beq.n	8000c58 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c74:	4b56      	ldr	r3, [pc, #344]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	22f8      	movs	r2, #248	; 0xf8
 8000c7a:	4393      	bics	r3, r2
 8000c7c:	0019      	movs	r1, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	691b      	ldr	r3, [r3, #16]
 8000c82:	00da      	lsls	r2, r3, #3
 8000c84:	4b52      	ldr	r3, [pc, #328]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000c86:	430a      	orrs	r2, r1
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	e018      	b.n	8000cbe <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c8c:	4b50      	ldr	r3, [pc, #320]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4b4f      	ldr	r3, [pc, #316]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000c92:	2101      	movs	r1, #1
 8000c94:	438a      	bics	r2, r1
 8000c96:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c98:	f7ff fc94 	bl	80005c4 <HAL_GetTick>
 8000c9c:	0003      	movs	r3, r0
 8000c9e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ca0:	e008      	b.n	8000cb4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ca2:	f7ff fc8f 	bl	80005c4 <HAL_GetTick>
 8000ca6:	0002      	movs	r2, r0
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	1ad3      	subs	r3, r2, r3
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d901      	bls.n	8000cb4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	e202      	b.n	80010ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cb4:	4b46      	ldr	r3, [pc, #280]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2202      	movs	r2, #2
 8000cba:	4013      	ands	r3, r2
 8000cbc:	d1f1      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2208      	movs	r2, #8
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	d036      	beq.n	8000d36 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	69db      	ldr	r3, [r3, #28]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d019      	beq.n	8000d04 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cd0:	4b3f      	ldr	r3, [pc, #252]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000cd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cd4:	4b3e      	ldr	r3, [pc, #248]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cdc:	f7ff fc72 	bl	80005c4 <HAL_GetTick>
 8000ce0:	0003      	movs	r3, r0
 8000ce2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ce4:	e008      	b.n	8000cf8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ce6:	f7ff fc6d 	bl	80005c4 <HAL_GetTick>
 8000cea:	0002      	movs	r2, r0
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	d901      	bls.n	8000cf8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	e1e0      	b.n	80010ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cf8:	4b35      	ldr	r3, [pc, #212]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cfc:	2202      	movs	r2, #2
 8000cfe:	4013      	ands	r3, r2
 8000d00:	d0f1      	beq.n	8000ce6 <HAL_RCC_OscConfig+0x242>
 8000d02:	e018      	b.n	8000d36 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d04:	4b32      	ldr	r3, [pc, #200]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000d06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d08:	4b31      	ldr	r3, [pc, #196]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	438a      	bics	r2, r1
 8000d0e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d10:	f7ff fc58 	bl	80005c4 <HAL_GetTick>
 8000d14:	0003      	movs	r3, r0
 8000d16:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d18:	e008      	b.n	8000d2c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d1a:	f7ff fc53 	bl	80005c4 <HAL_GetTick>
 8000d1e:	0002      	movs	r2, r0
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d901      	bls.n	8000d2c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	e1c6      	b.n	80010ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d2c:	4b28      	ldr	r3, [pc, #160]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d30:	2202      	movs	r2, #2
 8000d32:	4013      	ands	r3, r2
 8000d34:	d1f1      	bne.n	8000d1a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2204      	movs	r2, #4
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	d100      	bne.n	8000d42 <HAL_RCC_OscConfig+0x29e>
 8000d40:	e0b4      	b.n	8000eac <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d42:	201f      	movs	r0, #31
 8000d44:	183b      	adds	r3, r7, r0
 8000d46:	2200      	movs	r2, #0
 8000d48:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d4a:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000d4c:	69da      	ldr	r2, [r3, #28]
 8000d4e:	2380      	movs	r3, #128	; 0x80
 8000d50:	055b      	lsls	r3, r3, #21
 8000d52:	4013      	ands	r3, r2
 8000d54:	d110      	bne.n	8000d78 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d56:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000d58:	69da      	ldr	r2, [r3, #28]
 8000d5a:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000d5c:	2180      	movs	r1, #128	; 0x80
 8000d5e:	0549      	lsls	r1, r1, #21
 8000d60:	430a      	orrs	r2, r1
 8000d62:	61da      	str	r2, [r3, #28]
 8000d64:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000d66:	69da      	ldr	r2, [r3, #28]
 8000d68:	2380      	movs	r3, #128	; 0x80
 8000d6a:	055b      	lsls	r3, r3, #21
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000d72:	183b      	adds	r3, r7, r0
 8000d74:	2201      	movs	r2, #1
 8000d76:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d78:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <HAL_RCC_OscConfig+0x338>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	4013      	ands	r3, r2
 8000d82:	d11a      	bne.n	8000dba <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d84:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <HAL_RCC_OscConfig+0x338>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <HAL_RCC_OscConfig+0x338>)
 8000d8a:	2180      	movs	r1, #128	; 0x80
 8000d8c:	0049      	lsls	r1, r1, #1
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d92:	f7ff fc17 	bl	80005c4 <HAL_GetTick>
 8000d96:	0003      	movs	r3, r0
 8000d98:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d9a:	e008      	b.n	8000dae <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d9c:	f7ff fc12 	bl	80005c4 <HAL_GetTick>
 8000da0:	0002      	movs	r2, r0
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	2b64      	cmp	r3, #100	; 0x64
 8000da8:	d901      	bls.n	8000dae <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8000daa:	2303      	movs	r3, #3
 8000dac:	e185      	b.n	80010ba <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <HAL_RCC_OscConfig+0x338>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	2380      	movs	r3, #128	; 0x80
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	4013      	ands	r3, r2
 8000db8:	d0f0      	beq.n	8000d9c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d10e      	bne.n	8000de0 <HAL_RCC_OscConfig+0x33c>
 8000dc2:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000dc4:	6a1a      	ldr	r2, [r3, #32]
 8000dc6:	4b02      	ldr	r3, [pc, #8]	; (8000dd0 <HAL_RCC_OscConfig+0x32c>)
 8000dc8:	2101      	movs	r1, #1
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	621a      	str	r2, [r3, #32]
 8000dce:	e035      	b.n	8000e3c <HAL_RCC_OscConfig+0x398>
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	fffeffff 	.word	0xfffeffff
 8000dd8:	fffbffff 	.word	0xfffbffff
 8000ddc:	40007000 	.word	0x40007000
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d10c      	bne.n	8000e02 <HAL_RCC_OscConfig+0x35e>
 8000de8:	4bb6      	ldr	r3, [pc, #728]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000dea:	6a1a      	ldr	r2, [r3, #32]
 8000dec:	4bb5      	ldr	r3, [pc, #724]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000dee:	2101      	movs	r1, #1
 8000df0:	438a      	bics	r2, r1
 8000df2:	621a      	str	r2, [r3, #32]
 8000df4:	4bb3      	ldr	r3, [pc, #716]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000df6:	6a1a      	ldr	r2, [r3, #32]
 8000df8:	4bb2      	ldr	r3, [pc, #712]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000dfa:	2104      	movs	r1, #4
 8000dfc:	438a      	bics	r2, r1
 8000dfe:	621a      	str	r2, [r3, #32]
 8000e00:	e01c      	b.n	8000e3c <HAL_RCC_OscConfig+0x398>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	2b05      	cmp	r3, #5
 8000e08:	d10c      	bne.n	8000e24 <HAL_RCC_OscConfig+0x380>
 8000e0a:	4bae      	ldr	r3, [pc, #696]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000e0c:	6a1a      	ldr	r2, [r3, #32]
 8000e0e:	4bad      	ldr	r3, [pc, #692]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000e10:	2104      	movs	r1, #4
 8000e12:	430a      	orrs	r2, r1
 8000e14:	621a      	str	r2, [r3, #32]
 8000e16:	4bab      	ldr	r3, [pc, #684]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000e18:	6a1a      	ldr	r2, [r3, #32]
 8000e1a:	4baa      	ldr	r3, [pc, #680]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	621a      	str	r2, [r3, #32]
 8000e22:	e00b      	b.n	8000e3c <HAL_RCC_OscConfig+0x398>
 8000e24:	4ba7      	ldr	r3, [pc, #668]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000e26:	6a1a      	ldr	r2, [r3, #32]
 8000e28:	4ba6      	ldr	r3, [pc, #664]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	438a      	bics	r2, r1
 8000e2e:	621a      	str	r2, [r3, #32]
 8000e30:	4ba4      	ldr	r3, [pc, #656]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000e32:	6a1a      	ldr	r2, [r3, #32]
 8000e34:	4ba3      	ldr	r3, [pc, #652]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000e36:	2104      	movs	r1, #4
 8000e38:	438a      	bics	r2, r1
 8000e3a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d014      	beq.n	8000e6e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e44:	f7ff fbbe 	bl	80005c4 <HAL_GetTick>
 8000e48:	0003      	movs	r3, r0
 8000e4a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e4c:	e009      	b.n	8000e62 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e4e:	f7ff fbb9 	bl	80005c4 <HAL_GetTick>
 8000e52:	0002      	movs	r2, r0
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	4a9b      	ldr	r2, [pc, #620]	; (80010c8 <HAL_RCC_OscConfig+0x624>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d901      	bls.n	8000e62 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e12b      	b.n	80010ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e62:	4b98      	ldr	r3, [pc, #608]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000e64:	6a1b      	ldr	r3, [r3, #32]
 8000e66:	2202      	movs	r2, #2
 8000e68:	4013      	ands	r3, r2
 8000e6a:	d0f0      	beq.n	8000e4e <HAL_RCC_OscConfig+0x3aa>
 8000e6c:	e013      	b.n	8000e96 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e6e:	f7ff fba9 	bl	80005c4 <HAL_GetTick>
 8000e72:	0003      	movs	r3, r0
 8000e74:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e76:	e009      	b.n	8000e8c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e78:	f7ff fba4 	bl	80005c4 <HAL_GetTick>
 8000e7c:	0002      	movs	r2, r0
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	4a91      	ldr	r2, [pc, #580]	; (80010c8 <HAL_RCC_OscConfig+0x624>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d901      	bls.n	8000e8c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	e116      	b.n	80010ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e8c:	4b8d      	ldr	r3, [pc, #564]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000e8e:	6a1b      	ldr	r3, [r3, #32]
 8000e90:	2202      	movs	r2, #2
 8000e92:	4013      	ands	r3, r2
 8000e94:	d1f0      	bne.n	8000e78 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000e96:	231f      	movs	r3, #31
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d105      	bne.n	8000eac <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ea0:	4b88      	ldr	r3, [pc, #544]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000ea2:	69da      	ldr	r2, [r3, #28]
 8000ea4:	4b87      	ldr	r3, [pc, #540]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000ea6:	4989      	ldr	r1, [pc, #548]	; (80010cc <HAL_RCC_OscConfig+0x628>)
 8000ea8:	400a      	ands	r2, r1
 8000eaa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2210      	movs	r2, #16
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	d063      	beq.n	8000f7e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	695b      	ldr	r3, [r3, #20]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d12a      	bne.n	8000f14 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ebe:	4b81      	ldr	r3, [pc, #516]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ec2:	4b80      	ldr	r3, [pc, #512]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000ec4:	2104      	movs	r1, #4
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000eca:	4b7e      	ldr	r3, [pc, #504]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000ecc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ece:	4b7d      	ldr	r3, [pc, #500]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	430a      	orrs	r2, r1
 8000ed4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed6:	f7ff fb75 	bl	80005c4 <HAL_GetTick>
 8000eda:	0003      	movs	r3, r0
 8000edc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000ede:	e008      	b.n	8000ef2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000ee0:	f7ff fb70 	bl	80005c4 <HAL_GetTick>
 8000ee4:	0002      	movs	r2, r0
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d901      	bls.n	8000ef2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e0e3      	b.n	80010ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000ef2:	4b74      	ldr	r3, [pc, #464]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	4013      	ands	r3, r2
 8000efa:	d0f1      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000efc:	4b71      	ldr	r3, [pc, #452]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f00:	22f8      	movs	r2, #248	; 0xf8
 8000f02:	4393      	bics	r3, r2
 8000f04:	0019      	movs	r1, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	699b      	ldr	r3, [r3, #24]
 8000f0a:	00da      	lsls	r2, r3, #3
 8000f0c:	4b6d      	ldr	r3, [pc, #436]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000f0e:	430a      	orrs	r2, r1
 8000f10:	635a      	str	r2, [r3, #52]	; 0x34
 8000f12:	e034      	b.n	8000f7e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	695b      	ldr	r3, [r3, #20]
 8000f18:	3305      	adds	r3, #5
 8000f1a:	d111      	bne.n	8000f40 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000f1c:	4b69      	ldr	r3, [pc, #420]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000f1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f20:	4b68      	ldr	r3, [pc, #416]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000f22:	2104      	movs	r1, #4
 8000f24:	438a      	bics	r2, r1
 8000f26:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000f28:	4b66      	ldr	r3, [pc, #408]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f2c:	22f8      	movs	r2, #248	; 0xf8
 8000f2e:	4393      	bics	r3, r2
 8000f30:	0019      	movs	r1, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	00da      	lsls	r2, r3, #3
 8000f38:	4b62      	ldr	r3, [pc, #392]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	635a      	str	r2, [r3, #52]	; 0x34
 8000f3e:	e01e      	b.n	8000f7e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000f40:	4b60      	ldr	r3, [pc, #384]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000f42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f44:	4b5f      	ldr	r3, [pc, #380]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000f46:	2104      	movs	r1, #4
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000f4c:	4b5d      	ldr	r3, [pc, #372]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000f4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f50:	4b5c      	ldr	r3, [pc, #368]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000f52:	2101      	movs	r1, #1
 8000f54:	438a      	bics	r2, r1
 8000f56:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f58:	f7ff fb34 	bl	80005c4 <HAL_GetTick>
 8000f5c:	0003      	movs	r3, r0
 8000f5e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000f60:	e008      	b.n	8000f74 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000f62:	f7ff fb2f 	bl	80005c4 <HAL_GetTick>
 8000f66:	0002      	movs	r2, r0
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d901      	bls.n	8000f74 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8000f70:	2303      	movs	r3, #3
 8000f72:	e0a2      	b.n	80010ba <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000f74:	4b53      	ldr	r3, [pc, #332]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f78:	2202      	movs	r2, #2
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	d1f1      	bne.n	8000f62 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6a1b      	ldr	r3, [r3, #32]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d100      	bne.n	8000f88 <HAL_RCC_OscConfig+0x4e4>
 8000f86:	e097      	b.n	80010b8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f88:	4b4e      	ldr	r3, [pc, #312]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	220c      	movs	r2, #12
 8000f8e:	4013      	ands	r3, r2
 8000f90:	2b08      	cmp	r3, #8
 8000f92:	d100      	bne.n	8000f96 <HAL_RCC_OscConfig+0x4f2>
 8000f94:	e06b      	b.n	800106e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6a1b      	ldr	r3, [r3, #32]
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d14c      	bne.n	8001038 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f9e:	4b49      	ldr	r3, [pc, #292]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	4b48      	ldr	r3, [pc, #288]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000fa4:	494a      	ldr	r1, [pc, #296]	; (80010d0 <HAL_RCC_OscConfig+0x62c>)
 8000fa6:	400a      	ands	r2, r1
 8000fa8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000faa:	f7ff fb0b 	bl	80005c4 <HAL_GetTick>
 8000fae:	0003      	movs	r3, r0
 8000fb0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fb2:	e008      	b.n	8000fc6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fb4:	f7ff fb06 	bl	80005c4 <HAL_GetTick>
 8000fb8:	0002      	movs	r2, r0
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d901      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e079      	b.n	80010ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fc6:	4b3f      	ldr	r3, [pc, #252]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	2380      	movs	r3, #128	; 0x80
 8000fcc:	049b      	lsls	r3, r3, #18
 8000fce:	4013      	ands	r3, r2
 8000fd0:	d1f0      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fd2:	4b3c      	ldr	r3, [pc, #240]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd6:	220f      	movs	r2, #15
 8000fd8:	4393      	bics	r3, r2
 8000fda:	0019      	movs	r1, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fe0:	4b38      	ldr	r3, [pc, #224]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000fe2:	430a      	orrs	r2, r1
 8000fe4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fe6:	4b37      	ldr	r3, [pc, #220]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	4a3a      	ldr	r2, [pc, #232]	; (80010d4 <HAL_RCC_OscConfig+0x630>)
 8000fec:	4013      	ands	r3, r2
 8000fee:	0019      	movs	r1, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff8:	431a      	orrs	r2, r3
 8000ffa:	4b32      	ldr	r3, [pc, #200]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001000:	4b30      	ldr	r3, [pc, #192]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b2f      	ldr	r3, [pc, #188]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8001006:	2180      	movs	r1, #128	; 0x80
 8001008:	0449      	lsls	r1, r1, #17
 800100a:	430a      	orrs	r2, r1
 800100c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100e:	f7ff fad9 	bl	80005c4 <HAL_GetTick>
 8001012:	0003      	movs	r3, r0
 8001014:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001016:	e008      	b.n	800102a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001018:	f7ff fad4 	bl	80005c4 <HAL_GetTick>
 800101c:	0002      	movs	r2, r0
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b02      	cmp	r3, #2
 8001024:	d901      	bls.n	800102a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e047      	b.n	80010ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800102a:	4b26      	ldr	r3, [pc, #152]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	2380      	movs	r3, #128	; 0x80
 8001030:	049b      	lsls	r3, r3, #18
 8001032:	4013      	ands	r3, r2
 8001034:	d0f0      	beq.n	8001018 <HAL_RCC_OscConfig+0x574>
 8001036:	e03f      	b.n	80010b8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001038:	4b22      	ldr	r3, [pc, #136]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 800103e:	4924      	ldr	r1, [pc, #144]	; (80010d0 <HAL_RCC_OscConfig+0x62c>)
 8001040:	400a      	ands	r2, r1
 8001042:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001044:	f7ff fabe 	bl	80005c4 <HAL_GetTick>
 8001048:	0003      	movs	r3, r0
 800104a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800104c:	e008      	b.n	8001060 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800104e:	f7ff fab9 	bl	80005c4 <HAL_GetTick>
 8001052:	0002      	movs	r2, r0
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d901      	bls.n	8001060 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e02c      	b.n	80010ba <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001060:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	2380      	movs	r3, #128	; 0x80
 8001066:	049b      	lsls	r3, r3, #18
 8001068:	4013      	ands	r3, r2
 800106a:	d1f0      	bne.n	800104e <HAL_RCC_OscConfig+0x5aa>
 800106c:	e024      	b.n	80010b8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a1b      	ldr	r3, [r3, #32]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d101      	bne.n	800107a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e01f      	b.n	80010ba <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800107a:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001080:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <HAL_RCC_OscConfig+0x620>)
 8001082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001084:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	2380      	movs	r3, #128	; 0x80
 800108a:	025b      	lsls	r3, r3, #9
 800108c:	401a      	ands	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001092:	429a      	cmp	r2, r3
 8001094:	d10e      	bne.n	80010b4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	220f      	movs	r2, #15
 800109a:	401a      	ands	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d107      	bne.n	80010b4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	23f0      	movs	r3, #240	; 0xf0
 80010a8:	039b      	lsls	r3, r3, #14
 80010aa:	401a      	ands	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d001      	beq.n	80010b8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e000      	b.n	80010ba <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	0018      	movs	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	b008      	add	sp, #32
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	40021000 	.word	0x40021000
 80010c8:	00001388 	.word	0x00001388
 80010cc:	efffffff 	.word	0xefffffff
 80010d0:	feffffff 	.word	0xfeffffff
 80010d4:	ffc2ffff 	.word	0xffc2ffff

080010d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e0b3      	b.n	8001254 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010ec:	4b5b      	ldr	r3, [pc, #364]	; (800125c <HAL_RCC_ClockConfig+0x184>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2201      	movs	r2, #1
 80010f2:	4013      	ands	r3, r2
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d911      	bls.n	800111e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010fa:	4b58      	ldr	r3, [pc, #352]	; (800125c <HAL_RCC_ClockConfig+0x184>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2201      	movs	r2, #1
 8001100:	4393      	bics	r3, r2
 8001102:	0019      	movs	r1, r3
 8001104:	4b55      	ldr	r3, [pc, #340]	; (800125c <HAL_RCC_ClockConfig+0x184>)
 8001106:	683a      	ldr	r2, [r7, #0]
 8001108:	430a      	orrs	r2, r1
 800110a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800110c:	4b53      	ldr	r3, [pc, #332]	; (800125c <HAL_RCC_ClockConfig+0x184>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2201      	movs	r2, #1
 8001112:	4013      	ands	r3, r2
 8001114:	683a      	ldr	r2, [r7, #0]
 8001116:	429a      	cmp	r2, r3
 8001118:	d001      	beq.n	800111e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e09a      	b.n	8001254 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2202      	movs	r2, #2
 8001124:	4013      	ands	r3, r2
 8001126:	d015      	beq.n	8001154 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2204      	movs	r2, #4
 800112e:	4013      	ands	r3, r2
 8001130:	d006      	beq.n	8001140 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001132:	4b4b      	ldr	r3, [pc, #300]	; (8001260 <HAL_RCC_ClockConfig+0x188>)
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	4b4a      	ldr	r3, [pc, #296]	; (8001260 <HAL_RCC_ClockConfig+0x188>)
 8001138:	21e0      	movs	r1, #224	; 0xe0
 800113a:	00c9      	lsls	r1, r1, #3
 800113c:	430a      	orrs	r2, r1
 800113e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001140:	4b47      	ldr	r3, [pc, #284]	; (8001260 <HAL_RCC_ClockConfig+0x188>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	22f0      	movs	r2, #240	; 0xf0
 8001146:	4393      	bics	r3, r2
 8001148:	0019      	movs	r1, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	4b44      	ldr	r3, [pc, #272]	; (8001260 <HAL_RCC_ClockConfig+0x188>)
 8001150:	430a      	orrs	r2, r1
 8001152:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2201      	movs	r2, #1
 800115a:	4013      	ands	r3, r2
 800115c:	d040      	beq.n	80011e0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d107      	bne.n	8001176 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001166:	4b3e      	ldr	r3, [pc, #248]	; (8001260 <HAL_RCC_ClockConfig+0x188>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	2380      	movs	r3, #128	; 0x80
 800116c:	029b      	lsls	r3, r3, #10
 800116e:	4013      	ands	r3, r2
 8001170:	d114      	bne.n	800119c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e06e      	b.n	8001254 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b02      	cmp	r3, #2
 800117c:	d107      	bne.n	800118e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800117e:	4b38      	ldr	r3, [pc, #224]	; (8001260 <HAL_RCC_ClockConfig+0x188>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	2380      	movs	r3, #128	; 0x80
 8001184:	049b      	lsls	r3, r3, #18
 8001186:	4013      	ands	r3, r2
 8001188:	d108      	bne.n	800119c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e062      	b.n	8001254 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800118e:	4b34      	ldr	r3, [pc, #208]	; (8001260 <HAL_RCC_ClockConfig+0x188>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2202      	movs	r2, #2
 8001194:	4013      	ands	r3, r2
 8001196:	d101      	bne.n	800119c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e05b      	b.n	8001254 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800119c:	4b30      	ldr	r3, [pc, #192]	; (8001260 <HAL_RCC_ClockConfig+0x188>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	2203      	movs	r2, #3
 80011a2:	4393      	bics	r3, r2
 80011a4:	0019      	movs	r1, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685a      	ldr	r2, [r3, #4]
 80011aa:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <HAL_RCC_ClockConfig+0x188>)
 80011ac:	430a      	orrs	r2, r1
 80011ae:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011b0:	f7ff fa08 	bl	80005c4 <HAL_GetTick>
 80011b4:	0003      	movs	r3, r0
 80011b6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011b8:	e009      	b.n	80011ce <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011ba:	f7ff fa03 	bl	80005c4 <HAL_GetTick>
 80011be:	0002      	movs	r2, r0
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	4a27      	ldr	r2, [pc, #156]	; (8001264 <HAL_RCC_ClockConfig+0x18c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e042      	b.n	8001254 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ce:	4b24      	ldr	r3, [pc, #144]	; (8001260 <HAL_RCC_ClockConfig+0x188>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	220c      	movs	r2, #12
 80011d4:	401a      	ands	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	429a      	cmp	r2, r3
 80011de:	d1ec      	bne.n	80011ba <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011e0:	4b1e      	ldr	r3, [pc, #120]	; (800125c <HAL_RCC_ClockConfig+0x184>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2201      	movs	r2, #1
 80011e6:	4013      	ands	r3, r2
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d211      	bcs.n	8001212 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ee:	4b1b      	ldr	r3, [pc, #108]	; (800125c <HAL_RCC_ClockConfig+0x184>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2201      	movs	r2, #1
 80011f4:	4393      	bics	r3, r2
 80011f6:	0019      	movs	r1, r3
 80011f8:	4b18      	ldr	r3, [pc, #96]	; (800125c <HAL_RCC_ClockConfig+0x184>)
 80011fa:	683a      	ldr	r2, [r7, #0]
 80011fc:	430a      	orrs	r2, r1
 80011fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <HAL_RCC_ClockConfig+0x184>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2201      	movs	r2, #1
 8001206:	4013      	ands	r3, r2
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	429a      	cmp	r2, r3
 800120c:	d001      	beq.n	8001212 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e020      	b.n	8001254 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2204      	movs	r2, #4
 8001218:	4013      	ands	r3, r2
 800121a:	d009      	beq.n	8001230 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800121c:	4b10      	ldr	r3, [pc, #64]	; (8001260 <HAL_RCC_ClockConfig+0x188>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	4a11      	ldr	r2, [pc, #68]	; (8001268 <HAL_RCC_ClockConfig+0x190>)
 8001222:	4013      	ands	r3, r2
 8001224:	0019      	movs	r1, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	68da      	ldr	r2, [r3, #12]
 800122a:	4b0d      	ldr	r3, [pc, #52]	; (8001260 <HAL_RCC_ClockConfig+0x188>)
 800122c:	430a      	orrs	r2, r1
 800122e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001230:	f000 f820 	bl	8001274 <HAL_RCC_GetSysClockFreq>
 8001234:	0001      	movs	r1, r0
 8001236:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <HAL_RCC_ClockConfig+0x188>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	091b      	lsrs	r3, r3, #4
 800123c:	220f      	movs	r2, #15
 800123e:	4013      	ands	r3, r2
 8001240:	4a0a      	ldr	r2, [pc, #40]	; (800126c <HAL_RCC_ClockConfig+0x194>)
 8001242:	5cd3      	ldrb	r3, [r2, r3]
 8001244:	000a      	movs	r2, r1
 8001246:	40da      	lsrs	r2, r3
 8001248:	4b09      	ldr	r3, [pc, #36]	; (8001270 <HAL_RCC_ClockConfig+0x198>)
 800124a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800124c:	2000      	movs	r0, #0
 800124e:	f7ff f973 	bl	8000538 <HAL_InitTick>
  
  return HAL_OK;
 8001252:	2300      	movs	r3, #0
}
 8001254:	0018      	movs	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	b004      	add	sp, #16
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40022000 	.word	0x40022000
 8001260:	40021000 	.word	0x40021000
 8001264:	00001388 	.word	0x00001388
 8001268:	fffff8ff 	.word	0xfffff8ff
 800126c:	08002344 	.word	0x08002344
 8001270:	20000000 	.word	0x20000000

08001274 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b08f      	sub	sp, #60	; 0x3c
 8001278:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800127a:	2314      	movs	r3, #20
 800127c:	18fb      	adds	r3, r7, r3
 800127e:	4a2b      	ldr	r2, [pc, #172]	; (800132c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001280:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001282:	c313      	stmia	r3!, {r0, r1, r4}
 8001284:	6812      	ldr	r2, [r2, #0]
 8001286:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	4a29      	ldr	r2, [pc, #164]	; (8001330 <HAL_RCC_GetSysClockFreq+0xbc>)
 800128c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800128e:	c313      	stmia	r3!, {r0, r1, r4}
 8001290:	6812      	ldr	r2, [r2, #0]
 8001292:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001298:	2300      	movs	r3, #0
 800129a:	62bb      	str	r3, [r7, #40]	; 0x28
 800129c:	2300      	movs	r3, #0
 800129e:	637b      	str	r3, [r7, #52]	; 0x34
 80012a0:	2300      	movs	r3, #0
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80012a4:	2300      	movs	r3, #0
 80012a6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80012a8:	4b22      	ldr	r3, [pc, #136]	; (8001334 <HAL_RCC_GetSysClockFreq+0xc0>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b0:	220c      	movs	r2, #12
 80012b2:	4013      	ands	r3, r2
 80012b4:	2b04      	cmp	r3, #4
 80012b6:	d002      	beq.n	80012be <HAL_RCC_GetSysClockFreq+0x4a>
 80012b8:	2b08      	cmp	r3, #8
 80012ba:	d003      	beq.n	80012c4 <HAL_RCC_GetSysClockFreq+0x50>
 80012bc:	e02d      	b.n	800131a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012be:	4b1e      	ldr	r3, [pc, #120]	; (8001338 <HAL_RCC_GetSysClockFreq+0xc4>)
 80012c0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80012c2:	e02d      	b.n	8001320 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80012c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c6:	0c9b      	lsrs	r3, r3, #18
 80012c8:	220f      	movs	r2, #15
 80012ca:	4013      	ands	r3, r2
 80012cc:	2214      	movs	r2, #20
 80012ce:	18ba      	adds	r2, r7, r2
 80012d0:	5cd3      	ldrb	r3, [r2, r3]
 80012d2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80012d4:	4b17      	ldr	r3, [pc, #92]	; (8001334 <HAL_RCC_GetSysClockFreq+0xc0>)
 80012d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d8:	220f      	movs	r2, #15
 80012da:	4013      	ands	r3, r2
 80012dc:	1d3a      	adds	r2, r7, #4
 80012de:	5cd3      	ldrb	r3, [r2, r3]
 80012e0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80012e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	025b      	lsls	r3, r3, #9
 80012e8:	4013      	ands	r3, r2
 80012ea:	d009      	beq.n	8001300 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80012ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012ee:	4812      	ldr	r0, [pc, #72]	; (8001338 <HAL_RCC_GetSysClockFreq+0xc4>)
 80012f0:	f7fe ff12 	bl	8000118 <__udivsi3>
 80012f4:	0003      	movs	r3, r0
 80012f6:	001a      	movs	r2, r3
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	4353      	muls	r3, r2
 80012fc:	637b      	str	r3, [r7, #52]	; 0x34
 80012fe:	e009      	b.n	8001314 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001300:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001302:	000a      	movs	r2, r1
 8001304:	0152      	lsls	r2, r2, #5
 8001306:	1a52      	subs	r2, r2, r1
 8001308:	0193      	lsls	r3, r2, #6
 800130a:	1a9b      	subs	r3, r3, r2
 800130c:	00db      	lsls	r3, r3, #3
 800130e:	185b      	adds	r3, r3, r1
 8001310:	021b      	lsls	r3, r3, #8
 8001312:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001316:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001318:	e002      	b.n	8001320 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800131a:	4b07      	ldr	r3, [pc, #28]	; (8001338 <HAL_RCC_GetSysClockFreq+0xc4>)
 800131c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800131e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001322:	0018      	movs	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	b00f      	add	sp, #60	; 0x3c
 8001328:	bd90      	pop	{r4, r7, pc}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	08002324 	.word	0x08002324
 8001330:	08002334 	.word	0x08002334
 8001334:	40021000 	.word	0x40021000
 8001338:	007a1200 	.word	0x007a1200

0800133c <__errno>:
 800133c:	4b01      	ldr	r3, [pc, #4]	; (8001344 <__errno+0x8>)
 800133e:	6818      	ldr	r0, [r3, #0]
 8001340:	4770      	bx	lr
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	2000000c 	.word	0x2000000c

08001348 <__libc_init_array>:
 8001348:	b570      	push	{r4, r5, r6, lr}
 800134a:	2600      	movs	r6, #0
 800134c:	4d0c      	ldr	r5, [pc, #48]	; (8001380 <__libc_init_array+0x38>)
 800134e:	4c0d      	ldr	r4, [pc, #52]	; (8001384 <__libc_init_array+0x3c>)
 8001350:	1b64      	subs	r4, r4, r5
 8001352:	10a4      	asrs	r4, r4, #2
 8001354:	42a6      	cmp	r6, r4
 8001356:	d109      	bne.n	800136c <__libc_init_array+0x24>
 8001358:	2600      	movs	r6, #0
 800135a:	f000 ffd3 	bl	8002304 <_init>
 800135e:	4d0a      	ldr	r5, [pc, #40]	; (8001388 <__libc_init_array+0x40>)
 8001360:	4c0a      	ldr	r4, [pc, #40]	; (800138c <__libc_init_array+0x44>)
 8001362:	1b64      	subs	r4, r4, r5
 8001364:	10a4      	asrs	r4, r4, #2
 8001366:	42a6      	cmp	r6, r4
 8001368:	d105      	bne.n	8001376 <__libc_init_array+0x2e>
 800136a:	bd70      	pop	{r4, r5, r6, pc}
 800136c:	00b3      	lsls	r3, r6, #2
 800136e:	58eb      	ldr	r3, [r5, r3]
 8001370:	4798      	blx	r3
 8001372:	3601      	adds	r6, #1
 8001374:	e7ee      	b.n	8001354 <__libc_init_array+0xc>
 8001376:	00b3      	lsls	r3, r6, #2
 8001378:	58eb      	ldr	r3, [r5, r3]
 800137a:	4798      	blx	r3
 800137c:	3601      	adds	r6, #1
 800137e:	e7f2      	b.n	8001366 <__libc_init_array+0x1e>
 8001380:	080023d4 	.word	0x080023d4
 8001384:	080023d4 	.word	0x080023d4
 8001388:	080023d4 	.word	0x080023d4
 800138c:	080023d8 	.word	0x080023d8

08001390 <memset>:
 8001390:	0003      	movs	r3, r0
 8001392:	1882      	adds	r2, r0, r2
 8001394:	4293      	cmp	r3, r2
 8001396:	d100      	bne.n	800139a <memset+0xa>
 8001398:	4770      	bx	lr
 800139a:	7019      	strb	r1, [r3, #0]
 800139c:	3301      	adds	r3, #1
 800139e:	e7f9      	b.n	8001394 <memset+0x4>

080013a0 <_puts_r>:
 80013a0:	b570      	push	{r4, r5, r6, lr}
 80013a2:	0005      	movs	r5, r0
 80013a4:	000e      	movs	r6, r1
 80013a6:	2800      	cmp	r0, #0
 80013a8:	d004      	beq.n	80013b4 <_puts_r+0x14>
 80013aa:	6983      	ldr	r3, [r0, #24]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d101      	bne.n	80013b4 <_puts_r+0x14>
 80013b0:	f000 fa6e 	bl	8001890 <__sinit>
 80013b4:	69ab      	ldr	r3, [r5, #24]
 80013b6:	68ac      	ldr	r4, [r5, #8]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d102      	bne.n	80013c2 <_puts_r+0x22>
 80013bc:	0028      	movs	r0, r5
 80013be:	f000 fa67 	bl	8001890 <__sinit>
 80013c2:	4b2d      	ldr	r3, [pc, #180]	; (8001478 <_puts_r+0xd8>)
 80013c4:	429c      	cmp	r4, r3
 80013c6:	d122      	bne.n	800140e <_puts_r+0x6e>
 80013c8:	686c      	ldr	r4, [r5, #4]
 80013ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013cc:	07db      	lsls	r3, r3, #31
 80013ce:	d405      	bmi.n	80013dc <_puts_r+0x3c>
 80013d0:	89a3      	ldrh	r3, [r4, #12]
 80013d2:	059b      	lsls	r3, r3, #22
 80013d4:	d402      	bmi.n	80013dc <_puts_r+0x3c>
 80013d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013d8:	f000 fafb 	bl	80019d2 <__retarget_lock_acquire_recursive>
 80013dc:	89a3      	ldrh	r3, [r4, #12]
 80013de:	071b      	lsls	r3, r3, #28
 80013e0:	d502      	bpl.n	80013e8 <_puts_r+0x48>
 80013e2:	6923      	ldr	r3, [r4, #16]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d129      	bne.n	800143c <_puts_r+0x9c>
 80013e8:	0021      	movs	r1, r4
 80013ea:	0028      	movs	r0, r5
 80013ec:	f000 f8aa 	bl	8001544 <__swsetup_r>
 80013f0:	2800      	cmp	r0, #0
 80013f2:	d023      	beq.n	800143c <_puts_r+0x9c>
 80013f4:	2501      	movs	r5, #1
 80013f6:	426d      	negs	r5, r5
 80013f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013fa:	07db      	lsls	r3, r3, #31
 80013fc:	d405      	bmi.n	800140a <_puts_r+0x6a>
 80013fe:	89a3      	ldrh	r3, [r4, #12]
 8001400:	059b      	lsls	r3, r3, #22
 8001402:	d402      	bmi.n	800140a <_puts_r+0x6a>
 8001404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001406:	f000 fae5 	bl	80019d4 <__retarget_lock_release_recursive>
 800140a:	0028      	movs	r0, r5
 800140c:	bd70      	pop	{r4, r5, r6, pc}
 800140e:	4b1b      	ldr	r3, [pc, #108]	; (800147c <_puts_r+0xdc>)
 8001410:	429c      	cmp	r4, r3
 8001412:	d101      	bne.n	8001418 <_puts_r+0x78>
 8001414:	68ac      	ldr	r4, [r5, #8]
 8001416:	e7d8      	b.n	80013ca <_puts_r+0x2a>
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <_puts_r+0xe0>)
 800141a:	429c      	cmp	r4, r3
 800141c:	d1d5      	bne.n	80013ca <_puts_r+0x2a>
 800141e:	68ec      	ldr	r4, [r5, #12]
 8001420:	e7d3      	b.n	80013ca <_puts_r+0x2a>
 8001422:	3601      	adds	r6, #1
 8001424:	60a3      	str	r3, [r4, #8]
 8001426:	2b00      	cmp	r3, #0
 8001428:	da04      	bge.n	8001434 <_puts_r+0x94>
 800142a:	69a2      	ldr	r2, [r4, #24]
 800142c:	429a      	cmp	r2, r3
 800142e:	dc16      	bgt.n	800145e <_puts_r+0xbe>
 8001430:	290a      	cmp	r1, #10
 8001432:	d014      	beq.n	800145e <_puts_r+0xbe>
 8001434:	6823      	ldr	r3, [r4, #0]
 8001436:	1c5a      	adds	r2, r3, #1
 8001438:	6022      	str	r2, [r4, #0]
 800143a:	7019      	strb	r1, [r3, #0]
 800143c:	68a3      	ldr	r3, [r4, #8]
 800143e:	7831      	ldrb	r1, [r6, #0]
 8001440:	3b01      	subs	r3, #1
 8001442:	2900      	cmp	r1, #0
 8001444:	d1ed      	bne.n	8001422 <_puts_r+0x82>
 8001446:	60a3      	str	r3, [r4, #8]
 8001448:	2b00      	cmp	r3, #0
 800144a:	da0f      	bge.n	800146c <_puts_r+0xcc>
 800144c:	0028      	movs	r0, r5
 800144e:	0022      	movs	r2, r4
 8001450:	310a      	adds	r1, #10
 8001452:	f000 f821 	bl	8001498 <__swbuf_r>
 8001456:	250a      	movs	r5, #10
 8001458:	1c43      	adds	r3, r0, #1
 800145a:	d1cd      	bne.n	80013f8 <_puts_r+0x58>
 800145c:	e7ca      	b.n	80013f4 <_puts_r+0x54>
 800145e:	0022      	movs	r2, r4
 8001460:	0028      	movs	r0, r5
 8001462:	f000 f819 	bl	8001498 <__swbuf_r>
 8001466:	1c43      	adds	r3, r0, #1
 8001468:	d1e8      	bne.n	800143c <_puts_r+0x9c>
 800146a:	e7c3      	b.n	80013f4 <_puts_r+0x54>
 800146c:	250a      	movs	r5, #10
 800146e:	6823      	ldr	r3, [r4, #0]
 8001470:	1c5a      	adds	r2, r3, #1
 8001472:	6022      	str	r2, [r4, #0]
 8001474:	701d      	strb	r5, [r3, #0]
 8001476:	e7bf      	b.n	80013f8 <_puts_r+0x58>
 8001478:	08002378 	.word	0x08002378
 800147c:	08002398 	.word	0x08002398
 8001480:	08002358 	.word	0x08002358

08001484 <puts>:
 8001484:	b510      	push	{r4, lr}
 8001486:	4b03      	ldr	r3, [pc, #12]	; (8001494 <puts+0x10>)
 8001488:	0001      	movs	r1, r0
 800148a:	6818      	ldr	r0, [r3, #0]
 800148c:	f7ff ff88 	bl	80013a0 <_puts_r>
 8001490:	bd10      	pop	{r4, pc}
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	2000000c 	.word	0x2000000c

08001498 <__swbuf_r>:
 8001498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800149a:	0005      	movs	r5, r0
 800149c:	000e      	movs	r6, r1
 800149e:	0014      	movs	r4, r2
 80014a0:	2800      	cmp	r0, #0
 80014a2:	d004      	beq.n	80014ae <__swbuf_r+0x16>
 80014a4:	6983      	ldr	r3, [r0, #24]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <__swbuf_r+0x16>
 80014aa:	f000 f9f1 	bl	8001890 <__sinit>
 80014ae:	4b22      	ldr	r3, [pc, #136]	; (8001538 <__swbuf_r+0xa0>)
 80014b0:	429c      	cmp	r4, r3
 80014b2:	d12e      	bne.n	8001512 <__swbuf_r+0x7a>
 80014b4:	686c      	ldr	r4, [r5, #4]
 80014b6:	69a3      	ldr	r3, [r4, #24]
 80014b8:	60a3      	str	r3, [r4, #8]
 80014ba:	89a3      	ldrh	r3, [r4, #12]
 80014bc:	071b      	lsls	r3, r3, #28
 80014be:	d532      	bpl.n	8001526 <__swbuf_r+0x8e>
 80014c0:	6923      	ldr	r3, [r4, #16]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d02f      	beq.n	8001526 <__swbuf_r+0x8e>
 80014c6:	6823      	ldr	r3, [r4, #0]
 80014c8:	6922      	ldr	r2, [r4, #16]
 80014ca:	b2f7      	uxtb	r7, r6
 80014cc:	1a98      	subs	r0, r3, r2
 80014ce:	6963      	ldr	r3, [r4, #20]
 80014d0:	b2f6      	uxtb	r6, r6
 80014d2:	4283      	cmp	r3, r0
 80014d4:	dc05      	bgt.n	80014e2 <__swbuf_r+0x4a>
 80014d6:	0021      	movs	r1, r4
 80014d8:	0028      	movs	r0, r5
 80014da:	f000 f937 	bl	800174c <_fflush_r>
 80014de:	2800      	cmp	r0, #0
 80014e0:	d127      	bne.n	8001532 <__swbuf_r+0x9a>
 80014e2:	68a3      	ldr	r3, [r4, #8]
 80014e4:	3001      	adds	r0, #1
 80014e6:	3b01      	subs	r3, #1
 80014e8:	60a3      	str	r3, [r4, #8]
 80014ea:	6823      	ldr	r3, [r4, #0]
 80014ec:	1c5a      	adds	r2, r3, #1
 80014ee:	6022      	str	r2, [r4, #0]
 80014f0:	701f      	strb	r7, [r3, #0]
 80014f2:	6963      	ldr	r3, [r4, #20]
 80014f4:	4283      	cmp	r3, r0
 80014f6:	d004      	beq.n	8001502 <__swbuf_r+0x6a>
 80014f8:	89a3      	ldrh	r3, [r4, #12]
 80014fa:	07db      	lsls	r3, r3, #31
 80014fc:	d507      	bpl.n	800150e <__swbuf_r+0x76>
 80014fe:	2e0a      	cmp	r6, #10
 8001500:	d105      	bne.n	800150e <__swbuf_r+0x76>
 8001502:	0021      	movs	r1, r4
 8001504:	0028      	movs	r0, r5
 8001506:	f000 f921 	bl	800174c <_fflush_r>
 800150a:	2800      	cmp	r0, #0
 800150c:	d111      	bne.n	8001532 <__swbuf_r+0x9a>
 800150e:	0030      	movs	r0, r6
 8001510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <__swbuf_r+0xa4>)
 8001514:	429c      	cmp	r4, r3
 8001516:	d101      	bne.n	800151c <__swbuf_r+0x84>
 8001518:	68ac      	ldr	r4, [r5, #8]
 800151a:	e7cc      	b.n	80014b6 <__swbuf_r+0x1e>
 800151c:	4b08      	ldr	r3, [pc, #32]	; (8001540 <__swbuf_r+0xa8>)
 800151e:	429c      	cmp	r4, r3
 8001520:	d1c9      	bne.n	80014b6 <__swbuf_r+0x1e>
 8001522:	68ec      	ldr	r4, [r5, #12]
 8001524:	e7c7      	b.n	80014b6 <__swbuf_r+0x1e>
 8001526:	0021      	movs	r1, r4
 8001528:	0028      	movs	r0, r5
 800152a:	f000 f80b 	bl	8001544 <__swsetup_r>
 800152e:	2800      	cmp	r0, #0
 8001530:	d0c9      	beq.n	80014c6 <__swbuf_r+0x2e>
 8001532:	2601      	movs	r6, #1
 8001534:	4276      	negs	r6, r6
 8001536:	e7ea      	b.n	800150e <__swbuf_r+0x76>
 8001538:	08002378 	.word	0x08002378
 800153c:	08002398 	.word	0x08002398
 8001540:	08002358 	.word	0x08002358

08001544 <__swsetup_r>:
 8001544:	4b37      	ldr	r3, [pc, #220]	; (8001624 <__swsetup_r+0xe0>)
 8001546:	b570      	push	{r4, r5, r6, lr}
 8001548:	681d      	ldr	r5, [r3, #0]
 800154a:	0006      	movs	r6, r0
 800154c:	000c      	movs	r4, r1
 800154e:	2d00      	cmp	r5, #0
 8001550:	d005      	beq.n	800155e <__swsetup_r+0x1a>
 8001552:	69ab      	ldr	r3, [r5, #24]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d102      	bne.n	800155e <__swsetup_r+0x1a>
 8001558:	0028      	movs	r0, r5
 800155a:	f000 f999 	bl	8001890 <__sinit>
 800155e:	4b32      	ldr	r3, [pc, #200]	; (8001628 <__swsetup_r+0xe4>)
 8001560:	429c      	cmp	r4, r3
 8001562:	d10f      	bne.n	8001584 <__swsetup_r+0x40>
 8001564:	686c      	ldr	r4, [r5, #4]
 8001566:	230c      	movs	r3, #12
 8001568:	5ee2      	ldrsh	r2, [r4, r3]
 800156a:	b293      	uxth	r3, r2
 800156c:	0711      	lsls	r1, r2, #28
 800156e:	d42d      	bmi.n	80015cc <__swsetup_r+0x88>
 8001570:	06d9      	lsls	r1, r3, #27
 8001572:	d411      	bmi.n	8001598 <__swsetup_r+0x54>
 8001574:	2309      	movs	r3, #9
 8001576:	2001      	movs	r0, #1
 8001578:	6033      	str	r3, [r6, #0]
 800157a:	3337      	adds	r3, #55	; 0x37
 800157c:	4313      	orrs	r3, r2
 800157e:	81a3      	strh	r3, [r4, #12]
 8001580:	4240      	negs	r0, r0
 8001582:	bd70      	pop	{r4, r5, r6, pc}
 8001584:	4b29      	ldr	r3, [pc, #164]	; (800162c <__swsetup_r+0xe8>)
 8001586:	429c      	cmp	r4, r3
 8001588:	d101      	bne.n	800158e <__swsetup_r+0x4a>
 800158a:	68ac      	ldr	r4, [r5, #8]
 800158c:	e7eb      	b.n	8001566 <__swsetup_r+0x22>
 800158e:	4b28      	ldr	r3, [pc, #160]	; (8001630 <__swsetup_r+0xec>)
 8001590:	429c      	cmp	r4, r3
 8001592:	d1e8      	bne.n	8001566 <__swsetup_r+0x22>
 8001594:	68ec      	ldr	r4, [r5, #12]
 8001596:	e7e6      	b.n	8001566 <__swsetup_r+0x22>
 8001598:	075b      	lsls	r3, r3, #29
 800159a:	d513      	bpl.n	80015c4 <__swsetup_r+0x80>
 800159c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800159e:	2900      	cmp	r1, #0
 80015a0:	d008      	beq.n	80015b4 <__swsetup_r+0x70>
 80015a2:	0023      	movs	r3, r4
 80015a4:	3344      	adds	r3, #68	; 0x44
 80015a6:	4299      	cmp	r1, r3
 80015a8:	d002      	beq.n	80015b0 <__swsetup_r+0x6c>
 80015aa:	0030      	movs	r0, r6
 80015ac:	f000 fa80 	bl	8001ab0 <_free_r>
 80015b0:	2300      	movs	r3, #0
 80015b2:	6363      	str	r3, [r4, #52]	; 0x34
 80015b4:	2224      	movs	r2, #36	; 0x24
 80015b6:	89a3      	ldrh	r3, [r4, #12]
 80015b8:	4393      	bics	r3, r2
 80015ba:	81a3      	strh	r3, [r4, #12]
 80015bc:	2300      	movs	r3, #0
 80015be:	6063      	str	r3, [r4, #4]
 80015c0:	6923      	ldr	r3, [r4, #16]
 80015c2:	6023      	str	r3, [r4, #0]
 80015c4:	2308      	movs	r3, #8
 80015c6:	89a2      	ldrh	r2, [r4, #12]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	81a3      	strh	r3, [r4, #12]
 80015cc:	6923      	ldr	r3, [r4, #16]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d10b      	bne.n	80015ea <__swsetup_r+0xa6>
 80015d2:	21a0      	movs	r1, #160	; 0xa0
 80015d4:	2280      	movs	r2, #128	; 0x80
 80015d6:	89a3      	ldrh	r3, [r4, #12]
 80015d8:	0089      	lsls	r1, r1, #2
 80015da:	0092      	lsls	r2, r2, #2
 80015dc:	400b      	ands	r3, r1
 80015de:	4293      	cmp	r3, r2
 80015e0:	d003      	beq.n	80015ea <__swsetup_r+0xa6>
 80015e2:	0021      	movs	r1, r4
 80015e4:	0030      	movs	r0, r6
 80015e6:	f000 fa1f 	bl	8001a28 <__smakebuf_r>
 80015ea:	220c      	movs	r2, #12
 80015ec:	5ea3      	ldrsh	r3, [r4, r2]
 80015ee:	2001      	movs	r0, #1
 80015f0:	001a      	movs	r2, r3
 80015f2:	b299      	uxth	r1, r3
 80015f4:	4002      	ands	r2, r0
 80015f6:	4203      	tst	r3, r0
 80015f8:	d00f      	beq.n	800161a <__swsetup_r+0xd6>
 80015fa:	2200      	movs	r2, #0
 80015fc:	60a2      	str	r2, [r4, #8]
 80015fe:	6962      	ldr	r2, [r4, #20]
 8001600:	4252      	negs	r2, r2
 8001602:	61a2      	str	r2, [r4, #24]
 8001604:	2000      	movs	r0, #0
 8001606:	6922      	ldr	r2, [r4, #16]
 8001608:	4282      	cmp	r2, r0
 800160a:	d1ba      	bne.n	8001582 <__swsetup_r+0x3e>
 800160c:	060a      	lsls	r2, r1, #24
 800160e:	d5b8      	bpl.n	8001582 <__swsetup_r+0x3e>
 8001610:	2240      	movs	r2, #64	; 0x40
 8001612:	4313      	orrs	r3, r2
 8001614:	81a3      	strh	r3, [r4, #12]
 8001616:	3801      	subs	r0, #1
 8001618:	e7b3      	b.n	8001582 <__swsetup_r+0x3e>
 800161a:	0788      	lsls	r0, r1, #30
 800161c:	d400      	bmi.n	8001620 <__swsetup_r+0xdc>
 800161e:	6962      	ldr	r2, [r4, #20]
 8001620:	60a2      	str	r2, [r4, #8]
 8001622:	e7ef      	b.n	8001604 <__swsetup_r+0xc0>
 8001624:	2000000c 	.word	0x2000000c
 8001628:	08002378 	.word	0x08002378
 800162c:	08002398 	.word	0x08002398
 8001630:	08002358 	.word	0x08002358

08001634 <__sflush_r>:
 8001634:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001636:	898b      	ldrh	r3, [r1, #12]
 8001638:	0005      	movs	r5, r0
 800163a:	000c      	movs	r4, r1
 800163c:	071a      	lsls	r2, r3, #28
 800163e:	d45f      	bmi.n	8001700 <__sflush_r+0xcc>
 8001640:	684a      	ldr	r2, [r1, #4]
 8001642:	2a00      	cmp	r2, #0
 8001644:	dc04      	bgt.n	8001650 <__sflush_r+0x1c>
 8001646:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8001648:	2a00      	cmp	r2, #0
 800164a:	dc01      	bgt.n	8001650 <__sflush_r+0x1c>
 800164c:	2000      	movs	r0, #0
 800164e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001650:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8001652:	2f00      	cmp	r7, #0
 8001654:	d0fa      	beq.n	800164c <__sflush_r+0x18>
 8001656:	2200      	movs	r2, #0
 8001658:	2180      	movs	r1, #128	; 0x80
 800165a:	682e      	ldr	r6, [r5, #0]
 800165c:	602a      	str	r2, [r5, #0]
 800165e:	001a      	movs	r2, r3
 8001660:	0149      	lsls	r1, r1, #5
 8001662:	400a      	ands	r2, r1
 8001664:	420b      	tst	r3, r1
 8001666:	d034      	beq.n	80016d2 <__sflush_r+0x9e>
 8001668:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800166a:	89a3      	ldrh	r3, [r4, #12]
 800166c:	075b      	lsls	r3, r3, #29
 800166e:	d506      	bpl.n	800167e <__sflush_r+0x4a>
 8001670:	6863      	ldr	r3, [r4, #4]
 8001672:	1ac0      	subs	r0, r0, r3
 8001674:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <__sflush_r+0x4a>
 800167a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800167c:	1ac0      	subs	r0, r0, r3
 800167e:	0002      	movs	r2, r0
 8001680:	6a21      	ldr	r1, [r4, #32]
 8001682:	2300      	movs	r3, #0
 8001684:	0028      	movs	r0, r5
 8001686:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8001688:	47b8      	blx	r7
 800168a:	89a1      	ldrh	r1, [r4, #12]
 800168c:	1c43      	adds	r3, r0, #1
 800168e:	d106      	bne.n	800169e <__sflush_r+0x6a>
 8001690:	682b      	ldr	r3, [r5, #0]
 8001692:	2b1d      	cmp	r3, #29
 8001694:	d831      	bhi.n	80016fa <__sflush_r+0xc6>
 8001696:	4a2c      	ldr	r2, [pc, #176]	; (8001748 <__sflush_r+0x114>)
 8001698:	40da      	lsrs	r2, r3
 800169a:	07d3      	lsls	r3, r2, #31
 800169c:	d52d      	bpl.n	80016fa <__sflush_r+0xc6>
 800169e:	2300      	movs	r3, #0
 80016a0:	6063      	str	r3, [r4, #4]
 80016a2:	6923      	ldr	r3, [r4, #16]
 80016a4:	6023      	str	r3, [r4, #0]
 80016a6:	04cb      	lsls	r3, r1, #19
 80016a8:	d505      	bpl.n	80016b6 <__sflush_r+0x82>
 80016aa:	1c43      	adds	r3, r0, #1
 80016ac:	d102      	bne.n	80016b4 <__sflush_r+0x80>
 80016ae:	682b      	ldr	r3, [r5, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d100      	bne.n	80016b6 <__sflush_r+0x82>
 80016b4:	6560      	str	r0, [r4, #84]	; 0x54
 80016b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80016b8:	602e      	str	r6, [r5, #0]
 80016ba:	2900      	cmp	r1, #0
 80016bc:	d0c6      	beq.n	800164c <__sflush_r+0x18>
 80016be:	0023      	movs	r3, r4
 80016c0:	3344      	adds	r3, #68	; 0x44
 80016c2:	4299      	cmp	r1, r3
 80016c4:	d002      	beq.n	80016cc <__sflush_r+0x98>
 80016c6:	0028      	movs	r0, r5
 80016c8:	f000 f9f2 	bl	8001ab0 <_free_r>
 80016cc:	2000      	movs	r0, #0
 80016ce:	6360      	str	r0, [r4, #52]	; 0x34
 80016d0:	e7bd      	b.n	800164e <__sflush_r+0x1a>
 80016d2:	2301      	movs	r3, #1
 80016d4:	0028      	movs	r0, r5
 80016d6:	6a21      	ldr	r1, [r4, #32]
 80016d8:	47b8      	blx	r7
 80016da:	1c43      	adds	r3, r0, #1
 80016dc:	d1c5      	bne.n	800166a <__sflush_r+0x36>
 80016de:	682b      	ldr	r3, [r5, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0c2      	beq.n	800166a <__sflush_r+0x36>
 80016e4:	2b1d      	cmp	r3, #29
 80016e6:	d001      	beq.n	80016ec <__sflush_r+0xb8>
 80016e8:	2b16      	cmp	r3, #22
 80016ea:	d101      	bne.n	80016f0 <__sflush_r+0xbc>
 80016ec:	602e      	str	r6, [r5, #0]
 80016ee:	e7ad      	b.n	800164c <__sflush_r+0x18>
 80016f0:	2340      	movs	r3, #64	; 0x40
 80016f2:	89a2      	ldrh	r2, [r4, #12]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	81a3      	strh	r3, [r4, #12]
 80016f8:	e7a9      	b.n	800164e <__sflush_r+0x1a>
 80016fa:	2340      	movs	r3, #64	; 0x40
 80016fc:	430b      	orrs	r3, r1
 80016fe:	e7fa      	b.n	80016f6 <__sflush_r+0xc2>
 8001700:	690f      	ldr	r7, [r1, #16]
 8001702:	2f00      	cmp	r7, #0
 8001704:	d0a2      	beq.n	800164c <__sflush_r+0x18>
 8001706:	680a      	ldr	r2, [r1, #0]
 8001708:	600f      	str	r7, [r1, #0]
 800170a:	1bd2      	subs	r2, r2, r7
 800170c:	9201      	str	r2, [sp, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	079b      	lsls	r3, r3, #30
 8001712:	d100      	bne.n	8001716 <__sflush_r+0xe2>
 8001714:	694a      	ldr	r2, [r1, #20]
 8001716:	60a2      	str	r2, [r4, #8]
 8001718:	9b01      	ldr	r3, [sp, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	dc00      	bgt.n	8001720 <__sflush_r+0xec>
 800171e:	e795      	b.n	800164c <__sflush_r+0x18>
 8001720:	003a      	movs	r2, r7
 8001722:	0028      	movs	r0, r5
 8001724:	9b01      	ldr	r3, [sp, #4]
 8001726:	6a21      	ldr	r1, [r4, #32]
 8001728:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800172a:	47b0      	blx	r6
 800172c:	2800      	cmp	r0, #0
 800172e:	dc06      	bgt.n	800173e <__sflush_r+0x10a>
 8001730:	2340      	movs	r3, #64	; 0x40
 8001732:	2001      	movs	r0, #1
 8001734:	89a2      	ldrh	r2, [r4, #12]
 8001736:	4240      	negs	r0, r0
 8001738:	4313      	orrs	r3, r2
 800173a:	81a3      	strh	r3, [r4, #12]
 800173c:	e787      	b.n	800164e <__sflush_r+0x1a>
 800173e:	9b01      	ldr	r3, [sp, #4]
 8001740:	183f      	adds	r7, r7, r0
 8001742:	1a1b      	subs	r3, r3, r0
 8001744:	9301      	str	r3, [sp, #4]
 8001746:	e7e7      	b.n	8001718 <__sflush_r+0xe4>
 8001748:	20400001 	.word	0x20400001

0800174c <_fflush_r>:
 800174c:	690b      	ldr	r3, [r1, #16]
 800174e:	b570      	push	{r4, r5, r6, lr}
 8001750:	0005      	movs	r5, r0
 8001752:	000c      	movs	r4, r1
 8001754:	2b00      	cmp	r3, #0
 8001756:	d102      	bne.n	800175e <_fflush_r+0x12>
 8001758:	2500      	movs	r5, #0
 800175a:	0028      	movs	r0, r5
 800175c:	bd70      	pop	{r4, r5, r6, pc}
 800175e:	2800      	cmp	r0, #0
 8001760:	d004      	beq.n	800176c <_fflush_r+0x20>
 8001762:	6983      	ldr	r3, [r0, #24]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d101      	bne.n	800176c <_fflush_r+0x20>
 8001768:	f000 f892 	bl	8001890 <__sinit>
 800176c:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <_fflush_r+0x74>)
 800176e:	429c      	cmp	r4, r3
 8001770:	d11b      	bne.n	80017aa <_fflush_r+0x5e>
 8001772:	686c      	ldr	r4, [r5, #4]
 8001774:	220c      	movs	r2, #12
 8001776:	5ea3      	ldrsh	r3, [r4, r2]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0ed      	beq.n	8001758 <_fflush_r+0xc>
 800177c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800177e:	07d2      	lsls	r2, r2, #31
 8001780:	d404      	bmi.n	800178c <_fflush_r+0x40>
 8001782:	059b      	lsls	r3, r3, #22
 8001784:	d402      	bmi.n	800178c <_fflush_r+0x40>
 8001786:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001788:	f000 f923 	bl	80019d2 <__retarget_lock_acquire_recursive>
 800178c:	0028      	movs	r0, r5
 800178e:	0021      	movs	r1, r4
 8001790:	f7ff ff50 	bl	8001634 <__sflush_r>
 8001794:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001796:	0005      	movs	r5, r0
 8001798:	07db      	lsls	r3, r3, #31
 800179a:	d4de      	bmi.n	800175a <_fflush_r+0xe>
 800179c:	89a3      	ldrh	r3, [r4, #12]
 800179e:	059b      	lsls	r3, r3, #22
 80017a0:	d4db      	bmi.n	800175a <_fflush_r+0xe>
 80017a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017a4:	f000 f916 	bl	80019d4 <__retarget_lock_release_recursive>
 80017a8:	e7d7      	b.n	800175a <_fflush_r+0xe>
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <_fflush_r+0x78>)
 80017ac:	429c      	cmp	r4, r3
 80017ae:	d101      	bne.n	80017b4 <_fflush_r+0x68>
 80017b0:	68ac      	ldr	r4, [r5, #8]
 80017b2:	e7df      	b.n	8001774 <_fflush_r+0x28>
 80017b4:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <_fflush_r+0x7c>)
 80017b6:	429c      	cmp	r4, r3
 80017b8:	d1dc      	bne.n	8001774 <_fflush_r+0x28>
 80017ba:	68ec      	ldr	r4, [r5, #12]
 80017bc:	e7da      	b.n	8001774 <_fflush_r+0x28>
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	08002378 	.word	0x08002378
 80017c4:	08002398 	.word	0x08002398
 80017c8:	08002358 	.word	0x08002358

080017cc <std>:
 80017cc:	2300      	movs	r3, #0
 80017ce:	b510      	push	{r4, lr}
 80017d0:	0004      	movs	r4, r0
 80017d2:	6003      	str	r3, [r0, #0]
 80017d4:	6043      	str	r3, [r0, #4]
 80017d6:	6083      	str	r3, [r0, #8]
 80017d8:	8181      	strh	r1, [r0, #12]
 80017da:	6643      	str	r3, [r0, #100]	; 0x64
 80017dc:	0019      	movs	r1, r3
 80017de:	81c2      	strh	r2, [r0, #14]
 80017e0:	6103      	str	r3, [r0, #16]
 80017e2:	6143      	str	r3, [r0, #20]
 80017e4:	6183      	str	r3, [r0, #24]
 80017e6:	2208      	movs	r2, #8
 80017e8:	305c      	adds	r0, #92	; 0x5c
 80017ea:	f7ff fdd1 	bl	8001390 <memset>
 80017ee:	4b05      	ldr	r3, [pc, #20]	; (8001804 <std+0x38>)
 80017f0:	6263      	str	r3, [r4, #36]	; 0x24
 80017f2:	4b05      	ldr	r3, [pc, #20]	; (8001808 <std+0x3c>)
 80017f4:	6224      	str	r4, [r4, #32]
 80017f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <std+0x40>)
 80017fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80017fc:	4b04      	ldr	r3, [pc, #16]	; (8001810 <std+0x44>)
 80017fe:	6323      	str	r3, [r4, #48]	; 0x30
 8001800:	bd10      	pop	{r4, pc}
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	08001c25 	.word	0x08001c25
 8001808:	08001c4d 	.word	0x08001c4d
 800180c:	08001c85 	.word	0x08001c85
 8001810:	08001cb1 	.word	0x08001cb1

08001814 <_cleanup_r>:
 8001814:	b510      	push	{r4, lr}
 8001816:	4902      	ldr	r1, [pc, #8]	; (8001820 <_cleanup_r+0xc>)
 8001818:	f000 f8ba 	bl	8001990 <_fwalk_reent>
 800181c:	bd10      	pop	{r4, pc}
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	0800174d 	.word	0x0800174d

08001824 <__sfmoreglue>:
 8001824:	b570      	push	{r4, r5, r6, lr}
 8001826:	2568      	movs	r5, #104	; 0x68
 8001828:	1e4a      	subs	r2, r1, #1
 800182a:	4355      	muls	r5, r2
 800182c:	000e      	movs	r6, r1
 800182e:	0029      	movs	r1, r5
 8001830:	3174      	adds	r1, #116	; 0x74
 8001832:	f000 f987 	bl	8001b44 <_malloc_r>
 8001836:	1e04      	subs	r4, r0, #0
 8001838:	d008      	beq.n	800184c <__sfmoreglue+0x28>
 800183a:	2100      	movs	r1, #0
 800183c:	002a      	movs	r2, r5
 800183e:	6001      	str	r1, [r0, #0]
 8001840:	6046      	str	r6, [r0, #4]
 8001842:	300c      	adds	r0, #12
 8001844:	60a0      	str	r0, [r4, #8]
 8001846:	3268      	adds	r2, #104	; 0x68
 8001848:	f7ff fda2 	bl	8001390 <memset>
 800184c:	0020      	movs	r0, r4
 800184e:	bd70      	pop	{r4, r5, r6, pc}

08001850 <__sfp_lock_acquire>:
 8001850:	b510      	push	{r4, lr}
 8001852:	4802      	ldr	r0, [pc, #8]	; (800185c <__sfp_lock_acquire+0xc>)
 8001854:	f000 f8bd 	bl	80019d2 <__retarget_lock_acquire_recursive>
 8001858:	bd10      	pop	{r4, pc}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	20000158 	.word	0x20000158

08001860 <__sfp_lock_release>:
 8001860:	b510      	push	{r4, lr}
 8001862:	4802      	ldr	r0, [pc, #8]	; (800186c <__sfp_lock_release+0xc>)
 8001864:	f000 f8b6 	bl	80019d4 <__retarget_lock_release_recursive>
 8001868:	bd10      	pop	{r4, pc}
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	20000158 	.word	0x20000158

08001870 <__sinit_lock_acquire>:
 8001870:	b510      	push	{r4, lr}
 8001872:	4802      	ldr	r0, [pc, #8]	; (800187c <__sinit_lock_acquire+0xc>)
 8001874:	f000 f8ad 	bl	80019d2 <__retarget_lock_acquire_recursive>
 8001878:	bd10      	pop	{r4, pc}
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	20000153 	.word	0x20000153

08001880 <__sinit_lock_release>:
 8001880:	b510      	push	{r4, lr}
 8001882:	4802      	ldr	r0, [pc, #8]	; (800188c <__sinit_lock_release+0xc>)
 8001884:	f000 f8a6 	bl	80019d4 <__retarget_lock_release_recursive>
 8001888:	bd10      	pop	{r4, pc}
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	20000153 	.word	0x20000153

08001890 <__sinit>:
 8001890:	b513      	push	{r0, r1, r4, lr}
 8001892:	0004      	movs	r4, r0
 8001894:	f7ff ffec 	bl	8001870 <__sinit_lock_acquire>
 8001898:	69a3      	ldr	r3, [r4, #24]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d002      	beq.n	80018a4 <__sinit+0x14>
 800189e:	f7ff ffef 	bl	8001880 <__sinit_lock_release>
 80018a2:	bd13      	pop	{r0, r1, r4, pc}
 80018a4:	64a3      	str	r3, [r4, #72]	; 0x48
 80018a6:	64e3      	str	r3, [r4, #76]	; 0x4c
 80018a8:	6523      	str	r3, [r4, #80]	; 0x50
 80018aa:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <__sinit+0x68>)
 80018ac:	4a13      	ldr	r2, [pc, #76]	; (80018fc <__sinit+0x6c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80018b2:	9301      	str	r3, [sp, #4]
 80018b4:	42a3      	cmp	r3, r4
 80018b6:	d101      	bne.n	80018bc <__sinit+0x2c>
 80018b8:	2301      	movs	r3, #1
 80018ba:	61a3      	str	r3, [r4, #24]
 80018bc:	0020      	movs	r0, r4
 80018be:	f000 f81f 	bl	8001900 <__sfp>
 80018c2:	6060      	str	r0, [r4, #4]
 80018c4:	0020      	movs	r0, r4
 80018c6:	f000 f81b 	bl	8001900 <__sfp>
 80018ca:	60a0      	str	r0, [r4, #8]
 80018cc:	0020      	movs	r0, r4
 80018ce:	f000 f817 	bl	8001900 <__sfp>
 80018d2:	2200      	movs	r2, #0
 80018d4:	2104      	movs	r1, #4
 80018d6:	60e0      	str	r0, [r4, #12]
 80018d8:	6860      	ldr	r0, [r4, #4]
 80018da:	f7ff ff77 	bl	80017cc <std>
 80018de:	2201      	movs	r2, #1
 80018e0:	2109      	movs	r1, #9
 80018e2:	68a0      	ldr	r0, [r4, #8]
 80018e4:	f7ff ff72 	bl	80017cc <std>
 80018e8:	2202      	movs	r2, #2
 80018ea:	2112      	movs	r1, #18
 80018ec:	68e0      	ldr	r0, [r4, #12]
 80018ee:	f7ff ff6d 	bl	80017cc <std>
 80018f2:	2301      	movs	r3, #1
 80018f4:	61a3      	str	r3, [r4, #24]
 80018f6:	e7d2      	b.n	800189e <__sinit+0xe>
 80018f8:	08002354 	.word	0x08002354
 80018fc:	08001815 	.word	0x08001815

08001900 <__sfp>:
 8001900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001902:	0007      	movs	r7, r0
 8001904:	f7ff ffa4 	bl	8001850 <__sfp_lock_acquire>
 8001908:	4b1f      	ldr	r3, [pc, #124]	; (8001988 <__sfp+0x88>)
 800190a:	681e      	ldr	r6, [r3, #0]
 800190c:	69b3      	ldr	r3, [r6, #24]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d102      	bne.n	8001918 <__sfp+0x18>
 8001912:	0030      	movs	r0, r6
 8001914:	f7ff ffbc 	bl	8001890 <__sinit>
 8001918:	3648      	adds	r6, #72	; 0x48
 800191a:	68b4      	ldr	r4, [r6, #8]
 800191c:	6873      	ldr	r3, [r6, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	d504      	bpl.n	800192c <__sfp+0x2c>
 8001922:	6833      	ldr	r3, [r6, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d022      	beq.n	800196e <__sfp+0x6e>
 8001928:	6836      	ldr	r6, [r6, #0]
 800192a:	e7f6      	b.n	800191a <__sfp+0x1a>
 800192c:	220c      	movs	r2, #12
 800192e:	5ea5      	ldrsh	r5, [r4, r2]
 8001930:	2d00      	cmp	r5, #0
 8001932:	d11a      	bne.n	800196a <__sfp+0x6a>
 8001934:	0020      	movs	r0, r4
 8001936:	4b15      	ldr	r3, [pc, #84]	; (800198c <__sfp+0x8c>)
 8001938:	3058      	adds	r0, #88	; 0x58
 800193a:	60e3      	str	r3, [r4, #12]
 800193c:	6665      	str	r5, [r4, #100]	; 0x64
 800193e:	f000 f847 	bl	80019d0 <__retarget_lock_init_recursive>
 8001942:	f7ff ff8d 	bl	8001860 <__sfp_lock_release>
 8001946:	0020      	movs	r0, r4
 8001948:	2208      	movs	r2, #8
 800194a:	0029      	movs	r1, r5
 800194c:	6025      	str	r5, [r4, #0]
 800194e:	60a5      	str	r5, [r4, #8]
 8001950:	6065      	str	r5, [r4, #4]
 8001952:	6125      	str	r5, [r4, #16]
 8001954:	6165      	str	r5, [r4, #20]
 8001956:	61a5      	str	r5, [r4, #24]
 8001958:	305c      	adds	r0, #92	; 0x5c
 800195a:	f7ff fd19 	bl	8001390 <memset>
 800195e:	6365      	str	r5, [r4, #52]	; 0x34
 8001960:	63a5      	str	r5, [r4, #56]	; 0x38
 8001962:	64a5      	str	r5, [r4, #72]	; 0x48
 8001964:	64e5      	str	r5, [r4, #76]	; 0x4c
 8001966:	0020      	movs	r0, r4
 8001968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800196a:	3468      	adds	r4, #104	; 0x68
 800196c:	e7d7      	b.n	800191e <__sfp+0x1e>
 800196e:	2104      	movs	r1, #4
 8001970:	0038      	movs	r0, r7
 8001972:	f7ff ff57 	bl	8001824 <__sfmoreglue>
 8001976:	1e04      	subs	r4, r0, #0
 8001978:	6030      	str	r0, [r6, #0]
 800197a:	d1d5      	bne.n	8001928 <__sfp+0x28>
 800197c:	f7ff ff70 	bl	8001860 <__sfp_lock_release>
 8001980:	230c      	movs	r3, #12
 8001982:	603b      	str	r3, [r7, #0]
 8001984:	e7ef      	b.n	8001966 <__sfp+0x66>
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	08002354 	.word	0x08002354
 800198c:	ffff0001 	.word	0xffff0001

08001990 <_fwalk_reent>:
 8001990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001992:	0004      	movs	r4, r0
 8001994:	0006      	movs	r6, r0
 8001996:	2700      	movs	r7, #0
 8001998:	9101      	str	r1, [sp, #4]
 800199a:	3448      	adds	r4, #72	; 0x48
 800199c:	6863      	ldr	r3, [r4, #4]
 800199e:	68a5      	ldr	r5, [r4, #8]
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	9b00      	ldr	r3, [sp, #0]
 80019a4:	3b01      	subs	r3, #1
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	d504      	bpl.n	80019b4 <_fwalk_reent+0x24>
 80019aa:	6824      	ldr	r4, [r4, #0]
 80019ac:	2c00      	cmp	r4, #0
 80019ae:	d1f5      	bne.n	800199c <_fwalk_reent+0xc>
 80019b0:	0038      	movs	r0, r7
 80019b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80019b4:	89ab      	ldrh	r3, [r5, #12]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d908      	bls.n	80019cc <_fwalk_reent+0x3c>
 80019ba:	220e      	movs	r2, #14
 80019bc:	5eab      	ldrsh	r3, [r5, r2]
 80019be:	3301      	adds	r3, #1
 80019c0:	d004      	beq.n	80019cc <_fwalk_reent+0x3c>
 80019c2:	0029      	movs	r1, r5
 80019c4:	0030      	movs	r0, r6
 80019c6:	9b01      	ldr	r3, [sp, #4]
 80019c8:	4798      	blx	r3
 80019ca:	4307      	orrs	r7, r0
 80019cc:	3568      	adds	r5, #104	; 0x68
 80019ce:	e7e8      	b.n	80019a2 <_fwalk_reent+0x12>

080019d0 <__retarget_lock_init_recursive>:
 80019d0:	4770      	bx	lr

080019d2 <__retarget_lock_acquire_recursive>:
 80019d2:	4770      	bx	lr

080019d4 <__retarget_lock_release_recursive>:
 80019d4:	4770      	bx	lr
	...

080019d8 <__swhatbuf_r>:
 80019d8:	b570      	push	{r4, r5, r6, lr}
 80019da:	000e      	movs	r6, r1
 80019dc:	001d      	movs	r5, r3
 80019de:	230e      	movs	r3, #14
 80019e0:	5ec9      	ldrsh	r1, [r1, r3]
 80019e2:	0014      	movs	r4, r2
 80019e4:	b096      	sub	sp, #88	; 0x58
 80019e6:	2900      	cmp	r1, #0
 80019e8:	da07      	bge.n	80019fa <__swhatbuf_r+0x22>
 80019ea:	2300      	movs	r3, #0
 80019ec:	602b      	str	r3, [r5, #0]
 80019ee:	89b3      	ldrh	r3, [r6, #12]
 80019f0:	061b      	lsls	r3, r3, #24
 80019f2:	d411      	bmi.n	8001a18 <__swhatbuf_r+0x40>
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	e00f      	b.n	8001a1a <__swhatbuf_r+0x42>
 80019fa:	466a      	mov	r2, sp
 80019fc:	f000 f984 	bl	8001d08 <_fstat_r>
 8001a00:	2800      	cmp	r0, #0
 8001a02:	dbf2      	blt.n	80019ea <__swhatbuf_r+0x12>
 8001a04:	23f0      	movs	r3, #240	; 0xf0
 8001a06:	9901      	ldr	r1, [sp, #4]
 8001a08:	021b      	lsls	r3, r3, #8
 8001a0a:	4019      	ands	r1, r3
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <__swhatbuf_r+0x4c>)
 8001a0e:	18c9      	adds	r1, r1, r3
 8001a10:	424b      	negs	r3, r1
 8001a12:	4159      	adcs	r1, r3
 8001a14:	6029      	str	r1, [r5, #0]
 8001a16:	e7ed      	b.n	80019f4 <__swhatbuf_r+0x1c>
 8001a18:	2340      	movs	r3, #64	; 0x40
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	6023      	str	r3, [r4, #0]
 8001a1e:	b016      	add	sp, #88	; 0x58
 8001a20:	bd70      	pop	{r4, r5, r6, pc}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	ffffe000 	.word	0xffffe000

08001a28 <__smakebuf_r>:
 8001a28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001a2a:	2602      	movs	r6, #2
 8001a2c:	898b      	ldrh	r3, [r1, #12]
 8001a2e:	0005      	movs	r5, r0
 8001a30:	000c      	movs	r4, r1
 8001a32:	4233      	tst	r3, r6
 8001a34:	d006      	beq.n	8001a44 <__smakebuf_r+0x1c>
 8001a36:	0023      	movs	r3, r4
 8001a38:	3347      	adds	r3, #71	; 0x47
 8001a3a:	6023      	str	r3, [r4, #0]
 8001a3c:	6123      	str	r3, [r4, #16]
 8001a3e:	2301      	movs	r3, #1
 8001a40:	6163      	str	r3, [r4, #20]
 8001a42:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001a44:	466a      	mov	r2, sp
 8001a46:	ab01      	add	r3, sp, #4
 8001a48:	f7ff ffc6 	bl	80019d8 <__swhatbuf_r>
 8001a4c:	9900      	ldr	r1, [sp, #0]
 8001a4e:	0007      	movs	r7, r0
 8001a50:	0028      	movs	r0, r5
 8001a52:	f000 f877 	bl	8001b44 <_malloc_r>
 8001a56:	2800      	cmp	r0, #0
 8001a58:	d108      	bne.n	8001a6c <__smakebuf_r+0x44>
 8001a5a:	220c      	movs	r2, #12
 8001a5c:	5ea3      	ldrsh	r3, [r4, r2]
 8001a5e:	059a      	lsls	r2, r3, #22
 8001a60:	d4ef      	bmi.n	8001a42 <__smakebuf_r+0x1a>
 8001a62:	2203      	movs	r2, #3
 8001a64:	4393      	bics	r3, r2
 8001a66:	431e      	orrs	r6, r3
 8001a68:	81a6      	strh	r6, [r4, #12]
 8001a6a:	e7e4      	b.n	8001a36 <__smakebuf_r+0xe>
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <__smakebuf_r+0x84>)
 8001a6e:	62ab      	str	r3, [r5, #40]	; 0x28
 8001a70:	2380      	movs	r3, #128	; 0x80
 8001a72:	89a2      	ldrh	r2, [r4, #12]
 8001a74:	6020      	str	r0, [r4, #0]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	81a3      	strh	r3, [r4, #12]
 8001a7a:	9b00      	ldr	r3, [sp, #0]
 8001a7c:	6120      	str	r0, [r4, #16]
 8001a7e:	6163      	str	r3, [r4, #20]
 8001a80:	9b01      	ldr	r3, [sp, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00d      	beq.n	8001aa2 <__smakebuf_r+0x7a>
 8001a86:	0028      	movs	r0, r5
 8001a88:	230e      	movs	r3, #14
 8001a8a:	5ee1      	ldrsh	r1, [r4, r3]
 8001a8c:	f000 f94e 	bl	8001d2c <_isatty_r>
 8001a90:	2800      	cmp	r0, #0
 8001a92:	d006      	beq.n	8001aa2 <__smakebuf_r+0x7a>
 8001a94:	2203      	movs	r2, #3
 8001a96:	89a3      	ldrh	r3, [r4, #12]
 8001a98:	4393      	bics	r3, r2
 8001a9a:	001a      	movs	r2, r3
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	81a3      	strh	r3, [r4, #12]
 8001aa2:	89a0      	ldrh	r0, [r4, #12]
 8001aa4:	4307      	orrs	r7, r0
 8001aa6:	81a7      	strh	r7, [r4, #12]
 8001aa8:	e7cb      	b.n	8001a42 <__smakebuf_r+0x1a>
 8001aaa:	46c0      	nop			; (mov r8, r8)
 8001aac:	08001815 	.word	0x08001815

08001ab0 <_free_r>:
 8001ab0:	b570      	push	{r4, r5, r6, lr}
 8001ab2:	0005      	movs	r5, r0
 8001ab4:	2900      	cmp	r1, #0
 8001ab6:	d010      	beq.n	8001ada <_free_r+0x2a>
 8001ab8:	1f0c      	subs	r4, r1, #4
 8001aba:	6823      	ldr	r3, [r4, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	da00      	bge.n	8001ac2 <_free_r+0x12>
 8001ac0:	18e4      	adds	r4, r4, r3
 8001ac2:	0028      	movs	r0, r5
 8001ac4:	f000 f958 	bl	8001d78 <__malloc_lock>
 8001ac8:	4a1d      	ldr	r2, [pc, #116]	; (8001b40 <_free_r+0x90>)
 8001aca:	6813      	ldr	r3, [r2, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d105      	bne.n	8001adc <_free_r+0x2c>
 8001ad0:	6063      	str	r3, [r4, #4]
 8001ad2:	6014      	str	r4, [r2, #0]
 8001ad4:	0028      	movs	r0, r5
 8001ad6:	f000 f957 	bl	8001d88 <__malloc_unlock>
 8001ada:	bd70      	pop	{r4, r5, r6, pc}
 8001adc:	42a3      	cmp	r3, r4
 8001ade:	d908      	bls.n	8001af2 <_free_r+0x42>
 8001ae0:	6821      	ldr	r1, [r4, #0]
 8001ae2:	1860      	adds	r0, r4, r1
 8001ae4:	4283      	cmp	r3, r0
 8001ae6:	d1f3      	bne.n	8001ad0 <_free_r+0x20>
 8001ae8:	6818      	ldr	r0, [r3, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	1841      	adds	r1, r0, r1
 8001aee:	6021      	str	r1, [r4, #0]
 8001af0:	e7ee      	b.n	8001ad0 <_free_r+0x20>
 8001af2:	001a      	movs	r2, r3
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <_free_r+0x4e>
 8001afa:	42a3      	cmp	r3, r4
 8001afc:	d9f9      	bls.n	8001af2 <_free_r+0x42>
 8001afe:	6811      	ldr	r1, [r2, #0]
 8001b00:	1850      	adds	r0, r2, r1
 8001b02:	42a0      	cmp	r0, r4
 8001b04:	d10b      	bne.n	8001b1e <_free_r+0x6e>
 8001b06:	6820      	ldr	r0, [r4, #0]
 8001b08:	1809      	adds	r1, r1, r0
 8001b0a:	1850      	adds	r0, r2, r1
 8001b0c:	6011      	str	r1, [r2, #0]
 8001b0e:	4283      	cmp	r3, r0
 8001b10:	d1e0      	bne.n	8001ad4 <_free_r+0x24>
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	1841      	adds	r1, r0, r1
 8001b18:	6011      	str	r1, [r2, #0]
 8001b1a:	6053      	str	r3, [r2, #4]
 8001b1c:	e7da      	b.n	8001ad4 <_free_r+0x24>
 8001b1e:	42a0      	cmp	r0, r4
 8001b20:	d902      	bls.n	8001b28 <_free_r+0x78>
 8001b22:	230c      	movs	r3, #12
 8001b24:	602b      	str	r3, [r5, #0]
 8001b26:	e7d5      	b.n	8001ad4 <_free_r+0x24>
 8001b28:	6821      	ldr	r1, [r4, #0]
 8001b2a:	1860      	adds	r0, r4, r1
 8001b2c:	4283      	cmp	r3, r0
 8001b2e:	d103      	bne.n	8001b38 <_free_r+0x88>
 8001b30:	6818      	ldr	r0, [r3, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	1841      	adds	r1, r0, r1
 8001b36:	6021      	str	r1, [r4, #0]
 8001b38:	6063      	str	r3, [r4, #4]
 8001b3a:	6054      	str	r4, [r2, #4]
 8001b3c:	e7ca      	b.n	8001ad4 <_free_r+0x24>
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	20000098 	.word	0x20000098

08001b44 <_malloc_r>:
 8001b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b46:	2303      	movs	r3, #3
 8001b48:	1ccd      	adds	r5, r1, #3
 8001b4a:	439d      	bics	r5, r3
 8001b4c:	3508      	adds	r5, #8
 8001b4e:	0006      	movs	r6, r0
 8001b50:	2d0c      	cmp	r5, #12
 8001b52:	d21f      	bcs.n	8001b94 <_malloc_r+0x50>
 8001b54:	250c      	movs	r5, #12
 8001b56:	42a9      	cmp	r1, r5
 8001b58:	d81e      	bhi.n	8001b98 <_malloc_r+0x54>
 8001b5a:	0030      	movs	r0, r6
 8001b5c:	f000 f90c 	bl	8001d78 <__malloc_lock>
 8001b60:	4925      	ldr	r1, [pc, #148]	; (8001bf8 <_malloc_r+0xb4>)
 8001b62:	680a      	ldr	r2, [r1, #0]
 8001b64:	0014      	movs	r4, r2
 8001b66:	2c00      	cmp	r4, #0
 8001b68:	d11a      	bne.n	8001ba0 <_malloc_r+0x5c>
 8001b6a:	4f24      	ldr	r7, [pc, #144]	; (8001bfc <_malloc_r+0xb8>)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d104      	bne.n	8001b7c <_malloc_r+0x38>
 8001b72:	0021      	movs	r1, r4
 8001b74:	0030      	movs	r0, r6
 8001b76:	f000 f843 	bl	8001c00 <_sbrk_r>
 8001b7a:	6038      	str	r0, [r7, #0]
 8001b7c:	0029      	movs	r1, r5
 8001b7e:	0030      	movs	r0, r6
 8001b80:	f000 f83e 	bl	8001c00 <_sbrk_r>
 8001b84:	1c43      	adds	r3, r0, #1
 8001b86:	d12b      	bne.n	8001be0 <_malloc_r+0x9c>
 8001b88:	230c      	movs	r3, #12
 8001b8a:	0030      	movs	r0, r6
 8001b8c:	6033      	str	r3, [r6, #0]
 8001b8e:	f000 f8fb 	bl	8001d88 <__malloc_unlock>
 8001b92:	e003      	b.n	8001b9c <_malloc_r+0x58>
 8001b94:	2d00      	cmp	r5, #0
 8001b96:	dade      	bge.n	8001b56 <_malloc_r+0x12>
 8001b98:	230c      	movs	r3, #12
 8001b9a:	6033      	str	r3, [r6, #0]
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ba0:	6823      	ldr	r3, [r4, #0]
 8001ba2:	1b5b      	subs	r3, r3, r5
 8001ba4:	d419      	bmi.n	8001bda <_malloc_r+0x96>
 8001ba6:	2b0b      	cmp	r3, #11
 8001ba8:	d903      	bls.n	8001bb2 <_malloc_r+0x6e>
 8001baa:	6023      	str	r3, [r4, #0]
 8001bac:	18e4      	adds	r4, r4, r3
 8001bae:	6025      	str	r5, [r4, #0]
 8001bb0:	e003      	b.n	8001bba <_malloc_r+0x76>
 8001bb2:	6863      	ldr	r3, [r4, #4]
 8001bb4:	42a2      	cmp	r2, r4
 8001bb6:	d10e      	bne.n	8001bd6 <_malloc_r+0x92>
 8001bb8:	600b      	str	r3, [r1, #0]
 8001bba:	0030      	movs	r0, r6
 8001bbc:	f000 f8e4 	bl	8001d88 <__malloc_unlock>
 8001bc0:	0020      	movs	r0, r4
 8001bc2:	2207      	movs	r2, #7
 8001bc4:	300b      	adds	r0, #11
 8001bc6:	1d23      	adds	r3, r4, #4
 8001bc8:	4390      	bics	r0, r2
 8001bca:	1ac2      	subs	r2, r0, r3
 8001bcc:	4298      	cmp	r0, r3
 8001bce:	d0e6      	beq.n	8001b9e <_malloc_r+0x5a>
 8001bd0:	1a1b      	subs	r3, r3, r0
 8001bd2:	50a3      	str	r3, [r4, r2]
 8001bd4:	e7e3      	b.n	8001b9e <_malloc_r+0x5a>
 8001bd6:	6053      	str	r3, [r2, #4]
 8001bd8:	e7ef      	b.n	8001bba <_malloc_r+0x76>
 8001bda:	0022      	movs	r2, r4
 8001bdc:	6864      	ldr	r4, [r4, #4]
 8001bde:	e7c2      	b.n	8001b66 <_malloc_r+0x22>
 8001be0:	2303      	movs	r3, #3
 8001be2:	1cc4      	adds	r4, r0, #3
 8001be4:	439c      	bics	r4, r3
 8001be6:	42a0      	cmp	r0, r4
 8001be8:	d0e1      	beq.n	8001bae <_malloc_r+0x6a>
 8001bea:	1a21      	subs	r1, r4, r0
 8001bec:	0030      	movs	r0, r6
 8001bee:	f000 f807 	bl	8001c00 <_sbrk_r>
 8001bf2:	1c43      	adds	r3, r0, #1
 8001bf4:	d1db      	bne.n	8001bae <_malloc_r+0x6a>
 8001bf6:	e7c7      	b.n	8001b88 <_malloc_r+0x44>
 8001bf8:	20000098 	.word	0x20000098
 8001bfc:	2000009c 	.word	0x2000009c

08001c00 <_sbrk_r>:
 8001c00:	2300      	movs	r3, #0
 8001c02:	b570      	push	{r4, r5, r6, lr}
 8001c04:	4d06      	ldr	r5, [pc, #24]	; (8001c20 <_sbrk_r+0x20>)
 8001c06:	0004      	movs	r4, r0
 8001c08:	0008      	movs	r0, r1
 8001c0a:	602b      	str	r3, [r5, #0]
 8001c0c:	f7fe fc1a 	bl	8000444 <_sbrk>
 8001c10:	1c43      	adds	r3, r0, #1
 8001c12:	d103      	bne.n	8001c1c <_sbrk_r+0x1c>
 8001c14:	682b      	ldr	r3, [r5, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d000      	beq.n	8001c1c <_sbrk_r+0x1c>
 8001c1a:	6023      	str	r3, [r4, #0]
 8001c1c:	bd70      	pop	{r4, r5, r6, pc}
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	2000015c 	.word	0x2000015c

08001c24 <__sread>:
 8001c24:	b570      	push	{r4, r5, r6, lr}
 8001c26:	000c      	movs	r4, r1
 8001c28:	250e      	movs	r5, #14
 8001c2a:	5f49      	ldrsh	r1, [r1, r5]
 8001c2c:	f000 f8b4 	bl	8001d98 <_read_r>
 8001c30:	2800      	cmp	r0, #0
 8001c32:	db03      	blt.n	8001c3c <__sread+0x18>
 8001c34:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001c36:	181b      	adds	r3, r3, r0
 8001c38:	6563      	str	r3, [r4, #84]	; 0x54
 8001c3a:	bd70      	pop	{r4, r5, r6, pc}
 8001c3c:	89a3      	ldrh	r3, [r4, #12]
 8001c3e:	4a02      	ldr	r2, [pc, #8]	; (8001c48 <__sread+0x24>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	81a3      	strh	r3, [r4, #12]
 8001c44:	e7f9      	b.n	8001c3a <__sread+0x16>
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	ffffefff 	.word	0xffffefff

08001c4c <__swrite>:
 8001c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c4e:	001f      	movs	r7, r3
 8001c50:	898b      	ldrh	r3, [r1, #12]
 8001c52:	0005      	movs	r5, r0
 8001c54:	000c      	movs	r4, r1
 8001c56:	0016      	movs	r6, r2
 8001c58:	05db      	lsls	r3, r3, #23
 8001c5a:	d505      	bpl.n	8001c68 <__swrite+0x1c>
 8001c5c:	230e      	movs	r3, #14
 8001c5e:	5ec9      	ldrsh	r1, [r1, r3]
 8001c60:	2200      	movs	r2, #0
 8001c62:	2302      	movs	r3, #2
 8001c64:	f000 f874 	bl	8001d50 <_lseek_r>
 8001c68:	89a3      	ldrh	r3, [r4, #12]
 8001c6a:	4a05      	ldr	r2, [pc, #20]	; (8001c80 <__swrite+0x34>)
 8001c6c:	0028      	movs	r0, r5
 8001c6e:	4013      	ands	r3, r2
 8001c70:	81a3      	strh	r3, [r4, #12]
 8001c72:	0032      	movs	r2, r6
 8001c74:	230e      	movs	r3, #14
 8001c76:	5ee1      	ldrsh	r1, [r4, r3]
 8001c78:	003b      	movs	r3, r7
 8001c7a:	f000 f81f 	bl	8001cbc <_write_r>
 8001c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c80:	ffffefff 	.word	0xffffefff

08001c84 <__sseek>:
 8001c84:	b570      	push	{r4, r5, r6, lr}
 8001c86:	000c      	movs	r4, r1
 8001c88:	250e      	movs	r5, #14
 8001c8a:	5f49      	ldrsh	r1, [r1, r5]
 8001c8c:	f000 f860 	bl	8001d50 <_lseek_r>
 8001c90:	89a3      	ldrh	r3, [r4, #12]
 8001c92:	1c42      	adds	r2, r0, #1
 8001c94:	d103      	bne.n	8001c9e <__sseek+0x1a>
 8001c96:	4a05      	ldr	r2, [pc, #20]	; (8001cac <__sseek+0x28>)
 8001c98:	4013      	ands	r3, r2
 8001c9a:	81a3      	strh	r3, [r4, #12]
 8001c9c:	bd70      	pop	{r4, r5, r6, pc}
 8001c9e:	2280      	movs	r2, #128	; 0x80
 8001ca0:	0152      	lsls	r2, r2, #5
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	81a3      	strh	r3, [r4, #12]
 8001ca6:	6560      	str	r0, [r4, #84]	; 0x54
 8001ca8:	e7f8      	b.n	8001c9c <__sseek+0x18>
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	ffffefff 	.word	0xffffefff

08001cb0 <__sclose>:
 8001cb0:	b510      	push	{r4, lr}
 8001cb2:	230e      	movs	r3, #14
 8001cb4:	5ec9      	ldrsh	r1, [r1, r3]
 8001cb6:	f000 f815 	bl	8001ce4 <_close_r>
 8001cba:	bd10      	pop	{r4, pc}

08001cbc <_write_r>:
 8001cbc:	b570      	push	{r4, r5, r6, lr}
 8001cbe:	0004      	movs	r4, r0
 8001cc0:	0008      	movs	r0, r1
 8001cc2:	0011      	movs	r1, r2
 8001cc4:	001a      	movs	r2, r3
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	4d05      	ldr	r5, [pc, #20]	; (8001ce0 <_write_r+0x24>)
 8001cca:	602b      	str	r3, [r5, #0]
 8001ccc:	f000 f929 	bl	8001f22 <_write>
 8001cd0:	1c43      	adds	r3, r0, #1
 8001cd2:	d103      	bne.n	8001cdc <_write_r+0x20>
 8001cd4:	682b      	ldr	r3, [r5, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d000      	beq.n	8001cdc <_write_r+0x20>
 8001cda:	6023      	str	r3, [r4, #0]
 8001cdc:	bd70      	pop	{r4, r5, r6, pc}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	2000015c 	.word	0x2000015c

08001ce4 <_close_r>:
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	b570      	push	{r4, r5, r6, lr}
 8001ce8:	4d06      	ldr	r5, [pc, #24]	; (8001d04 <_close_r+0x20>)
 8001cea:	0004      	movs	r4, r0
 8001cec:	0008      	movs	r0, r1
 8001cee:	602b      	str	r3, [r5, #0]
 8001cf0:	f000 f942 	bl	8001f78 <_close>
 8001cf4:	1c43      	adds	r3, r0, #1
 8001cf6:	d103      	bne.n	8001d00 <_close_r+0x1c>
 8001cf8:	682b      	ldr	r3, [r5, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d000      	beq.n	8001d00 <_close_r+0x1c>
 8001cfe:	6023      	str	r3, [r4, #0]
 8001d00:	bd70      	pop	{r4, r5, r6, pc}
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	2000015c 	.word	0x2000015c

08001d08 <_fstat_r>:
 8001d08:	2300      	movs	r3, #0
 8001d0a:	b570      	push	{r4, r5, r6, lr}
 8001d0c:	4d06      	ldr	r5, [pc, #24]	; (8001d28 <_fstat_r+0x20>)
 8001d0e:	0004      	movs	r4, r0
 8001d10:	0008      	movs	r0, r1
 8001d12:	0011      	movs	r1, r2
 8001d14:	602b      	str	r3, [r5, #0]
 8001d16:	f000 f977 	bl	8002008 <_fstat>
 8001d1a:	1c43      	adds	r3, r0, #1
 8001d1c:	d103      	bne.n	8001d26 <_fstat_r+0x1e>
 8001d1e:	682b      	ldr	r3, [r5, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d000      	beq.n	8001d26 <_fstat_r+0x1e>
 8001d24:	6023      	str	r3, [r4, #0]
 8001d26:	bd70      	pop	{r4, r5, r6, pc}
 8001d28:	2000015c 	.word	0x2000015c

08001d2c <_isatty_r>:
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	b570      	push	{r4, r5, r6, lr}
 8001d30:	4d06      	ldr	r5, [pc, #24]	; (8001d4c <_isatty_r+0x20>)
 8001d32:	0004      	movs	r4, r0
 8001d34:	0008      	movs	r0, r1
 8001d36:	602b      	str	r3, [r5, #0]
 8001d38:	f000 fac6 	bl	80022c8 <_isatty>
 8001d3c:	1c43      	adds	r3, r0, #1
 8001d3e:	d103      	bne.n	8001d48 <_isatty_r+0x1c>
 8001d40:	682b      	ldr	r3, [r5, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d000      	beq.n	8001d48 <_isatty_r+0x1c>
 8001d46:	6023      	str	r3, [r4, #0]
 8001d48:	bd70      	pop	{r4, r5, r6, pc}
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	2000015c 	.word	0x2000015c

08001d50 <_lseek_r>:
 8001d50:	b570      	push	{r4, r5, r6, lr}
 8001d52:	0004      	movs	r4, r0
 8001d54:	0008      	movs	r0, r1
 8001d56:	0011      	movs	r1, r2
 8001d58:	001a      	movs	r2, r3
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	4d05      	ldr	r5, [pc, #20]	; (8001d74 <_lseek_r+0x24>)
 8001d5e:	602b      	str	r3, [r5, #0]
 8001d60:	f000 f8cb 	bl	8001efa <_lseek>
 8001d64:	1c43      	adds	r3, r0, #1
 8001d66:	d103      	bne.n	8001d70 <_lseek_r+0x20>
 8001d68:	682b      	ldr	r3, [r5, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d000      	beq.n	8001d70 <_lseek_r+0x20>
 8001d6e:	6023      	str	r3, [r4, #0]
 8001d70:	bd70      	pop	{r4, r5, r6, pc}
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	2000015c 	.word	0x2000015c

08001d78 <__malloc_lock>:
 8001d78:	b510      	push	{r4, lr}
 8001d7a:	4802      	ldr	r0, [pc, #8]	; (8001d84 <__malloc_lock+0xc>)
 8001d7c:	f7ff fe29 	bl	80019d2 <__retarget_lock_acquire_recursive>
 8001d80:	bd10      	pop	{r4, pc}
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	20000154 	.word	0x20000154

08001d88 <__malloc_unlock>:
 8001d88:	b510      	push	{r4, lr}
 8001d8a:	4802      	ldr	r0, [pc, #8]	; (8001d94 <__malloc_unlock+0xc>)
 8001d8c:	f7ff fe22 	bl	80019d4 <__retarget_lock_release_recursive>
 8001d90:	bd10      	pop	{r4, pc}
 8001d92:	46c0      	nop			; (mov r8, r8)
 8001d94:	20000154 	.word	0x20000154

08001d98 <_read_r>:
 8001d98:	b570      	push	{r4, r5, r6, lr}
 8001d9a:	0004      	movs	r4, r0
 8001d9c:	0008      	movs	r0, r1
 8001d9e:	0011      	movs	r1, r2
 8001da0:	001a      	movs	r2, r3
 8001da2:	2300      	movs	r3, #0
 8001da4:	4d05      	ldr	r5, [pc, #20]	; (8001dbc <_read_r+0x24>)
 8001da6:	602b      	str	r3, [r5, #0]
 8001da8:	f000 f852 	bl	8001e50 <_read>
 8001dac:	1c43      	adds	r3, r0, #1
 8001dae:	d103      	bne.n	8001db8 <_read_r+0x20>
 8001db0:	682b      	ldr	r3, [r5, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d000      	beq.n	8001db8 <_read_r+0x20>
 8001db6:	6023      	str	r3, [r4, #0]
 8001db8:	bd70      	pop	{r4, r5, r6, pc}
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	2000015c 	.word	0x2000015c

08001dc0 <findslot>:
 8001dc0:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <findslot+0x2c>)
 8001dc2:	b510      	push	{r4, lr}
 8001dc4:	0004      	movs	r4, r0
 8001dc6:	6818      	ldr	r0, [r3, #0]
 8001dc8:	2800      	cmp	r0, #0
 8001dca:	d004      	beq.n	8001dd6 <findslot+0x16>
 8001dcc:	6983      	ldr	r3, [r0, #24]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <findslot+0x16>
 8001dd2:	f7ff fd5d 	bl	8001890 <__sinit>
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	2c13      	cmp	r4, #19
 8001dda:	d805      	bhi.n	8001de8 <findslot+0x28>
 8001ddc:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <findslot+0x30>)
 8001dde:	00e4      	lsls	r4, r4, #3
 8001de0:	58e2      	ldr	r2, [r4, r3]
 8001de2:	3201      	adds	r2, #1
 8001de4:	d000      	beq.n	8001de8 <findslot+0x28>
 8001de6:	18e0      	adds	r0, r4, r3
 8001de8:	bd10      	pop	{r4, pc}
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	2000000c 	.word	0x2000000c
 8001df0:	200000ac 	.word	0x200000ac

08001df4 <checkerror>:
 8001df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001df6:	0004      	movs	r4, r0
 8001df8:	1c43      	adds	r3, r0, #1
 8001dfa:	d109      	bne.n	8001e10 <checkerror+0x1c>
 8001dfc:	f7ff fa9e 	bl	800133c <__errno>
 8001e00:	2613      	movs	r6, #19
 8001e02:	0005      	movs	r5, r0
 8001e04:	2700      	movs	r7, #0
 8001e06:	1c30      	adds	r0, r6, #0
 8001e08:	1c39      	adds	r1, r7, #0
 8001e0a:	beab      	bkpt	0x00ab
 8001e0c:	1c06      	adds	r6, r0, #0
 8001e0e:	602e      	str	r6, [r5, #0]
 8001e10:	0020      	movs	r0, r4
 8001e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001e14 <error>:
 8001e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e16:	0004      	movs	r4, r0
 8001e18:	f7ff fa90 	bl	800133c <__errno>
 8001e1c:	2613      	movs	r6, #19
 8001e1e:	0005      	movs	r5, r0
 8001e20:	2700      	movs	r7, #0
 8001e22:	1c30      	adds	r0, r6, #0
 8001e24:	1c39      	adds	r1, r7, #0
 8001e26:	beab      	bkpt	0x00ab
 8001e28:	1c06      	adds	r6, r0, #0
 8001e2a:	602e      	str	r6, [r5, #0]
 8001e2c:	0020      	movs	r0, r4
 8001e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001e30 <_swiread>:
 8001e30:	b530      	push	{r4, r5, lr}
 8001e32:	b085      	sub	sp, #20
 8001e34:	ad01      	add	r5, sp, #4
 8001e36:	9001      	str	r0, [sp, #4]
 8001e38:	9102      	str	r1, [sp, #8]
 8001e3a:	9203      	str	r2, [sp, #12]
 8001e3c:	2406      	movs	r4, #6
 8001e3e:	1c20      	adds	r0, r4, #0
 8001e40:	1c29      	adds	r1, r5, #0
 8001e42:	beab      	bkpt	0x00ab
 8001e44:	1c04      	adds	r4, r0, #0
 8001e46:	0020      	movs	r0, r4
 8001e48:	f7ff ffd4 	bl	8001df4 <checkerror>
 8001e4c:	b005      	add	sp, #20
 8001e4e:	bd30      	pop	{r4, r5, pc}

08001e50 <_read>:
 8001e50:	b570      	push	{r4, r5, r6, lr}
 8001e52:	000e      	movs	r6, r1
 8001e54:	0015      	movs	r5, r2
 8001e56:	f7ff ffb3 	bl	8001dc0 <findslot>
 8001e5a:	1e04      	subs	r4, r0, #0
 8001e5c:	d106      	bne.n	8001e6c <_read+0x1c>
 8001e5e:	f7ff fa6d 	bl	800133c <__errno>
 8001e62:	2309      	movs	r3, #9
 8001e64:	6003      	str	r3, [r0, #0]
 8001e66:	2001      	movs	r0, #1
 8001e68:	4240      	negs	r0, r0
 8001e6a:	bd70      	pop	{r4, r5, r6, pc}
 8001e6c:	002a      	movs	r2, r5
 8001e6e:	0031      	movs	r1, r6
 8001e70:	6800      	ldr	r0, [r0, #0]
 8001e72:	f7ff ffdd 	bl	8001e30 <_swiread>
 8001e76:	1c43      	adds	r3, r0, #1
 8001e78:	d0f7      	beq.n	8001e6a <_read+0x1a>
 8001e7a:	6863      	ldr	r3, [r4, #4]
 8001e7c:	1a28      	subs	r0, r5, r0
 8001e7e:	181b      	adds	r3, r3, r0
 8001e80:	6063      	str	r3, [r4, #4]
 8001e82:	e7f2      	b.n	8001e6a <_read+0x1a>

08001e84 <_swilseek>:
 8001e84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e86:	000c      	movs	r4, r1
 8001e88:	0016      	movs	r6, r2
 8001e8a:	f7ff ff99 	bl	8001dc0 <findslot>
 8001e8e:	1e05      	subs	r5, r0, #0
 8001e90:	d107      	bne.n	8001ea2 <_swilseek+0x1e>
 8001e92:	f7ff fa53 	bl	800133c <__errno>
 8001e96:	2309      	movs	r3, #9
 8001e98:	6003      	str	r3, [r0, #0]
 8001e9a:	2401      	movs	r4, #1
 8001e9c:	4264      	negs	r4, r4
 8001e9e:	0020      	movs	r0, r4
 8001ea0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001ea2:	2e02      	cmp	r6, #2
 8001ea4:	d903      	bls.n	8001eae <_swilseek+0x2a>
 8001ea6:	f7ff fa49 	bl	800133c <__errno>
 8001eaa:	2316      	movs	r3, #22
 8001eac:	e7f4      	b.n	8001e98 <_swilseek+0x14>
 8001eae:	2e01      	cmp	r6, #1
 8001eb0:	d112      	bne.n	8001ed8 <_swilseek+0x54>
 8001eb2:	6843      	ldr	r3, [r0, #4]
 8001eb4:	18e4      	adds	r4, r4, r3
 8001eb6:	d4f6      	bmi.n	8001ea6 <_swilseek+0x22>
 8001eb8:	466f      	mov	r7, sp
 8001eba:	682b      	ldr	r3, [r5, #0]
 8001ebc:	260a      	movs	r6, #10
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	607c      	str	r4, [r7, #4]
 8001ec2:	1c30      	adds	r0, r6, #0
 8001ec4:	1c39      	adds	r1, r7, #0
 8001ec6:	beab      	bkpt	0x00ab
 8001ec8:	1c06      	adds	r6, r0, #0
 8001eca:	0030      	movs	r0, r6
 8001ecc:	f7ff ff92 	bl	8001df4 <checkerror>
 8001ed0:	2800      	cmp	r0, #0
 8001ed2:	dbe2      	blt.n	8001e9a <_swilseek+0x16>
 8001ed4:	606c      	str	r4, [r5, #4]
 8001ed6:	e7e2      	b.n	8001e9e <_swilseek+0x1a>
 8001ed8:	2e02      	cmp	r6, #2
 8001eda:	d1ed      	bne.n	8001eb8 <_swilseek+0x34>
 8001edc:	6803      	ldr	r3, [r0, #0]
 8001ede:	466f      	mov	r7, sp
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	360a      	adds	r6, #10
 8001ee4:	1c30      	adds	r0, r6, #0
 8001ee6:	1c39      	adds	r1, r7, #0
 8001ee8:	beab      	bkpt	0x00ab
 8001eea:	1c06      	adds	r6, r0, #0
 8001eec:	0030      	movs	r0, r6
 8001eee:	f7ff ff81 	bl	8001df4 <checkerror>
 8001ef2:	1824      	adds	r4, r4, r0
 8001ef4:	1c43      	adds	r3, r0, #1
 8001ef6:	d1df      	bne.n	8001eb8 <_swilseek+0x34>
 8001ef8:	e7cf      	b.n	8001e9a <_swilseek+0x16>

08001efa <_lseek>:
 8001efa:	b510      	push	{r4, lr}
 8001efc:	f7ff ffc2 	bl	8001e84 <_swilseek>
 8001f00:	bd10      	pop	{r4, pc}

08001f02 <_swiwrite>:
 8001f02:	b530      	push	{r4, r5, lr}
 8001f04:	b085      	sub	sp, #20
 8001f06:	ad01      	add	r5, sp, #4
 8001f08:	9001      	str	r0, [sp, #4]
 8001f0a:	9102      	str	r1, [sp, #8]
 8001f0c:	9203      	str	r2, [sp, #12]
 8001f0e:	2405      	movs	r4, #5
 8001f10:	1c20      	adds	r0, r4, #0
 8001f12:	1c29      	adds	r1, r5, #0
 8001f14:	beab      	bkpt	0x00ab
 8001f16:	1c04      	adds	r4, r0, #0
 8001f18:	0020      	movs	r0, r4
 8001f1a:	f7ff ff6b 	bl	8001df4 <checkerror>
 8001f1e:	b005      	add	sp, #20
 8001f20:	bd30      	pop	{r4, r5, pc}

08001f22 <_write>:
 8001f22:	b570      	push	{r4, r5, r6, lr}
 8001f24:	000e      	movs	r6, r1
 8001f26:	0015      	movs	r5, r2
 8001f28:	f7ff ff4a 	bl	8001dc0 <findslot>
 8001f2c:	1e04      	subs	r4, r0, #0
 8001f2e:	d106      	bne.n	8001f3e <_write+0x1c>
 8001f30:	f7ff fa04 	bl	800133c <__errno>
 8001f34:	2309      	movs	r3, #9
 8001f36:	6003      	str	r3, [r0, #0]
 8001f38:	2001      	movs	r0, #1
 8001f3a:	4240      	negs	r0, r0
 8001f3c:	e00f      	b.n	8001f5e <_write+0x3c>
 8001f3e:	002a      	movs	r2, r5
 8001f40:	0031      	movs	r1, r6
 8001f42:	6800      	ldr	r0, [r0, #0]
 8001f44:	f7ff ffdd 	bl	8001f02 <_swiwrite>
 8001f48:	1e03      	subs	r3, r0, #0
 8001f4a:	dbf5      	blt.n	8001f38 <_write+0x16>
 8001f4c:	6862      	ldr	r2, [r4, #4]
 8001f4e:	1a28      	subs	r0, r5, r0
 8001f50:	1812      	adds	r2, r2, r0
 8001f52:	6062      	str	r2, [r4, #4]
 8001f54:	42ab      	cmp	r3, r5
 8001f56:	d102      	bne.n	8001f5e <_write+0x3c>
 8001f58:	2000      	movs	r0, #0
 8001f5a:	f7ff ff5b 	bl	8001e14 <error>
 8001f5e:	bd70      	pop	{r4, r5, r6, pc}

08001f60 <_swiclose>:
 8001f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001f62:	2402      	movs	r4, #2
 8001f64:	9001      	str	r0, [sp, #4]
 8001f66:	ad01      	add	r5, sp, #4
 8001f68:	1c20      	adds	r0, r4, #0
 8001f6a:	1c29      	adds	r1, r5, #0
 8001f6c:	beab      	bkpt	0x00ab
 8001f6e:	1c04      	adds	r4, r0, #0
 8001f70:	0020      	movs	r0, r4
 8001f72:	f7ff ff3f 	bl	8001df4 <checkerror>
 8001f76:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08001f78 <_close>:
 8001f78:	b570      	push	{r4, r5, r6, lr}
 8001f7a:	0005      	movs	r5, r0
 8001f7c:	f7ff ff20 	bl	8001dc0 <findslot>
 8001f80:	1e04      	subs	r4, r0, #0
 8001f82:	d106      	bne.n	8001f92 <_close+0x1a>
 8001f84:	f7ff f9da 	bl	800133c <__errno>
 8001f88:	2309      	movs	r3, #9
 8001f8a:	6003      	str	r3, [r0, #0]
 8001f8c:	2001      	movs	r0, #1
 8001f8e:	4240      	negs	r0, r0
 8001f90:	bd70      	pop	{r4, r5, r6, pc}
 8001f92:	3d01      	subs	r5, #1
 8001f94:	2d01      	cmp	r5, #1
 8001f96:	d809      	bhi.n	8001fac <_close+0x34>
 8001f98:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <_close+0x48>)
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d104      	bne.n	8001fac <_close+0x34>
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	425b      	negs	r3, r3
 8001fa6:	6003      	str	r3, [r0, #0]
 8001fa8:	2000      	movs	r0, #0
 8001faa:	e7f1      	b.n	8001f90 <_close+0x18>
 8001fac:	6820      	ldr	r0, [r4, #0]
 8001fae:	f7ff ffd7 	bl	8001f60 <_swiclose>
 8001fb2:	2800      	cmp	r0, #0
 8001fb4:	d1ec      	bne.n	8001f90 <_close+0x18>
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	425b      	negs	r3, r3
 8001fba:	6023      	str	r3, [r4, #0]
 8001fbc:	e7e8      	b.n	8001f90 <_close+0x18>
 8001fbe:	46c0      	nop			; (mov r8, r8)
 8001fc0:	200000ac 	.word	0x200000ac

08001fc4 <_swistat>:
 8001fc4:	b570      	push	{r4, r5, r6, lr}
 8001fc6:	000c      	movs	r4, r1
 8001fc8:	f7ff fefa 	bl	8001dc0 <findslot>
 8001fcc:	1e05      	subs	r5, r0, #0
 8001fce:	d106      	bne.n	8001fde <_swistat+0x1a>
 8001fd0:	f7ff f9b4 	bl	800133c <__errno>
 8001fd4:	2309      	movs	r3, #9
 8001fd6:	6003      	str	r3, [r0, #0]
 8001fd8:	2001      	movs	r0, #1
 8001fda:	4240      	negs	r0, r0
 8001fdc:	bd70      	pop	{r4, r5, r6, pc}
 8001fde:	2380      	movs	r3, #128	; 0x80
 8001fe0:	6862      	ldr	r2, [r4, #4]
 8001fe2:	019b      	lsls	r3, r3, #6
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	6063      	str	r3, [r4, #4]
 8001fe8:	2380      	movs	r3, #128	; 0x80
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	260c      	movs	r6, #12
 8001fee:	64a3      	str	r3, [r4, #72]	; 0x48
 8001ff0:	1c30      	adds	r0, r6, #0
 8001ff2:	1c29      	adds	r1, r5, #0
 8001ff4:	beab      	bkpt	0x00ab
 8001ff6:	1c05      	adds	r5, r0, #0
 8001ff8:	0028      	movs	r0, r5
 8001ffa:	f7ff fefb 	bl	8001df4 <checkerror>
 8001ffe:	1c43      	adds	r3, r0, #1
 8002000:	d0ec      	beq.n	8001fdc <_swistat+0x18>
 8002002:	6120      	str	r0, [r4, #16]
 8002004:	2000      	movs	r0, #0
 8002006:	e7e9      	b.n	8001fdc <_swistat+0x18>

08002008 <_fstat>:
 8002008:	b570      	push	{r4, r5, r6, lr}
 800200a:	000c      	movs	r4, r1
 800200c:	0005      	movs	r5, r0
 800200e:	2258      	movs	r2, #88	; 0x58
 8002010:	2100      	movs	r1, #0
 8002012:	0020      	movs	r0, r4
 8002014:	f7ff f9bc 	bl	8001390 <memset>
 8002018:	0028      	movs	r0, r5
 800201a:	0021      	movs	r1, r4
 800201c:	f7ff ffd2 	bl	8001fc4 <_swistat>
 8002020:	bd70      	pop	{r4, r5, r6, pc}

08002022 <_stat>:
 8002022:	b570      	push	{r4, r5, r6, lr}
 8002024:	000d      	movs	r5, r1
 8002026:	0004      	movs	r4, r0
 8002028:	2258      	movs	r2, #88	; 0x58
 800202a:	2100      	movs	r1, #0
 800202c:	0028      	movs	r0, r5
 800202e:	f7ff f9af 	bl	8001390 <memset>
 8002032:	0020      	movs	r0, r4
 8002034:	2100      	movs	r1, #0
 8002036:	f000 f813 	bl	8002060 <_swiopen>
 800203a:	0004      	movs	r4, r0
 800203c:	1c43      	adds	r3, r0, #1
 800203e:	d00c      	beq.n	800205a <_stat+0x38>
 8002040:	2381      	movs	r3, #129	; 0x81
 8002042:	686a      	ldr	r2, [r5, #4]
 8002044:	021b      	lsls	r3, r3, #8
 8002046:	4313      	orrs	r3, r2
 8002048:	0029      	movs	r1, r5
 800204a:	606b      	str	r3, [r5, #4]
 800204c:	f7ff ffba 	bl	8001fc4 <_swistat>
 8002050:	0005      	movs	r5, r0
 8002052:	0020      	movs	r0, r4
 8002054:	f7ff ff90 	bl	8001f78 <_close>
 8002058:	002c      	movs	r4, r5
 800205a:	0020      	movs	r0, r4
 800205c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002060 <_swiopen>:
 8002060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002062:	000d      	movs	r5, r1
 8002064:	2600      	movs	r6, #0
 8002066:	b099      	sub	sp, #100	; 0x64
 8002068:	9000      	str	r0, [sp, #0]
 800206a:	00f3      	lsls	r3, r6, #3
 800206c:	9301      	str	r3, [sp, #4]
 800206e:	4b29      	ldr	r3, [pc, #164]	; (8002114 <_swiopen+0xb4>)
 8002070:	00f2      	lsls	r2, r6, #3
 8002072:	589c      	ldr	r4, [r3, r2]
 8002074:	1c63      	adds	r3, r4, #1
 8002076:	d038      	beq.n	80020ea <_swiopen+0x8a>
 8002078:	3601      	adds	r6, #1
 800207a:	2e14      	cmp	r6, #20
 800207c:	d1f5      	bne.n	800206a <_swiopen+0xa>
 800207e:	f7ff f95d 	bl	800133c <__errno>
 8002082:	2401      	movs	r4, #1
 8002084:	2318      	movs	r3, #24
 8002086:	4264      	negs	r4, r4
 8002088:	6003      	str	r3, [r0, #0]
 800208a:	e03f      	b.n	800210c <_swiopen+0xac>
 800208c:	2302      	movs	r3, #2
 800208e:	03ec      	lsls	r4, r5, #15
 8002090:	0fe4      	lsrs	r4, r4, #31
 8002092:	421d      	tst	r5, r3
 8002094:	d000      	beq.n	8002098 <_swiopen+0x38>
 8002096:	431c      	orrs	r4, r3
 8002098:	4b1f      	ldr	r3, [pc, #124]	; (8002118 <_swiopen+0xb8>)
 800209a:	421d      	tst	r5, r3
 800209c:	d001      	beq.n	80020a2 <_swiopen+0x42>
 800209e:	2304      	movs	r3, #4
 80020a0:	431c      	orrs	r4, r3
 80020a2:	2308      	movs	r3, #8
 80020a4:	421d      	tst	r5, r3
 80020a6:	d002      	beq.n	80020ae <_swiopen+0x4e>
 80020a8:	2204      	movs	r2, #4
 80020aa:	4394      	bics	r4, r2
 80020ac:	431c      	orrs	r4, r3
 80020ae:	9b00      	ldr	r3, [sp, #0]
 80020b0:	0018      	movs	r0, r3
 80020b2:	9302      	str	r3, [sp, #8]
 80020b4:	f7fe f828 	bl	8000108 <strlen>
 80020b8:	607c      	str	r4, [r7, #4]
 80020ba:	60b8      	str	r0, [r7, #8]
 80020bc:	2401      	movs	r4, #1
 80020be:	1c20      	adds	r0, r4, #0
 80020c0:	1c39      	adds	r1, r7, #0
 80020c2:	beab      	bkpt	0x00ab
 80020c4:	1c07      	adds	r7, r0, #0
 80020c6:	2f00      	cmp	r7, #0
 80020c8:	db0a      	blt.n	80020e0 <_swiopen+0x80>
 80020ca:	4b12      	ldr	r3, [pc, #72]	; (8002114 <_swiopen+0xb4>)
 80020cc:	00f2      	lsls	r2, r6, #3
 80020ce:	509f      	str	r7, [r3, r2]
 80020d0:	0013      	movs	r3, r2
 80020d2:	4a10      	ldr	r2, [pc, #64]	; (8002114 <_swiopen+0xb4>)
 80020d4:	0034      	movs	r4, r6
 80020d6:	4694      	mov	ip, r2
 80020d8:	2200      	movs	r2, #0
 80020da:	4463      	add	r3, ip
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	e015      	b.n	800210c <_swiopen+0xac>
 80020e0:	0038      	movs	r0, r7
 80020e2:	f7ff fe97 	bl	8001e14 <error>
 80020e6:	0004      	movs	r4, r0
 80020e8:	e010      	b.n	800210c <_swiopen+0xac>
 80020ea:	23a0      	movs	r3, #160	; 0xa0
 80020ec:	002a      	movs	r2, r5
 80020ee:	011b      	lsls	r3, r3, #4
 80020f0:	401a      	ands	r2, r3
 80020f2:	af02      	add	r7, sp, #8
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d1c9      	bne.n	800208c <_swiopen+0x2c>
 80020f8:	0039      	movs	r1, r7
 80020fa:	9800      	ldr	r0, [sp, #0]
 80020fc:	f7ff ff91 	bl	8002022 <_stat>
 8002100:	1c43      	adds	r3, r0, #1
 8002102:	d0c3      	beq.n	800208c <_swiopen+0x2c>
 8002104:	f7ff f91a 	bl	800133c <__errno>
 8002108:	2311      	movs	r3, #17
 800210a:	6003      	str	r3, [r0, #0]
 800210c:	0020      	movs	r0, r4
 800210e:	b019      	add	sp, #100	; 0x64
 8002110:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	200000ac 	.word	0x200000ac
 8002118:	00000601 	.word	0x00000601

0800211c <_get_semihosting_exts>:
 800211c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800211e:	b085      	sub	sp, #20
 8002120:	9000      	str	r0, [sp, #0]
 8002122:	9101      	str	r1, [sp, #4]
 8002124:	4827      	ldr	r0, [pc, #156]	; (80021c4 <_get_semihosting_exts+0xa8>)
 8002126:	2100      	movs	r1, #0
 8002128:	0015      	movs	r5, r2
 800212a:	f7ff ff99 	bl	8002060 <_swiopen>
 800212e:	0004      	movs	r4, r0
 8002130:	002a      	movs	r2, r5
 8002132:	2100      	movs	r1, #0
 8002134:	9800      	ldr	r0, [sp, #0]
 8002136:	f7ff f92b 	bl	8001390 <memset>
 800213a:	1c63      	adds	r3, r4, #1
 800213c:	d015      	beq.n	800216a <_get_semihosting_exts+0x4e>
 800213e:	0020      	movs	r0, r4
 8002140:	f7ff fe3e 	bl	8001dc0 <findslot>
 8002144:	260c      	movs	r6, #12
 8002146:	0007      	movs	r7, r0
 8002148:	1c30      	adds	r0, r6, #0
 800214a:	1c39      	adds	r1, r7, #0
 800214c:	beab      	bkpt	0x00ab
 800214e:	1c06      	adds	r6, r0, #0
 8002150:	0030      	movs	r0, r6
 8002152:	f7ff fe4f 	bl	8001df4 <checkerror>
 8002156:	2803      	cmp	r0, #3
 8002158:	dd02      	ble.n	8002160 <_get_semihosting_exts+0x44>
 800215a:	3803      	subs	r0, #3
 800215c:	42a8      	cmp	r0, r5
 800215e:	dc07      	bgt.n	8002170 <_get_semihosting_exts+0x54>
 8002160:	0020      	movs	r0, r4
 8002162:	2401      	movs	r4, #1
 8002164:	f7ff ff08 	bl	8001f78 <_close>
 8002168:	4264      	negs	r4, r4
 800216a:	0020      	movs	r0, r4
 800216c:	b005      	add	sp, #20
 800216e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002170:	ae03      	add	r6, sp, #12
 8002172:	2204      	movs	r2, #4
 8002174:	0031      	movs	r1, r6
 8002176:	0020      	movs	r0, r4
 8002178:	f7ff fe6a 	bl	8001e50 <_read>
 800217c:	2803      	cmp	r0, #3
 800217e:	ddef      	ble.n	8002160 <_get_semihosting_exts+0x44>
 8002180:	7833      	ldrb	r3, [r6, #0]
 8002182:	2b53      	cmp	r3, #83	; 0x53
 8002184:	d1ec      	bne.n	8002160 <_get_semihosting_exts+0x44>
 8002186:	7873      	ldrb	r3, [r6, #1]
 8002188:	2b48      	cmp	r3, #72	; 0x48
 800218a:	d1e9      	bne.n	8002160 <_get_semihosting_exts+0x44>
 800218c:	78b3      	ldrb	r3, [r6, #2]
 800218e:	2b46      	cmp	r3, #70	; 0x46
 8002190:	d1e6      	bne.n	8002160 <_get_semihosting_exts+0x44>
 8002192:	78f3      	ldrb	r3, [r6, #3]
 8002194:	2b42      	cmp	r3, #66	; 0x42
 8002196:	d1e3      	bne.n	8002160 <_get_semihosting_exts+0x44>
 8002198:	2201      	movs	r2, #1
 800219a:	0020      	movs	r0, r4
 800219c:	9901      	ldr	r1, [sp, #4]
 800219e:	f7ff fe71 	bl	8001e84 <_swilseek>
 80021a2:	2800      	cmp	r0, #0
 80021a4:	dbdc      	blt.n	8002160 <_get_semihosting_exts+0x44>
 80021a6:	002a      	movs	r2, r5
 80021a8:	9900      	ldr	r1, [sp, #0]
 80021aa:	0020      	movs	r0, r4
 80021ac:	f7ff fe50 	bl	8001e50 <_read>
 80021b0:	0005      	movs	r5, r0
 80021b2:	0020      	movs	r0, r4
 80021b4:	f7ff fee0 	bl	8001f78 <_close>
 80021b8:	0028      	movs	r0, r5
 80021ba:	f7ff fe1b 	bl	8001df4 <checkerror>
 80021be:	0004      	movs	r4, r0
 80021c0:	e7d3      	b.n	800216a <_get_semihosting_exts+0x4e>
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	080023b8 	.word	0x080023b8

080021c8 <initialise_semihosting_exts>:
 80021c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80021ca:	2401      	movs	r4, #1
 80021cc:	2100      	movs	r1, #0
 80021ce:	4e09      	ldr	r6, [pc, #36]	; (80021f4 <initialise_semihosting_exts+0x2c>)
 80021d0:	4d09      	ldr	r5, [pc, #36]	; (80021f8 <initialise_semihosting_exts+0x30>)
 80021d2:	af01      	add	r7, sp, #4
 80021d4:	0022      	movs	r2, r4
 80021d6:	0038      	movs	r0, r7
 80021d8:	6031      	str	r1, [r6, #0]
 80021da:	602c      	str	r4, [r5, #0]
 80021dc:	f7ff ff9e 	bl	800211c <_get_semihosting_exts>
 80021e0:	2800      	cmp	r0, #0
 80021e2:	dd05      	ble.n	80021f0 <initialise_semihosting_exts+0x28>
 80021e4:	2202      	movs	r2, #2
 80021e6:	783b      	ldrb	r3, [r7, #0]
 80021e8:	401c      	ands	r4, r3
 80021ea:	4013      	ands	r3, r2
 80021ec:	6034      	str	r4, [r6, #0]
 80021ee:	602b      	str	r3, [r5, #0]
 80021f0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80021f2:	46c0      	nop			; (mov r8, r8)
 80021f4:	20000070 	.word	0x20000070
 80021f8:	20000074 	.word	0x20000074

080021fc <_has_ext_stdout_stderr>:
 80021fc:	b510      	push	{r4, lr}
 80021fe:	4c04      	ldr	r4, [pc, #16]	; (8002210 <_has_ext_stdout_stderr+0x14>)
 8002200:	6823      	ldr	r3, [r4, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	da01      	bge.n	800220a <_has_ext_stdout_stderr+0xe>
 8002206:	f7ff ffdf 	bl	80021c8 <initialise_semihosting_exts>
 800220a:	6820      	ldr	r0, [r4, #0]
 800220c:	bd10      	pop	{r4, pc}
 800220e:	46c0      	nop			; (mov r8, r8)
 8002210:	20000074 	.word	0x20000074

08002214 <initialise_monitor_handles>:
 8002214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002216:	4b27      	ldr	r3, [pc, #156]	; (80022b4 <initialise_monitor_handles+0xa0>)
 8002218:	b085      	sub	sp, #20
 800221a:	9301      	str	r3, [sp, #4]
 800221c:	2500      	movs	r5, #0
 800221e:	2303      	movs	r3, #3
 8002220:	ac01      	add	r4, sp, #4
 8002222:	60a3      	str	r3, [r4, #8]
 8002224:	2701      	movs	r7, #1
 8002226:	6065      	str	r5, [r4, #4]
 8002228:	1c38      	adds	r0, r7, #0
 800222a:	1c21      	adds	r1, r4, #0
 800222c:	beab      	bkpt	0x00ab
 800222e:	1c07      	adds	r7, r0, #0
 8002230:	2101      	movs	r1, #1
 8002232:	4b21      	ldr	r3, [pc, #132]	; (80022b8 <initialise_monitor_handles+0xa4>)
 8002234:	4249      	negs	r1, r1
 8002236:	601f      	str	r7, [r3, #0]
 8002238:	002b      	movs	r3, r5
 800223a:	4d20      	ldr	r5, [pc, #128]	; (80022bc <initialise_monitor_handles+0xa8>)
 800223c:	00da      	lsls	r2, r3, #3
 800223e:	3301      	adds	r3, #1
 8002240:	50a9      	str	r1, [r5, r2]
 8002242:	2b14      	cmp	r3, #20
 8002244:	d1fa      	bne.n	800223c <initialise_monitor_handles+0x28>
 8002246:	f7ff ffd9 	bl	80021fc <_has_ext_stdout_stderr>
 800224a:	2800      	cmp	r0, #0
 800224c:	d018      	beq.n	8002280 <initialise_monitor_handles+0x6c>
 800224e:	4b19      	ldr	r3, [pc, #100]	; (80022b4 <initialise_monitor_handles+0xa0>)
 8002250:	2701      	movs	r7, #1
 8002252:	9301      	str	r3, [sp, #4]
 8002254:	2303      	movs	r3, #3
 8002256:	60a3      	str	r3, [r4, #8]
 8002258:	3301      	adds	r3, #1
 800225a:	6063      	str	r3, [r4, #4]
 800225c:	1c38      	adds	r0, r7, #0
 800225e:	1c21      	adds	r1, r4, #0
 8002260:	beab      	bkpt	0x00ab
 8002262:	1c06      	adds	r6, r0, #0
 8002264:	4b16      	ldr	r3, [pc, #88]	; (80022c0 <initialise_monitor_handles+0xac>)
 8002266:	4a13      	ldr	r2, [pc, #76]	; (80022b4 <initialise_monitor_handles+0xa0>)
 8002268:	601e      	str	r6, [r3, #0]
 800226a:	2303      	movs	r3, #3
 800226c:	9201      	str	r2, [sp, #4]
 800226e:	60a3      	str	r3, [r4, #8]
 8002270:	3305      	adds	r3, #5
 8002272:	6063      	str	r3, [r4, #4]
 8002274:	1c38      	adds	r0, r7, #0
 8002276:	1c21      	adds	r1, r4, #0
 8002278:	beab      	bkpt	0x00ab
 800227a:	1c04      	adds	r4, r0, #0
 800227c:	4b11      	ldr	r3, [pc, #68]	; (80022c4 <initialise_monitor_handles+0xb0>)
 800227e:	601c      	str	r4, [r3, #0]
 8002280:	4f10      	ldr	r7, [pc, #64]	; (80022c4 <initialise_monitor_handles+0xb0>)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	3301      	adds	r3, #1
 8002286:	d102      	bne.n	800228e <initialise_monitor_handles+0x7a>
 8002288:	4b0d      	ldr	r3, [pc, #52]	; (80022c0 <initialise_monitor_handles+0xac>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	603b      	str	r3, [r7, #0]
 800228e:	2400      	movs	r4, #0
 8002290:	4b09      	ldr	r3, [pc, #36]	; (80022b8 <initialise_monitor_handles+0xa4>)
 8002292:	606c      	str	r4, [r5, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	602b      	str	r3, [r5, #0]
 8002298:	f7ff ffb0 	bl	80021fc <_has_ext_stdout_stderr>
 800229c:	42a0      	cmp	r0, r4
 800229e:	d006      	beq.n	80022ae <initialise_monitor_handles+0x9a>
 80022a0:	4b07      	ldr	r3, [pc, #28]	; (80022c0 <initialise_monitor_handles+0xac>)
 80022a2:	60ec      	str	r4, [r5, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	616c      	str	r4, [r5, #20]
 80022a8:	60ab      	str	r3, [r5, #8]
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	612b      	str	r3, [r5, #16]
 80022ae:	b005      	add	sp, #20
 80022b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	080023ce 	.word	0x080023ce
 80022b8:	200000a4 	.word	0x200000a4
 80022bc:	200000ac 	.word	0x200000ac
 80022c0:	200000a8 	.word	0x200000a8
 80022c4:	200000a0 	.word	0x200000a0

080022c8 <_isatty>:
 80022c8:	b570      	push	{r4, r5, r6, lr}
 80022ca:	f7ff fd79 	bl	8001dc0 <findslot>
 80022ce:	2509      	movs	r5, #9
 80022d0:	1e04      	subs	r4, r0, #0
 80022d2:	d104      	bne.n	80022de <_isatty+0x16>
 80022d4:	f7ff f832 	bl	800133c <__errno>
 80022d8:	6005      	str	r5, [r0, #0]
 80022da:	0020      	movs	r0, r4
 80022dc:	bd70      	pop	{r4, r5, r6, pc}
 80022de:	1c28      	adds	r0, r5, #0
 80022e0:	1c21      	adds	r1, r4, #0
 80022e2:	beab      	bkpt	0x00ab
 80022e4:	1c04      	adds	r4, r0, #0
 80022e6:	0020      	movs	r0, r4
 80022e8:	2c01      	cmp	r4, #1
 80022ea:	d0f7      	beq.n	80022dc <_isatty+0x14>
 80022ec:	f7ff f826 	bl	800133c <__errno>
 80022f0:	2400      	movs	r4, #0
 80022f2:	0005      	movs	r5, r0
 80022f4:	2613      	movs	r6, #19
 80022f6:	1c30      	adds	r0, r6, #0
 80022f8:	1c21      	adds	r1, r4, #0
 80022fa:	beab      	bkpt	0x00ab
 80022fc:	1c06      	adds	r6, r0, #0
 80022fe:	602e      	str	r6, [r5, #0]
 8002300:	e7eb      	b.n	80022da <_isatty+0x12>
	...

08002304 <_init>:
 8002304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002306:	46c0      	nop			; (mov r8, r8)
 8002308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800230a:	bc08      	pop	{r3}
 800230c:	469e      	mov	lr, r3
 800230e:	4770      	bx	lr

08002310 <_fini>:
 8002310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002316:	bc08      	pop	{r3}
 8002318:	469e      	mov	lr, r3
 800231a:	4770      	bx	lr
