
Semihosting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028b0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08002970  08002970  00012970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a74  08002a74  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08002a74  08002a74  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a74  08002a74  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a74  08002a74  00012a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a78  08002a78  00012a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08002a7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000078  08002af4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08002af4  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003f5d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001163  00000000  00000000  00023ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000388  00000000  00000000  00025160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002e0  00000000  00000000  000254e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000111bc  00000000  00000000  000257c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005540  00000000  00000000  00036984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000640e5  00000000  00000000  0003bec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0009ffa9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015c8  00000000  00000000  0009fffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002958 	.word	0x08002958

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08002958 	.word	0x08002958

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b089      	sub	sp, #36	; 0x24
 8000248:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800024a:	240c      	movs	r4, #12
 800024c:	193b      	adds	r3, r7, r4
 800024e:	0018      	movs	r0, r3
 8000250:	2314      	movs	r3, #20
 8000252:	001a      	movs	r2, r3
 8000254:	2100      	movs	r1, #0
 8000256:	f001 f8bb 	bl	80013d0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800025a:	4b2c      	ldr	r3, [pc, #176]	; (800030c <MX_GPIO_Init+0xc8>)
 800025c:	695a      	ldr	r2, [r3, #20]
 800025e:	4b2b      	ldr	r3, [pc, #172]	; (800030c <MX_GPIO_Init+0xc8>)
 8000260:	2180      	movs	r1, #128	; 0x80
 8000262:	03c9      	lsls	r1, r1, #15
 8000264:	430a      	orrs	r2, r1
 8000266:	615a      	str	r2, [r3, #20]
 8000268:	4b28      	ldr	r3, [pc, #160]	; (800030c <MX_GPIO_Init+0xc8>)
 800026a:	695a      	ldr	r2, [r3, #20]
 800026c:	2380      	movs	r3, #128	; 0x80
 800026e:	03db      	lsls	r3, r3, #15
 8000270:	4013      	ands	r3, r2
 8000272:	60bb      	str	r3, [r7, #8]
 8000274:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000276:	4b25      	ldr	r3, [pc, #148]	; (800030c <MX_GPIO_Init+0xc8>)
 8000278:	695a      	ldr	r2, [r3, #20]
 800027a:	4b24      	ldr	r3, [pc, #144]	; (800030c <MX_GPIO_Init+0xc8>)
 800027c:	2180      	movs	r1, #128	; 0x80
 800027e:	0289      	lsls	r1, r1, #10
 8000280:	430a      	orrs	r2, r1
 8000282:	615a      	str	r2, [r3, #20]
 8000284:	4b21      	ldr	r3, [pc, #132]	; (800030c <MX_GPIO_Init+0xc8>)
 8000286:	695a      	ldr	r2, [r3, #20]
 8000288:	2380      	movs	r3, #128	; 0x80
 800028a:	029b      	lsls	r3, r3, #10
 800028c:	4013      	ands	r3, r2
 800028e:	607b      	str	r3, [r7, #4]
 8000290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000292:	4b1e      	ldr	r3, [pc, #120]	; (800030c <MX_GPIO_Init+0xc8>)
 8000294:	695a      	ldr	r2, [r3, #20]
 8000296:	4b1d      	ldr	r3, [pc, #116]	; (800030c <MX_GPIO_Init+0xc8>)
 8000298:	2180      	movs	r1, #128	; 0x80
 800029a:	0309      	lsls	r1, r1, #12
 800029c:	430a      	orrs	r2, r1
 800029e:	615a      	str	r2, [r3, #20]
 80002a0:	4b1a      	ldr	r3, [pc, #104]	; (800030c <MX_GPIO_Init+0xc8>)
 80002a2:	695a      	ldr	r2, [r3, #20]
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	031b      	lsls	r3, r3, #12
 80002a8:	4013      	ands	r3, r2
 80002aa:	603b      	str	r3, [r7, #0]
 80002ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80002ae:	23c0      	movs	r3, #192	; 0xc0
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	4817      	ldr	r0, [pc, #92]	; (8000310 <MX_GPIO_Init+0xcc>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	0019      	movs	r1, r3
 80002b8:	f000 fbf6 	bl	8000aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002bc:	193b      	adds	r3, r7, r4
 80002be:	2201      	movs	r2, #1
 80002c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80002c2:	193b      	adds	r3, r7, r4
 80002c4:	4a13      	ldr	r2, [pc, #76]	; (8000314 <MX_GPIO_Init+0xd0>)
 80002c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c8:	193b      	adds	r3, r7, r4
 80002ca:	2200      	movs	r2, #0
 80002cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002ce:	193a      	adds	r2, r7, r4
 80002d0:	2390      	movs	r3, #144	; 0x90
 80002d2:	05db      	lsls	r3, r3, #23
 80002d4:	0011      	movs	r1, r2
 80002d6:	0018      	movs	r0, r3
 80002d8:	f000 fa76 	bl	80007c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 80002dc:	0021      	movs	r1, r4
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	22c0      	movs	r2, #192	; 0xc0
 80002e2:	0092      	lsls	r2, r2, #2
 80002e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	2201      	movs	r2, #1
 80002ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ec:	187b      	adds	r3, r7, r1
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	2200      	movs	r2, #0
 80002f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002f8:	187b      	adds	r3, r7, r1
 80002fa:	4a05      	ldr	r2, [pc, #20]	; (8000310 <MX_GPIO_Init+0xcc>)
 80002fc:	0019      	movs	r1, r3
 80002fe:	0010      	movs	r0, r2
 8000300:	f000 fa62 	bl	80007c8 <HAL_GPIO_Init>

}
 8000304:	46c0      	nop			; (mov r8, r8)
 8000306:	46bd      	mov	sp, r7
 8000308:	b009      	add	sp, #36	; 0x24
 800030a:	bd90      	pop	{r4, r7, pc}
 800030c:	40021000 	.word	0x40021000
 8000310:	48000800 	.word	0x48000800
 8000314:	10120000 	.word	0x10120000

08000318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800031c:	f000 f918 	bl	8000550 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000320:	f000 f826 	bl	8000370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000324:	f7ff ff8e 	bl	8000244 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  initialise_monitor_handles();
 8000328:	f002 fa9e 	bl	8002868 <initialise_monitor_handles>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("number : %ld \n",myNum++);
 800032c:	4b0d      	ldr	r3, [pc, #52]	; (8000364 <main+0x4c>)
 800032e:	681a      	ldr	r2, [r3, #0]
 8000330:	1c51      	adds	r1, r2, #1
 8000332:	4b0c      	ldr	r3, [pc, #48]	; (8000364 <main+0x4c>)
 8000334:	6019      	str	r1, [r3, #0]
 8000336:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <main+0x50>)
 8000338:	0011      	movs	r1, r2
 800033a:	0018      	movs	r0, r3
 800033c:	f001 f850 	bl	80013e0 <iprintf>
	  HAL_Delay(500);
 8000340:	23fa      	movs	r3, #250	; 0xfa
 8000342:	005b      	lsls	r3, r3, #1
 8000344:	0018      	movs	r0, r3
 8000346:	f000 f967 	bl	8000618 <HAL_Delay>

	  //test condition
	  if(myNum > 10){
 800034a:	4b06      	ldr	r3, [pc, #24]	; (8000364 <main+0x4c>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	2b0a      	cmp	r3, #10
 8000350:	d9ec      	bls.n	800032c <main+0x14>
		  printf("end of test \n");
 8000352:	4b06      	ldr	r3, [pc, #24]	; (800036c <main+0x54>)
 8000354:	0018      	movs	r0, r3
 8000356:	f001 f8cf 	bl	80014f8 <puts>
		  break;
 800035a:	46c0      	nop			; (mov r8, r8)
 800035c:	2300      	movs	r3, #0


    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800035e:	0018      	movs	r0, r3
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	20000094 	.word	0x20000094
 8000368:	08002970 	.word	0x08002970
 800036c:	08002980 	.word	0x08002980

08000370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000370:	b590      	push	{r4, r7, lr}
 8000372:	b091      	sub	sp, #68	; 0x44
 8000374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000376:	2410      	movs	r4, #16
 8000378:	193b      	adds	r3, r7, r4
 800037a:	0018      	movs	r0, r3
 800037c:	2330      	movs	r3, #48	; 0x30
 800037e:	001a      	movs	r2, r3
 8000380:	2100      	movs	r1, #0
 8000382:	f001 f825 	bl	80013d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000386:	003b      	movs	r3, r7
 8000388:	0018      	movs	r0, r3
 800038a:	2310      	movs	r3, #16
 800038c:	001a      	movs	r2, r3
 800038e:	2100      	movs	r1, #0
 8000390:	f001 f81e 	bl	80013d0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000394:	0021      	movs	r1, r4
 8000396:	187b      	adds	r3, r7, r1
 8000398:	2201      	movs	r2, #1
 800039a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800039c:	187b      	adds	r3, r7, r1
 800039e:	2205      	movs	r2, #5
 80003a0:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a2:	187b      	adds	r3, r7, r1
 80003a4:	2202      	movs	r2, #2
 80003a6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003a8:	187b      	adds	r3, r7, r1
 80003aa:	2280      	movs	r2, #128	; 0x80
 80003ac:	0252      	lsls	r2, r2, #9
 80003ae:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80003b0:	187b      	adds	r3, r7, r1
 80003b2:	2280      	movs	r2, #128	; 0x80
 80003b4:	0352      	lsls	r2, r2, #13
 80003b6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003b8:	187b      	adds	r3, r7, r1
 80003ba:	2200      	movs	r2, #0
 80003bc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003be:	187b      	adds	r3, r7, r1
 80003c0:	0018      	movs	r0, r3
 80003c2:	f000 fb8f 	bl	8000ae4 <HAL_RCC_OscConfig>
 80003c6:	1e03      	subs	r3, r0, #0
 80003c8:	d001      	beq.n	80003ce <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80003ca:	f000 f819 	bl	8000400 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ce:	003b      	movs	r3, r7
 80003d0:	2207      	movs	r2, #7
 80003d2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003d4:	003b      	movs	r3, r7
 80003d6:	2202      	movs	r2, #2
 80003d8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003da:	003b      	movs	r3, r7
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003e0:	003b      	movs	r3, r7
 80003e2:	2200      	movs	r2, #0
 80003e4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003e6:	003b      	movs	r3, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	0018      	movs	r0, r3
 80003ec:	f000 fe94 	bl	8001118 <HAL_RCC_ClockConfig>
 80003f0:	1e03      	subs	r3, r0, #0
 80003f2:	d001      	beq.n	80003f8 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80003f4:	f000 f804 	bl	8000400 <Error_Handler>
  }
}
 80003f8:	46c0      	nop			; (mov r8, r8)
 80003fa:	46bd      	mov	sp, r7
 80003fc:	b011      	add	sp, #68	; 0x44
 80003fe:	bd90      	pop	{r4, r7, pc}

08000400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000404:	b672      	cpsid	i
}
 8000406:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000408:	e7fe      	b.n	8000408 <Error_Handler+0x8>
	...

0800040c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000412:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <HAL_MspInit+0x44>)
 8000414:	699a      	ldr	r2, [r3, #24]
 8000416:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <HAL_MspInit+0x44>)
 8000418:	2101      	movs	r1, #1
 800041a:	430a      	orrs	r2, r1
 800041c:	619a      	str	r2, [r3, #24]
 800041e:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <HAL_MspInit+0x44>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	2201      	movs	r2, #1
 8000424:	4013      	ands	r3, r2
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800042a:	4b09      	ldr	r3, [pc, #36]	; (8000450 <HAL_MspInit+0x44>)
 800042c:	69da      	ldr	r2, [r3, #28]
 800042e:	4b08      	ldr	r3, [pc, #32]	; (8000450 <HAL_MspInit+0x44>)
 8000430:	2180      	movs	r1, #128	; 0x80
 8000432:	0549      	lsls	r1, r1, #21
 8000434:	430a      	orrs	r2, r1
 8000436:	61da      	str	r2, [r3, #28]
 8000438:	4b05      	ldr	r3, [pc, #20]	; (8000450 <HAL_MspInit+0x44>)
 800043a:	69da      	ldr	r2, [r3, #28]
 800043c:	2380      	movs	r3, #128	; 0x80
 800043e:	055b      	lsls	r3, r3, #21
 8000440:	4013      	ands	r3, r2
 8000442:	603b      	str	r3, [r7, #0]
 8000444:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	46bd      	mov	sp, r7
 800044a:	b002      	add	sp, #8
 800044c:	bd80      	pop	{r7, pc}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	40021000 	.word	0x40021000

08000454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000458:	e7fe      	b.n	8000458 <NMI_Handler+0x4>

0800045a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800045a:	b580      	push	{r7, lr}
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800045e:	e7fe      	b.n	800045e <HardFault_Handler+0x4>

08000460 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000464:	46c0      	nop			; (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}

0800046a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800046a:	b580      	push	{r7, lr}
 800046c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}

08000474 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000478:	f000 f8b2 	bl	80005e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800047c:	46c0      	nop			; (mov r8, r8)
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
	...

08000484 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b086      	sub	sp, #24
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800048c:	4a14      	ldr	r2, [pc, #80]	; (80004e0 <_sbrk+0x5c>)
 800048e:	4b15      	ldr	r3, [pc, #84]	; (80004e4 <_sbrk+0x60>)
 8000490:	1ad3      	subs	r3, r2, r3
 8000492:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000498:	4b13      	ldr	r3, [pc, #76]	; (80004e8 <_sbrk+0x64>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d102      	bne.n	80004a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004a0:	4b11      	ldr	r3, [pc, #68]	; (80004e8 <_sbrk+0x64>)
 80004a2:	4a12      	ldr	r2, [pc, #72]	; (80004ec <_sbrk+0x68>)
 80004a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004a6:	4b10      	ldr	r3, [pc, #64]	; (80004e8 <_sbrk+0x64>)
 80004a8:	681a      	ldr	r2, [r3, #0]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	18d3      	adds	r3, r2, r3
 80004ae:	693a      	ldr	r2, [r7, #16]
 80004b0:	429a      	cmp	r2, r3
 80004b2:	d207      	bcs.n	80004c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004b4:	f000 ff62 	bl	800137c <__errno>
 80004b8:	0003      	movs	r3, r0
 80004ba:	220c      	movs	r2, #12
 80004bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004be:	2301      	movs	r3, #1
 80004c0:	425b      	negs	r3, r3
 80004c2:	e009      	b.n	80004d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004c4:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <_sbrk+0x64>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004ca:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <_sbrk+0x64>)
 80004cc:	681a      	ldr	r2, [r3, #0]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	18d2      	adds	r2, r2, r3
 80004d2:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <_sbrk+0x64>)
 80004d4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80004d6:	68fb      	ldr	r3, [r7, #12]
}
 80004d8:	0018      	movs	r0, r3
 80004da:	46bd      	mov	sp, r7
 80004dc:	b006      	add	sp, #24
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20002000 	.word	0x20002000
 80004e4:	00000400 	.word	0x00000400
 80004e8:	20000098 	.word	0x20000098
 80004ec:	20000168 	.word	0x20000168

080004f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80004f4:	46c0      	nop			; (mov r8, r8)
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
	...

080004fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004fc:	480d      	ldr	r0, [pc, #52]	; (8000534 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000500:	480d      	ldr	r0, [pc, #52]	; (8000538 <LoopForever+0x6>)
  ldr r1, =_edata
 8000502:	490e      	ldr	r1, [pc, #56]	; (800053c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000504:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <LoopForever+0xe>)
  movs r3, #0
 8000506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000508:	e002      	b.n	8000510 <LoopCopyDataInit>

0800050a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800050a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800050c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800050e:	3304      	adds	r3, #4

08000510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000514:	d3f9      	bcc.n	800050a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000516:	4a0b      	ldr	r2, [pc, #44]	; (8000544 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000518:	4c0b      	ldr	r4, [pc, #44]	; (8000548 <LoopForever+0x16>)
  movs r3, #0
 800051a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800051c:	e001      	b.n	8000522 <LoopFillZerobss>

0800051e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800051e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000520:	3204      	adds	r2, #4

08000522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000524:	d3fb      	bcc.n	800051e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000526:	f7ff ffe3 	bl	80004f0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800052a:	f000 ff2d 	bl	8001388 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800052e:	f7ff fef3 	bl	8000318 <main>

08000532 <LoopForever>:

LoopForever:
    b LoopForever
 8000532:	e7fe      	b.n	8000532 <LoopForever>
  ldr   r0, =_estack
 8000534:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800053c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000540:	08002a7c 	.word	0x08002a7c
  ldr r2, =_sbss
 8000544:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000548:	20000164 	.word	0x20000164

0800054c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800054c:	e7fe      	b.n	800054c <ADC1_COMP_IRQHandler>
	...

08000550 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000554:	4b07      	ldr	r3, [pc, #28]	; (8000574 <HAL_Init+0x24>)
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <HAL_Init+0x24>)
 800055a:	2110      	movs	r1, #16
 800055c:	430a      	orrs	r2, r1
 800055e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000560:	2000      	movs	r0, #0
 8000562:	f000 f809 	bl	8000578 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000566:	f7ff ff51 	bl	800040c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800056a:	2300      	movs	r3, #0
}
 800056c:	0018      	movs	r0, r3
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	40022000 	.word	0x40022000

08000578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000580:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <HAL_InitTick+0x5c>)
 8000582:	681c      	ldr	r4, [r3, #0]
 8000584:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <HAL_InitTick+0x60>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	0019      	movs	r1, r3
 800058a:	23fa      	movs	r3, #250	; 0xfa
 800058c:	0098      	lsls	r0, r3, #2
 800058e:	f7ff fdcd 	bl	800012c <__udivsi3>
 8000592:	0003      	movs	r3, r0
 8000594:	0019      	movs	r1, r3
 8000596:	0020      	movs	r0, r4
 8000598:	f7ff fdc8 	bl	800012c <__udivsi3>
 800059c:	0003      	movs	r3, r0
 800059e:	0018      	movs	r0, r3
 80005a0:	f000 f905 	bl	80007ae <HAL_SYSTICK_Config>
 80005a4:	1e03      	subs	r3, r0, #0
 80005a6:	d001      	beq.n	80005ac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80005a8:	2301      	movs	r3, #1
 80005aa:	e00f      	b.n	80005cc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2b03      	cmp	r3, #3
 80005b0:	d80b      	bhi.n	80005ca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005b2:	6879      	ldr	r1, [r7, #4]
 80005b4:	2301      	movs	r3, #1
 80005b6:	425b      	negs	r3, r3
 80005b8:	2200      	movs	r2, #0
 80005ba:	0018      	movs	r0, r3
 80005bc:	f000 f8e2 	bl	8000784 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_InitTick+0x64>)
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80005c6:	2300      	movs	r3, #0
 80005c8:	e000      	b.n	80005cc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80005ca:	2301      	movs	r3, #1
}
 80005cc:	0018      	movs	r0, r3
 80005ce:	46bd      	mov	sp, r7
 80005d0:	b003      	add	sp, #12
 80005d2:	bd90      	pop	{r4, r7, pc}
 80005d4:	20000000 	.word	0x20000000
 80005d8:	20000008 	.word	0x20000008
 80005dc:	20000004 	.word	0x20000004

080005e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005e4:	4b05      	ldr	r3, [pc, #20]	; (80005fc <HAL_IncTick+0x1c>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	001a      	movs	r2, r3
 80005ea:	4b05      	ldr	r3, [pc, #20]	; (8000600 <HAL_IncTick+0x20>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	18d2      	adds	r2, r2, r3
 80005f0:	4b03      	ldr	r3, [pc, #12]	; (8000600 <HAL_IncTick+0x20>)
 80005f2:	601a      	str	r2, [r3, #0]
}
 80005f4:	46c0      	nop			; (mov r8, r8)
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	20000008 	.word	0x20000008
 8000600:	20000150 	.word	0x20000150

08000604 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  return uwTick;
 8000608:	4b02      	ldr	r3, [pc, #8]	; (8000614 <HAL_GetTick+0x10>)
 800060a:	681b      	ldr	r3, [r3, #0]
}
 800060c:	0018      	movs	r0, r3
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	20000150 	.word	0x20000150

08000618 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000620:	f7ff fff0 	bl	8000604 <HAL_GetTick>
 8000624:	0003      	movs	r3, r0
 8000626:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	3301      	adds	r3, #1
 8000630:	d005      	beq.n	800063e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000632:	4b0a      	ldr	r3, [pc, #40]	; (800065c <HAL_Delay+0x44>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	001a      	movs	r2, r3
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	189b      	adds	r3, r3, r2
 800063c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800063e:	46c0      	nop			; (mov r8, r8)
 8000640:	f7ff ffe0 	bl	8000604 <HAL_GetTick>
 8000644:	0002      	movs	r2, r0
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	1ad3      	subs	r3, r2, r3
 800064a:	68fa      	ldr	r2, [r7, #12]
 800064c:	429a      	cmp	r2, r3
 800064e:	d8f7      	bhi.n	8000640 <HAL_Delay+0x28>
  {
  }
}
 8000650:	46c0      	nop			; (mov r8, r8)
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	46bd      	mov	sp, r7
 8000656:	b004      	add	sp, #16
 8000658:	bd80      	pop	{r7, pc}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	20000008 	.word	0x20000008

08000660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000660:	b590      	push	{r4, r7, lr}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	0002      	movs	r2, r0
 8000668:	6039      	str	r1, [r7, #0]
 800066a:	1dfb      	adds	r3, r7, #7
 800066c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800066e:	1dfb      	adds	r3, r7, #7
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b7f      	cmp	r3, #127	; 0x7f
 8000674:	d828      	bhi.n	80006c8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000676:	4a2f      	ldr	r2, [pc, #188]	; (8000734 <__NVIC_SetPriority+0xd4>)
 8000678:	1dfb      	adds	r3, r7, #7
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	b25b      	sxtb	r3, r3
 800067e:	089b      	lsrs	r3, r3, #2
 8000680:	33c0      	adds	r3, #192	; 0xc0
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	589b      	ldr	r3, [r3, r2]
 8000686:	1dfa      	adds	r2, r7, #7
 8000688:	7812      	ldrb	r2, [r2, #0]
 800068a:	0011      	movs	r1, r2
 800068c:	2203      	movs	r2, #3
 800068e:	400a      	ands	r2, r1
 8000690:	00d2      	lsls	r2, r2, #3
 8000692:	21ff      	movs	r1, #255	; 0xff
 8000694:	4091      	lsls	r1, r2
 8000696:	000a      	movs	r2, r1
 8000698:	43d2      	mvns	r2, r2
 800069a:	401a      	ands	r2, r3
 800069c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	019b      	lsls	r3, r3, #6
 80006a2:	22ff      	movs	r2, #255	; 0xff
 80006a4:	401a      	ands	r2, r3
 80006a6:	1dfb      	adds	r3, r7, #7
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	0018      	movs	r0, r3
 80006ac:	2303      	movs	r3, #3
 80006ae:	4003      	ands	r3, r0
 80006b0:	00db      	lsls	r3, r3, #3
 80006b2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006b4:	481f      	ldr	r0, [pc, #124]	; (8000734 <__NVIC_SetPriority+0xd4>)
 80006b6:	1dfb      	adds	r3, r7, #7
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	b25b      	sxtb	r3, r3
 80006bc:	089b      	lsrs	r3, r3, #2
 80006be:	430a      	orrs	r2, r1
 80006c0:	33c0      	adds	r3, #192	; 0xc0
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80006c6:	e031      	b.n	800072c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006c8:	4a1b      	ldr	r2, [pc, #108]	; (8000738 <__NVIC_SetPriority+0xd8>)
 80006ca:	1dfb      	adds	r3, r7, #7
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	0019      	movs	r1, r3
 80006d0:	230f      	movs	r3, #15
 80006d2:	400b      	ands	r3, r1
 80006d4:	3b08      	subs	r3, #8
 80006d6:	089b      	lsrs	r3, r3, #2
 80006d8:	3306      	adds	r3, #6
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	18d3      	adds	r3, r2, r3
 80006de:	3304      	adds	r3, #4
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	1dfa      	adds	r2, r7, #7
 80006e4:	7812      	ldrb	r2, [r2, #0]
 80006e6:	0011      	movs	r1, r2
 80006e8:	2203      	movs	r2, #3
 80006ea:	400a      	ands	r2, r1
 80006ec:	00d2      	lsls	r2, r2, #3
 80006ee:	21ff      	movs	r1, #255	; 0xff
 80006f0:	4091      	lsls	r1, r2
 80006f2:	000a      	movs	r2, r1
 80006f4:	43d2      	mvns	r2, r2
 80006f6:	401a      	ands	r2, r3
 80006f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	019b      	lsls	r3, r3, #6
 80006fe:	22ff      	movs	r2, #255	; 0xff
 8000700:	401a      	ands	r2, r3
 8000702:	1dfb      	adds	r3, r7, #7
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	0018      	movs	r0, r3
 8000708:	2303      	movs	r3, #3
 800070a:	4003      	ands	r3, r0
 800070c:	00db      	lsls	r3, r3, #3
 800070e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000710:	4809      	ldr	r0, [pc, #36]	; (8000738 <__NVIC_SetPriority+0xd8>)
 8000712:	1dfb      	adds	r3, r7, #7
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	001c      	movs	r4, r3
 8000718:	230f      	movs	r3, #15
 800071a:	4023      	ands	r3, r4
 800071c:	3b08      	subs	r3, #8
 800071e:	089b      	lsrs	r3, r3, #2
 8000720:	430a      	orrs	r2, r1
 8000722:	3306      	adds	r3, #6
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	18c3      	adds	r3, r0, r3
 8000728:	3304      	adds	r3, #4
 800072a:	601a      	str	r2, [r3, #0]
}
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	b003      	add	sp, #12
 8000732:	bd90      	pop	{r4, r7, pc}
 8000734:	e000e100 	.word	0xe000e100
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	1e5a      	subs	r2, r3, #1
 8000748:	2380      	movs	r3, #128	; 0x80
 800074a:	045b      	lsls	r3, r3, #17
 800074c:	429a      	cmp	r2, r3
 800074e:	d301      	bcc.n	8000754 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000750:	2301      	movs	r3, #1
 8000752:	e010      	b.n	8000776 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000754:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <SysTick_Config+0x44>)
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	3a01      	subs	r2, #1
 800075a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800075c:	2301      	movs	r3, #1
 800075e:	425b      	negs	r3, r3
 8000760:	2103      	movs	r1, #3
 8000762:	0018      	movs	r0, r3
 8000764:	f7ff ff7c 	bl	8000660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <SysTick_Config+0x44>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800076e:	4b04      	ldr	r3, [pc, #16]	; (8000780 <SysTick_Config+0x44>)
 8000770:	2207      	movs	r2, #7
 8000772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000774:	2300      	movs	r3, #0
}
 8000776:	0018      	movs	r0, r3
 8000778:	46bd      	mov	sp, r7
 800077a:	b002      	add	sp, #8
 800077c:	bd80      	pop	{r7, pc}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	e000e010 	.word	0xe000e010

08000784 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	60b9      	str	r1, [r7, #8]
 800078c:	607a      	str	r2, [r7, #4]
 800078e:	210f      	movs	r1, #15
 8000790:	187b      	adds	r3, r7, r1
 8000792:	1c02      	adds	r2, r0, #0
 8000794:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000796:	68ba      	ldr	r2, [r7, #8]
 8000798:	187b      	adds	r3, r7, r1
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	b25b      	sxtb	r3, r3
 800079e:	0011      	movs	r1, r2
 80007a0:	0018      	movs	r0, r3
 80007a2:	f7ff ff5d 	bl	8000660 <__NVIC_SetPriority>
}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	46bd      	mov	sp, r7
 80007aa:	b004      	add	sp, #16
 80007ac:	bd80      	pop	{r7, pc}

080007ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b082      	sub	sp, #8
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	0018      	movs	r0, r3
 80007ba:	f7ff ffbf 	bl	800073c <SysTick_Config>
 80007be:	0003      	movs	r3, r0
}
 80007c0:	0018      	movs	r0, r3
 80007c2:	46bd      	mov	sp, r7
 80007c4:	b002      	add	sp, #8
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b086      	sub	sp, #24
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007d6:	e14f      	b.n	8000a78 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2101      	movs	r1, #1
 80007de:	697a      	ldr	r2, [r7, #20]
 80007e0:	4091      	lsls	r1, r2
 80007e2:	000a      	movs	r2, r1
 80007e4:	4013      	ands	r3, r2
 80007e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d100      	bne.n	80007f0 <HAL_GPIO_Init+0x28>
 80007ee:	e140      	b.n	8000a72 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d00b      	beq.n	8000810 <HAL_GPIO_Init+0x48>
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	2b02      	cmp	r3, #2
 80007fe:	d007      	beq.n	8000810 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000804:	2b11      	cmp	r3, #17
 8000806:	d003      	beq.n	8000810 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	2b12      	cmp	r3, #18
 800080e:	d130      	bne.n	8000872 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	689b      	ldr	r3, [r3, #8]
 8000814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	2203      	movs	r2, #3
 800081c:	409a      	lsls	r2, r3
 800081e:	0013      	movs	r3, r2
 8000820:	43da      	mvns	r2, r3
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	4013      	ands	r3, r2
 8000826:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	68da      	ldr	r2, [r3, #12]
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	409a      	lsls	r2, r3
 8000832:	0013      	movs	r3, r2
 8000834:	693a      	ldr	r2, [r7, #16]
 8000836:	4313      	orrs	r3, r2
 8000838:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	693a      	ldr	r2, [r7, #16]
 800083e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000846:	2201      	movs	r2, #1
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	409a      	lsls	r2, r3
 800084c:	0013      	movs	r3, r2
 800084e:	43da      	mvns	r2, r3
 8000850:	693b      	ldr	r3, [r7, #16]
 8000852:	4013      	ands	r3, r2
 8000854:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	091b      	lsrs	r3, r3, #4
 800085c:	2201      	movs	r2, #1
 800085e:	401a      	ands	r2, r3
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	409a      	lsls	r2, r3
 8000864:	0013      	movs	r3, r2
 8000866:	693a      	ldr	r2, [r7, #16]
 8000868:	4313      	orrs	r3, r2
 800086a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	693a      	ldr	r2, [r7, #16]
 8000870:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	68db      	ldr	r3, [r3, #12]
 8000876:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	2203      	movs	r2, #3
 800087e:	409a      	lsls	r2, r3
 8000880:	0013      	movs	r3, r2
 8000882:	43da      	mvns	r2, r3
 8000884:	693b      	ldr	r3, [r7, #16]
 8000886:	4013      	ands	r3, r2
 8000888:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	689a      	ldr	r2, [r3, #8]
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	409a      	lsls	r2, r3
 8000894:	0013      	movs	r3, r2
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	4313      	orrs	r3, r2
 800089a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	693a      	ldr	r2, [r7, #16]
 80008a0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	2b02      	cmp	r3, #2
 80008a8:	d003      	beq.n	80008b2 <HAL_GPIO_Init+0xea>
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	2b12      	cmp	r3, #18
 80008b0:	d123      	bne.n	80008fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	08da      	lsrs	r2, r3, #3
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	3208      	adds	r2, #8
 80008ba:	0092      	lsls	r2, r2, #2
 80008bc:	58d3      	ldr	r3, [r2, r3]
 80008be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	2207      	movs	r2, #7
 80008c4:	4013      	ands	r3, r2
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	220f      	movs	r2, #15
 80008ca:	409a      	lsls	r2, r3
 80008cc:	0013      	movs	r3, r2
 80008ce:	43da      	mvns	r2, r3
 80008d0:	693b      	ldr	r3, [r7, #16]
 80008d2:	4013      	ands	r3, r2
 80008d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	691a      	ldr	r2, [r3, #16]
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	2107      	movs	r1, #7
 80008de:	400b      	ands	r3, r1
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	409a      	lsls	r2, r3
 80008e4:	0013      	movs	r3, r2
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	08da      	lsrs	r2, r3, #3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3208      	adds	r2, #8
 80008f4:	0092      	lsls	r2, r2, #2
 80008f6:	6939      	ldr	r1, [r7, #16]
 80008f8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	2203      	movs	r2, #3
 8000906:	409a      	lsls	r2, r3
 8000908:	0013      	movs	r3, r2
 800090a:	43da      	mvns	r2, r3
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	4013      	ands	r3, r2
 8000910:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	2203      	movs	r2, #3
 8000918:	401a      	ands	r2, r3
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	409a      	lsls	r2, r3
 8000920:	0013      	movs	r3, r2
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	4313      	orrs	r3, r2
 8000926:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	685a      	ldr	r2, [r3, #4]
 8000932:	2380      	movs	r3, #128	; 0x80
 8000934:	055b      	lsls	r3, r3, #21
 8000936:	4013      	ands	r3, r2
 8000938:	d100      	bne.n	800093c <HAL_GPIO_Init+0x174>
 800093a:	e09a      	b.n	8000a72 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093c:	4b54      	ldr	r3, [pc, #336]	; (8000a90 <HAL_GPIO_Init+0x2c8>)
 800093e:	699a      	ldr	r2, [r3, #24]
 8000940:	4b53      	ldr	r3, [pc, #332]	; (8000a90 <HAL_GPIO_Init+0x2c8>)
 8000942:	2101      	movs	r1, #1
 8000944:	430a      	orrs	r2, r1
 8000946:	619a      	str	r2, [r3, #24]
 8000948:	4b51      	ldr	r3, [pc, #324]	; (8000a90 <HAL_GPIO_Init+0x2c8>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	2201      	movs	r2, #1
 800094e:	4013      	ands	r3, r2
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000954:	4a4f      	ldr	r2, [pc, #316]	; (8000a94 <HAL_GPIO_Init+0x2cc>)
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	089b      	lsrs	r3, r3, #2
 800095a:	3302      	adds	r3, #2
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	589b      	ldr	r3, [r3, r2]
 8000960:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	2203      	movs	r2, #3
 8000966:	4013      	ands	r3, r2
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	220f      	movs	r2, #15
 800096c:	409a      	lsls	r2, r3
 800096e:	0013      	movs	r3, r2
 8000970:	43da      	mvns	r2, r3
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	4013      	ands	r3, r2
 8000976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	2390      	movs	r3, #144	; 0x90
 800097c:	05db      	lsls	r3, r3, #23
 800097e:	429a      	cmp	r2, r3
 8000980:	d013      	beq.n	80009aa <HAL_GPIO_Init+0x1e2>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a44      	ldr	r2, [pc, #272]	; (8000a98 <HAL_GPIO_Init+0x2d0>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d00d      	beq.n	80009a6 <HAL_GPIO_Init+0x1de>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a43      	ldr	r2, [pc, #268]	; (8000a9c <HAL_GPIO_Init+0x2d4>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d007      	beq.n	80009a2 <HAL_GPIO_Init+0x1da>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a42      	ldr	r2, [pc, #264]	; (8000aa0 <HAL_GPIO_Init+0x2d8>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d101      	bne.n	800099e <HAL_GPIO_Init+0x1d6>
 800099a:	2303      	movs	r3, #3
 800099c:	e006      	b.n	80009ac <HAL_GPIO_Init+0x1e4>
 800099e:	2305      	movs	r3, #5
 80009a0:	e004      	b.n	80009ac <HAL_GPIO_Init+0x1e4>
 80009a2:	2302      	movs	r3, #2
 80009a4:	e002      	b.n	80009ac <HAL_GPIO_Init+0x1e4>
 80009a6:	2301      	movs	r3, #1
 80009a8:	e000      	b.n	80009ac <HAL_GPIO_Init+0x1e4>
 80009aa:	2300      	movs	r3, #0
 80009ac:	697a      	ldr	r2, [r7, #20]
 80009ae:	2103      	movs	r1, #3
 80009b0:	400a      	ands	r2, r1
 80009b2:	0092      	lsls	r2, r2, #2
 80009b4:	4093      	lsls	r3, r2
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	4313      	orrs	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009bc:	4935      	ldr	r1, [pc, #212]	; (8000a94 <HAL_GPIO_Init+0x2cc>)
 80009be:	697b      	ldr	r3, [r7, #20]
 80009c0:	089b      	lsrs	r3, r3, #2
 80009c2:	3302      	adds	r3, #2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	693a      	ldr	r2, [r7, #16]
 80009c8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009ca:	4b36      	ldr	r3, [pc, #216]	; (8000aa4 <HAL_GPIO_Init+0x2dc>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	43da      	mvns	r2, r3
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	4013      	ands	r3, r2
 80009d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685a      	ldr	r2, [r3, #4]
 80009de:	2380      	movs	r3, #128	; 0x80
 80009e0:	025b      	lsls	r3, r3, #9
 80009e2:	4013      	ands	r3, r2
 80009e4:	d003      	beq.n	80009ee <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80009ee:	4b2d      	ldr	r3, [pc, #180]	; (8000aa4 <HAL_GPIO_Init+0x2dc>)
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80009f4:	4b2b      	ldr	r3, [pc, #172]	; (8000aa4 <HAL_GPIO_Init+0x2dc>)
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	43da      	mvns	r2, r3
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	4013      	ands	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685a      	ldr	r2, [r3, #4]
 8000a08:	2380      	movs	r3, #128	; 0x80
 8000a0a:	029b      	lsls	r3, r3, #10
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	d003      	beq.n	8000a18 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a18:	4b22      	ldr	r3, [pc, #136]	; (8000aa4 <HAL_GPIO_Init+0x2dc>)
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a1e:	4b21      	ldr	r3, [pc, #132]	; (8000aa4 <HAL_GPIO_Init+0x2dc>)
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	43da      	mvns	r2, r3
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685a      	ldr	r2, [r3, #4]
 8000a32:	2380      	movs	r3, #128	; 0x80
 8000a34:	035b      	lsls	r3, r3, #13
 8000a36:	4013      	ands	r3, r2
 8000a38:	d003      	beq.n	8000a42 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a42:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <HAL_GPIO_Init+0x2dc>)
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000a48:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <HAL_GPIO_Init+0x2dc>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	43da      	mvns	r2, r3
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	4013      	ands	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685a      	ldr	r2, [r3, #4]
 8000a5c:	2380      	movs	r3, #128	; 0x80
 8000a5e:	039b      	lsls	r3, r3, #14
 8000a60:	4013      	ands	r3, r2
 8000a62:	d003      	beq.n	8000a6c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <HAL_GPIO_Init+0x2dc>)
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	3301      	adds	r3, #1
 8000a76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	40da      	lsrs	r2, r3
 8000a80:	1e13      	subs	r3, r2, #0
 8000a82:	d000      	beq.n	8000a86 <HAL_GPIO_Init+0x2be>
 8000a84:	e6a8      	b.n	80007d8 <HAL_GPIO_Init+0x10>
  } 
}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	46c0      	nop			; (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	b006      	add	sp, #24
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40021000 	.word	0x40021000
 8000a94:	40010000 	.word	0x40010000
 8000a98:	48000400 	.word	0x48000400
 8000a9c:	48000800 	.word	0x48000800
 8000aa0:	48000c00 	.word	0x48000c00
 8000aa4:	40010400 	.word	0x40010400

08000aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	0008      	movs	r0, r1
 8000ab2:	0011      	movs	r1, r2
 8000ab4:	1cbb      	adds	r3, r7, #2
 8000ab6:	1c02      	adds	r2, r0, #0
 8000ab8:	801a      	strh	r2, [r3, #0]
 8000aba:	1c7b      	adds	r3, r7, #1
 8000abc:	1c0a      	adds	r2, r1, #0
 8000abe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ac0:	1c7b      	adds	r3, r7, #1
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d004      	beq.n	8000ad2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ac8:	1cbb      	adds	r3, r7, #2
 8000aca:	881a      	ldrh	r2, [r3, #0]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ad0:	e003      	b.n	8000ada <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ad2:	1cbb      	adds	r3, r7, #2
 8000ad4:	881a      	ldrh	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b002      	add	sp, #8
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d101      	bne.n	8000af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000af2:	2301      	movs	r3, #1
 8000af4:	e301      	b.n	80010fa <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2201      	movs	r2, #1
 8000afc:	4013      	ands	r3, r2
 8000afe:	d100      	bne.n	8000b02 <HAL_RCC_OscConfig+0x1e>
 8000b00:	e08d      	b.n	8000c1e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000b02:	4bc3      	ldr	r3, [pc, #780]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	220c      	movs	r2, #12
 8000b08:	4013      	ands	r3, r2
 8000b0a:	2b04      	cmp	r3, #4
 8000b0c:	d00e      	beq.n	8000b2c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b0e:	4bc0      	ldr	r3, [pc, #768]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	220c      	movs	r2, #12
 8000b14:	4013      	ands	r3, r2
 8000b16:	2b08      	cmp	r3, #8
 8000b18:	d116      	bne.n	8000b48 <HAL_RCC_OscConfig+0x64>
 8000b1a:	4bbd      	ldr	r3, [pc, #756]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000b1c:	685a      	ldr	r2, [r3, #4]
 8000b1e:	2380      	movs	r3, #128	; 0x80
 8000b20:	025b      	lsls	r3, r3, #9
 8000b22:	401a      	ands	r2, r3
 8000b24:	2380      	movs	r3, #128	; 0x80
 8000b26:	025b      	lsls	r3, r3, #9
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d10d      	bne.n	8000b48 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b2c:	4bb8      	ldr	r3, [pc, #736]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	2380      	movs	r3, #128	; 0x80
 8000b32:	029b      	lsls	r3, r3, #10
 8000b34:	4013      	ands	r3, r2
 8000b36:	d100      	bne.n	8000b3a <HAL_RCC_OscConfig+0x56>
 8000b38:	e070      	b.n	8000c1c <HAL_RCC_OscConfig+0x138>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d000      	beq.n	8000b44 <HAL_RCC_OscConfig+0x60>
 8000b42:	e06b      	b.n	8000c1c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000b44:	2301      	movs	r3, #1
 8000b46:	e2d8      	b.n	80010fa <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d107      	bne.n	8000b60 <HAL_RCC_OscConfig+0x7c>
 8000b50:	4baf      	ldr	r3, [pc, #700]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	4bae      	ldr	r3, [pc, #696]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000b56:	2180      	movs	r1, #128	; 0x80
 8000b58:	0249      	lsls	r1, r1, #9
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	e02f      	b.n	8000bc0 <HAL_RCC_OscConfig+0xdc>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d10c      	bne.n	8000b82 <HAL_RCC_OscConfig+0x9e>
 8000b68:	4ba9      	ldr	r3, [pc, #676]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	4ba8      	ldr	r3, [pc, #672]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000b6e:	49a9      	ldr	r1, [pc, #676]	; (8000e14 <HAL_RCC_OscConfig+0x330>)
 8000b70:	400a      	ands	r2, r1
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	4ba6      	ldr	r3, [pc, #664]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	4ba5      	ldr	r3, [pc, #660]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000b7a:	49a7      	ldr	r1, [pc, #668]	; (8000e18 <HAL_RCC_OscConfig+0x334>)
 8000b7c:	400a      	ands	r2, r1
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	e01e      	b.n	8000bc0 <HAL_RCC_OscConfig+0xdc>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	2b05      	cmp	r3, #5
 8000b88:	d10e      	bne.n	8000ba8 <HAL_RCC_OscConfig+0xc4>
 8000b8a:	4ba1      	ldr	r3, [pc, #644]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	4ba0      	ldr	r3, [pc, #640]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000b90:	2180      	movs	r1, #128	; 0x80
 8000b92:	02c9      	lsls	r1, r1, #11
 8000b94:	430a      	orrs	r2, r1
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	4b9d      	ldr	r3, [pc, #628]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b9c      	ldr	r3, [pc, #624]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000b9e:	2180      	movs	r1, #128	; 0x80
 8000ba0:	0249      	lsls	r1, r1, #9
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	e00b      	b.n	8000bc0 <HAL_RCC_OscConfig+0xdc>
 8000ba8:	4b99      	ldr	r3, [pc, #612]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4b98      	ldr	r3, [pc, #608]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000bae:	4999      	ldr	r1, [pc, #612]	; (8000e14 <HAL_RCC_OscConfig+0x330>)
 8000bb0:	400a      	ands	r2, r1
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	4b96      	ldr	r3, [pc, #600]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b95      	ldr	r3, [pc, #596]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000bba:	4997      	ldr	r1, [pc, #604]	; (8000e18 <HAL_RCC_OscConfig+0x334>)
 8000bbc:	400a      	ands	r2, r1
 8000bbe:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d014      	beq.n	8000bf2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bc8:	f7ff fd1c 	bl	8000604 <HAL_GetTick>
 8000bcc:	0003      	movs	r3, r0
 8000bce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bd0:	e008      	b.n	8000be4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bd2:	f7ff fd17 	bl	8000604 <HAL_GetTick>
 8000bd6:	0002      	movs	r2, r0
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	2b64      	cmp	r3, #100	; 0x64
 8000bde:	d901      	bls.n	8000be4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000be0:	2303      	movs	r3, #3
 8000be2:	e28a      	b.n	80010fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000be4:	4b8a      	ldr	r3, [pc, #552]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	2380      	movs	r3, #128	; 0x80
 8000bea:	029b      	lsls	r3, r3, #10
 8000bec:	4013      	ands	r3, r2
 8000bee:	d0f0      	beq.n	8000bd2 <HAL_RCC_OscConfig+0xee>
 8000bf0:	e015      	b.n	8000c1e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bf2:	f7ff fd07 	bl	8000604 <HAL_GetTick>
 8000bf6:	0003      	movs	r3, r0
 8000bf8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bfa:	e008      	b.n	8000c0e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bfc:	f7ff fd02 	bl	8000604 <HAL_GetTick>
 8000c00:	0002      	movs	r2, r0
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	2b64      	cmp	r3, #100	; 0x64
 8000c08:	d901      	bls.n	8000c0e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	e275      	b.n	80010fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c0e:	4b80      	ldr	r3, [pc, #512]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	2380      	movs	r3, #128	; 0x80
 8000c14:	029b      	lsls	r3, r3, #10
 8000c16:	4013      	ands	r3, r2
 8000c18:	d1f0      	bne.n	8000bfc <HAL_RCC_OscConfig+0x118>
 8000c1a:	e000      	b.n	8000c1e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c1c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2202      	movs	r2, #2
 8000c24:	4013      	ands	r3, r2
 8000c26:	d100      	bne.n	8000c2a <HAL_RCC_OscConfig+0x146>
 8000c28:	e069      	b.n	8000cfe <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000c2a:	4b79      	ldr	r3, [pc, #484]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	220c      	movs	r2, #12
 8000c30:	4013      	ands	r3, r2
 8000c32:	d00b      	beq.n	8000c4c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000c34:	4b76      	ldr	r3, [pc, #472]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	220c      	movs	r2, #12
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	2b08      	cmp	r3, #8
 8000c3e:	d11c      	bne.n	8000c7a <HAL_RCC_OscConfig+0x196>
 8000c40:	4b73      	ldr	r3, [pc, #460]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000c42:	685a      	ldr	r2, [r3, #4]
 8000c44:	2380      	movs	r3, #128	; 0x80
 8000c46:	025b      	lsls	r3, r3, #9
 8000c48:	4013      	ands	r3, r2
 8000c4a:	d116      	bne.n	8000c7a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c4c:	4b70      	ldr	r3, [pc, #448]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2202      	movs	r2, #2
 8000c52:	4013      	ands	r3, r2
 8000c54:	d005      	beq.n	8000c62 <HAL_RCC_OscConfig+0x17e>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d001      	beq.n	8000c62 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e24b      	b.n	80010fa <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c62:	4b6b      	ldr	r3, [pc, #428]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	22f8      	movs	r2, #248	; 0xf8
 8000c68:	4393      	bics	r3, r2
 8000c6a:	0019      	movs	r1, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	691b      	ldr	r3, [r3, #16]
 8000c70:	00da      	lsls	r2, r3, #3
 8000c72:	4b67      	ldr	r3, [pc, #412]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000c74:	430a      	orrs	r2, r1
 8000c76:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c78:	e041      	b.n	8000cfe <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d024      	beq.n	8000ccc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c82:	4b63      	ldr	r3, [pc, #396]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	4b62      	ldr	r3, [pc, #392]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000c88:	2101      	movs	r1, #1
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c8e:	f7ff fcb9 	bl	8000604 <HAL_GetTick>
 8000c92:	0003      	movs	r3, r0
 8000c94:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c96:	e008      	b.n	8000caa <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c98:	f7ff fcb4 	bl	8000604 <HAL_GetTick>
 8000c9c:	0002      	movs	r2, r0
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d901      	bls.n	8000caa <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	e227      	b.n	80010fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000caa:	4b59      	ldr	r3, [pc, #356]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	2202      	movs	r2, #2
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	d0f1      	beq.n	8000c98 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cb4:	4b56      	ldr	r3, [pc, #344]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	22f8      	movs	r2, #248	; 0xf8
 8000cba:	4393      	bics	r3, r2
 8000cbc:	0019      	movs	r1, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	691b      	ldr	r3, [r3, #16]
 8000cc2:	00da      	lsls	r2, r3, #3
 8000cc4:	4b52      	ldr	r3, [pc, #328]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	e018      	b.n	8000cfe <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ccc:	4b50      	ldr	r3, [pc, #320]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4b4f      	ldr	r3, [pc, #316]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	438a      	bics	r2, r1
 8000cd6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cd8:	f7ff fc94 	bl	8000604 <HAL_GetTick>
 8000cdc:	0003      	movs	r3, r0
 8000cde:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ce0:	e008      	b.n	8000cf4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ce2:	f7ff fc8f 	bl	8000604 <HAL_GetTick>
 8000ce6:	0002      	movs	r2, r0
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	2b02      	cmp	r3, #2
 8000cee:	d901      	bls.n	8000cf4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	e202      	b.n	80010fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cf4:	4b46      	ldr	r3, [pc, #280]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2202      	movs	r2, #2
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	d1f1      	bne.n	8000ce2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2208      	movs	r2, #8
 8000d04:	4013      	ands	r3, r2
 8000d06:	d036      	beq.n	8000d76 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	69db      	ldr	r3, [r3, #28]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d019      	beq.n	8000d44 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d10:	4b3f      	ldr	r3, [pc, #252]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000d12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d14:	4b3e      	ldr	r3, [pc, #248]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000d16:	2101      	movs	r1, #1
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d1c:	f7ff fc72 	bl	8000604 <HAL_GetTick>
 8000d20:	0003      	movs	r3, r0
 8000d22:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d24:	e008      	b.n	8000d38 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d26:	f7ff fc6d 	bl	8000604 <HAL_GetTick>
 8000d2a:	0002      	movs	r2, r0
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d901      	bls.n	8000d38 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000d34:	2303      	movs	r3, #3
 8000d36:	e1e0      	b.n	80010fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d38:	4b35      	ldr	r3, [pc, #212]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3c:	2202      	movs	r2, #2
 8000d3e:	4013      	ands	r3, r2
 8000d40:	d0f1      	beq.n	8000d26 <HAL_RCC_OscConfig+0x242>
 8000d42:	e018      	b.n	8000d76 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d44:	4b32      	ldr	r3, [pc, #200]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000d46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d48:	4b31      	ldr	r3, [pc, #196]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	438a      	bics	r2, r1
 8000d4e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d50:	f7ff fc58 	bl	8000604 <HAL_GetTick>
 8000d54:	0003      	movs	r3, r0
 8000d56:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d58:	e008      	b.n	8000d6c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d5a:	f7ff fc53 	bl	8000604 <HAL_GetTick>
 8000d5e:	0002      	movs	r2, r0
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d901      	bls.n	8000d6c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	e1c6      	b.n	80010fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d6c:	4b28      	ldr	r3, [pc, #160]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d70:	2202      	movs	r2, #2
 8000d72:	4013      	ands	r3, r2
 8000d74:	d1f1      	bne.n	8000d5a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2204      	movs	r2, #4
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	d100      	bne.n	8000d82 <HAL_RCC_OscConfig+0x29e>
 8000d80:	e0b4      	b.n	8000eec <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d82:	201f      	movs	r0, #31
 8000d84:	183b      	adds	r3, r7, r0
 8000d86:	2200      	movs	r2, #0
 8000d88:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d8a:	4b21      	ldr	r3, [pc, #132]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000d8c:	69da      	ldr	r2, [r3, #28]
 8000d8e:	2380      	movs	r3, #128	; 0x80
 8000d90:	055b      	lsls	r3, r3, #21
 8000d92:	4013      	ands	r3, r2
 8000d94:	d110      	bne.n	8000db8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d96:	4b1e      	ldr	r3, [pc, #120]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000d98:	69da      	ldr	r2, [r3, #28]
 8000d9a:	4b1d      	ldr	r3, [pc, #116]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000d9c:	2180      	movs	r1, #128	; 0x80
 8000d9e:	0549      	lsls	r1, r1, #21
 8000da0:	430a      	orrs	r2, r1
 8000da2:	61da      	str	r2, [r3, #28]
 8000da4:	4b1a      	ldr	r3, [pc, #104]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000da6:	69da      	ldr	r2, [r3, #28]
 8000da8:	2380      	movs	r3, #128	; 0x80
 8000daa:	055b      	lsls	r3, r3, #21
 8000dac:	4013      	ands	r3, r2
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000db2:	183b      	adds	r3, r7, r0
 8000db4:	2201      	movs	r2, #1
 8000db6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000db8:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <HAL_RCC_OscConfig+0x338>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	2380      	movs	r3, #128	; 0x80
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	d11a      	bne.n	8000dfa <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dc4:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <HAL_RCC_OscConfig+0x338>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <HAL_RCC_OscConfig+0x338>)
 8000dca:	2180      	movs	r1, #128	; 0x80
 8000dcc:	0049      	lsls	r1, r1, #1
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dd2:	f7ff fc17 	bl	8000604 <HAL_GetTick>
 8000dd6:	0003      	movs	r3, r0
 8000dd8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dda:	e008      	b.n	8000dee <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ddc:	f7ff fc12 	bl	8000604 <HAL_GetTick>
 8000de0:	0002      	movs	r2, r0
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	2b64      	cmp	r3, #100	; 0x64
 8000de8:	d901      	bls.n	8000dee <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8000dea:	2303      	movs	r3, #3
 8000dec:	e185      	b.n	80010fa <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dee:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <HAL_RCC_OscConfig+0x338>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	2380      	movs	r3, #128	; 0x80
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	4013      	ands	r3, r2
 8000df8:	d0f0      	beq.n	8000ddc <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d10e      	bne.n	8000e20 <HAL_RCC_OscConfig+0x33c>
 8000e02:	4b03      	ldr	r3, [pc, #12]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000e04:	6a1a      	ldr	r2, [r3, #32]
 8000e06:	4b02      	ldr	r3, [pc, #8]	; (8000e10 <HAL_RCC_OscConfig+0x32c>)
 8000e08:	2101      	movs	r1, #1
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	621a      	str	r2, [r3, #32]
 8000e0e:	e035      	b.n	8000e7c <HAL_RCC_OscConfig+0x398>
 8000e10:	40021000 	.word	0x40021000
 8000e14:	fffeffff 	.word	0xfffeffff
 8000e18:	fffbffff 	.word	0xfffbffff
 8000e1c:	40007000 	.word	0x40007000
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d10c      	bne.n	8000e42 <HAL_RCC_OscConfig+0x35e>
 8000e28:	4bb6      	ldr	r3, [pc, #728]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8000e2a:	6a1a      	ldr	r2, [r3, #32]
 8000e2c:	4bb5      	ldr	r3, [pc, #724]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8000e2e:	2101      	movs	r1, #1
 8000e30:	438a      	bics	r2, r1
 8000e32:	621a      	str	r2, [r3, #32]
 8000e34:	4bb3      	ldr	r3, [pc, #716]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8000e36:	6a1a      	ldr	r2, [r3, #32]
 8000e38:	4bb2      	ldr	r3, [pc, #712]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8000e3a:	2104      	movs	r1, #4
 8000e3c:	438a      	bics	r2, r1
 8000e3e:	621a      	str	r2, [r3, #32]
 8000e40:	e01c      	b.n	8000e7c <HAL_RCC_OscConfig+0x398>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	2b05      	cmp	r3, #5
 8000e48:	d10c      	bne.n	8000e64 <HAL_RCC_OscConfig+0x380>
 8000e4a:	4bae      	ldr	r3, [pc, #696]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8000e4c:	6a1a      	ldr	r2, [r3, #32]
 8000e4e:	4bad      	ldr	r3, [pc, #692]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8000e50:	2104      	movs	r1, #4
 8000e52:	430a      	orrs	r2, r1
 8000e54:	621a      	str	r2, [r3, #32]
 8000e56:	4bab      	ldr	r3, [pc, #684]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8000e58:	6a1a      	ldr	r2, [r3, #32]
 8000e5a:	4baa      	ldr	r3, [pc, #680]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	621a      	str	r2, [r3, #32]
 8000e62:	e00b      	b.n	8000e7c <HAL_RCC_OscConfig+0x398>
 8000e64:	4ba7      	ldr	r3, [pc, #668]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8000e66:	6a1a      	ldr	r2, [r3, #32]
 8000e68:	4ba6      	ldr	r3, [pc, #664]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	438a      	bics	r2, r1
 8000e6e:	621a      	str	r2, [r3, #32]
 8000e70:	4ba4      	ldr	r3, [pc, #656]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8000e72:	6a1a      	ldr	r2, [r3, #32]
 8000e74:	4ba3      	ldr	r3, [pc, #652]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8000e76:	2104      	movs	r1, #4
 8000e78:	438a      	bics	r2, r1
 8000e7a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d014      	beq.n	8000eae <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e84:	f7ff fbbe 	bl	8000604 <HAL_GetTick>
 8000e88:	0003      	movs	r3, r0
 8000e8a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e8c:	e009      	b.n	8000ea2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e8e:	f7ff fbb9 	bl	8000604 <HAL_GetTick>
 8000e92:	0002      	movs	r2, r0
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	4a9b      	ldr	r2, [pc, #620]	; (8001108 <HAL_RCC_OscConfig+0x624>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d901      	bls.n	8000ea2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e12b      	b.n	80010fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ea2:	4b98      	ldr	r3, [pc, #608]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8000ea4:	6a1b      	ldr	r3, [r3, #32]
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	d0f0      	beq.n	8000e8e <HAL_RCC_OscConfig+0x3aa>
 8000eac:	e013      	b.n	8000ed6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eae:	f7ff fba9 	bl	8000604 <HAL_GetTick>
 8000eb2:	0003      	movs	r3, r0
 8000eb4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eb6:	e009      	b.n	8000ecc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eb8:	f7ff fba4 	bl	8000604 <HAL_GetTick>
 8000ebc:	0002      	movs	r2, r0
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	4a91      	ldr	r2, [pc, #580]	; (8001108 <HAL_RCC_OscConfig+0x624>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d901      	bls.n	8000ecc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	e116      	b.n	80010fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ecc:	4b8d      	ldr	r3, [pc, #564]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8000ece:	6a1b      	ldr	r3, [r3, #32]
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	d1f0      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000ed6:	231f      	movs	r3, #31
 8000ed8:	18fb      	adds	r3, r7, r3
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d105      	bne.n	8000eec <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ee0:	4b88      	ldr	r3, [pc, #544]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8000ee2:	69da      	ldr	r2, [r3, #28]
 8000ee4:	4b87      	ldr	r3, [pc, #540]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8000ee6:	4989      	ldr	r1, [pc, #548]	; (800110c <HAL_RCC_OscConfig+0x628>)
 8000ee8:	400a      	ands	r2, r1
 8000eea:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2210      	movs	r2, #16
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	d063      	beq.n	8000fbe <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d12a      	bne.n	8000f54 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000efe:	4b81      	ldr	r3, [pc, #516]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8000f00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f02:	4b80      	ldr	r3, [pc, #512]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8000f04:	2104      	movs	r1, #4
 8000f06:	430a      	orrs	r2, r1
 8000f08:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000f0a:	4b7e      	ldr	r3, [pc, #504]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8000f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f0e:	4b7d      	ldr	r3, [pc, #500]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8000f10:	2101      	movs	r1, #1
 8000f12:	430a      	orrs	r2, r1
 8000f14:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f16:	f7ff fb75 	bl	8000604 <HAL_GetTick>
 8000f1a:	0003      	movs	r3, r0
 8000f1c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000f1e:	e008      	b.n	8000f32 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000f20:	f7ff fb70 	bl	8000604 <HAL_GetTick>
 8000f24:	0002      	movs	r2, r0
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d901      	bls.n	8000f32 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e0e3      	b.n	80010fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000f32:	4b74      	ldr	r3, [pc, #464]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8000f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f36:	2202      	movs	r2, #2
 8000f38:	4013      	ands	r3, r2
 8000f3a:	d0f1      	beq.n	8000f20 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000f3c:	4b71      	ldr	r3, [pc, #452]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8000f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f40:	22f8      	movs	r2, #248	; 0xf8
 8000f42:	4393      	bics	r3, r2
 8000f44:	0019      	movs	r1, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	699b      	ldr	r3, [r3, #24]
 8000f4a:	00da      	lsls	r2, r3, #3
 8000f4c:	4b6d      	ldr	r3, [pc, #436]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	635a      	str	r2, [r3, #52]	; 0x34
 8000f52:	e034      	b.n	8000fbe <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	695b      	ldr	r3, [r3, #20]
 8000f58:	3305      	adds	r3, #5
 8000f5a:	d111      	bne.n	8000f80 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000f5c:	4b69      	ldr	r3, [pc, #420]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8000f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f60:	4b68      	ldr	r3, [pc, #416]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8000f62:	2104      	movs	r1, #4
 8000f64:	438a      	bics	r2, r1
 8000f66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000f68:	4b66      	ldr	r3, [pc, #408]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8000f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f6c:	22f8      	movs	r2, #248	; 0xf8
 8000f6e:	4393      	bics	r3, r2
 8000f70:	0019      	movs	r1, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	00da      	lsls	r2, r3, #3
 8000f78:	4b62      	ldr	r3, [pc, #392]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	635a      	str	r2, [r3, #52]	; 0x34
 8000f7e:	e01e      	b.n	8000fbe <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000f80:	4b60      	ldr	r3, [pc, #384]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8000f82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f84:	4b5f      	ldr	r3, [pc, #380]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8000f86:	2104      	movs	r1, #4
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000f8c:	4b5d      	ldr	r3, [pc, #372]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8000f8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f90:	4b5c      	ldr	r3, [pc, #368]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8000f92:	2101      	movs	r1, #1
 8000f94:	438a      	bics	r2, r1
 8000f96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f98:	f7ff fb34 	bl	8000604 <HAL_GetTick>
 8000f9c:	0003      	movs	r3, r0
 8000f9e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000fa0:	e008      	b.n	8000fb4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000fa2:	f7ff fb2f 	bl	8000604 <HAL_GetTick>
 8000fa6:	0002      	movs	r2, r0
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d901      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e0a2      	b.n	80010fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000fb4:	4b53      	ldr	r3, [pc, #332]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8000fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fb8:	2202      	movs	r2, #2
 8000fba:	4013      	ands	r3, r2
 8000fbc:	d1f1      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a1b      	ldr	r3, [r3, #32]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d100      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x4e4>
 8000fc6:	e097      	b.n	80010f8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fc8:	4b4e      	ldr	r3, [pc, #312]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	220c      	movs	r2, #12
 8000fce:	4013      	ands	r3, r2
 8000fd0:	2b08      	cmp	r3, #8
 8000fd2:	d100      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x4f2>
 8000fd4:	e06b      	b.n	80010ae <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6a1b      	ldr	r3, [r3, #32]
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d14c      	bne.n	8001078 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fde:	4b49      	ldr	r3, [pc, #292]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	4b48      	ldr	r3, [pc, #288]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8000fe4:	494a      	ldr	r1, [pc, #296]	; (8001110 <HAL_RCC_OscConfig+0x62c>)
 8000fe6:	400a      	ands	r2, r1
 8000fe8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fea:	f7ff fb0b 	bl	8000604 <HAL_GetTick>
 8000fee:	0003      	movs	r3, r0
 8000ff0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ff2:	e008      	b.n	8001006 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ff4:	f7ff fb06 	bl	8000604 <HAL_GetTick>
 8000ff8:	0002      	movs	r2, r0
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d901      	bls.n	8001006 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e079      	b.n	80010fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001006:	4b3f      	ldr	r3, [pc, #252]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	2380      	movs	r3, #128	; 0x80
 800100c:	049b      	lsls	r3, r3, #18
 800100e:	4013      	ands	r3, r2
 8001010:	d1f0      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001012:	4b3c      	ldr	r3, [pc, #240]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8001014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001016:	220f      	movs	r2, #15
 8001018:	4393      	bics	r3, r2
 800101a:	0019      	movs	r1, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001020:	4b38      	ldr	r3, [pc, #224]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8001022:	430a      	orrs	r2, r1
 8001024:	62da      	str	r2, [r3, #44]	; 0x2c
 8001026:	4b37      	ldr	r3, [pc, #220]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	4a3a      	ldr	r2, [pc, #232]	; (8001114 <HAL_RCC_OscConfig+0x630>)
 800102c:	4013      	ands	r3, r2
 800102e:	0019      	movs	r1, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001038:	431a      	orrs	r2, r3
 800103a:	4b32      	ldr	r3, [pc, #200]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 800103c:	430a      	orrs	r2, r1
 800103e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001040:	4b30      	ldr	r3, [pc, #192]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b2f      	ldr	r3, [pc, #188]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 8001046:	2180      	movs	r1, #128	; 0x80
 8001048:	0449      	lsls	r1, r1, #17
 800104a:	430a      	orrs	r2, r1
 800104c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104e:	f7ff fad9 	bl	8000604 <HAL_GetTick>
 8001052:	0003      	movs	r3, r0
 8001054:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001056:	e008      	b.n	800106a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001058:	f7ff fad4 	bl	8000604 <HAL_GetTick>
 800105c:	0002      	movs	r2, r0
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d901      	bls.n	800106a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001066:	2303      	movs	r3, #3
 8001068:	e047      	b.n	80010fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800106a:	4b26      	ldr	r3, [pc, #152]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	049b      	lsls	r3, r3, #18
 8001072:	4013      	ands	r3, r2
 8001074:	d0f0      	beq.n	8001058 <HAL_RCC_OscConfig+0x574>
 8001076:	e03f      	b.n	80010f8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001078:	4b22      	ldr	r3, [pc, #136]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b21      	ldr	r3, [pc, #132]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 800107e:	4924      	ldr	r1, [pc, #144]	; (8001110 <HAL_RCC_OscConfig+0x62c>)
 8001080:	400a      	ands	r2, r1
 8001082:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001084:	f7ff fabe 	bl	8000604 <HAL_GetTick>
 8001088:	0003      	movs	r3, r0
 800108a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800108c:	e008      	b.n	80010a0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800108e:	f7ff fab9 	bl	8000604 <HAL_GetTick>
 8001092:	0002      	movs	r2, r0
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d901      	bls.n	80010a0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e02c      	b.n	80010fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010a0:	4b18      	ldr	r3, [pc, #96]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	2380      	movs	r3, #128	; 0x80
 80010a6:	049b      	lsls	r3, r3, #18
 80010a8:	4013      	ands	r3, r2
 80010aa:	d1f0      	bne.n	800108e <HAL_RCC_OscConfig+0x5aa>
 80010ac:	e024      	b.n	80010f8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a1b      	ldr	r3, [r3, #32]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d101      	bne.n	80010ba <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e01f      	b.n	80010fa <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80010ba:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80010c0:	4b10      	ldr	r3, [pc, #64]	; (8001104 <HAL_RCC_OscConfig+0x620>)
 80010c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80010c6:	697a      	ldr	r2, [r7, #20]
 80010c8:	2380      	movs	r3, #128	; 0x80
 80010ca:	025b      	lsls	r3, r3, #9
 80010cc:	401a      	ands	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d10e      	bne.n	80010f4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	220f      	movs	r2, #15
 80010da:	401a      	ands	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d107      	bne.n	80010f4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	23f0      	movs	r3, #240	; 0xf0
 80010e8:	039b      	lsls	r3, r3, #14
 80010ea:	401a      	ands	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d001      	beq.n	80010f8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e000      	b.n	80010fa <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	0018      	movs	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	b008      	add	sp, #32
 8001100:	bd80      	pop	{r7, pc}
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	40021000 	.word	0x40021000
 8001108:	00001388 	.word	0x00001388
 800110c:	efffffff 	.word	0xefffffff
 8001110:	feffffff 	.word	0xfeffffff
 8001114:	ffc2ffff 	.word	0xffc2ffff

08001118 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d101      	bne.n	800112c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e0b3      	b.n	8001294 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800112c:	4b5b      	ldr	r3, [pc, #364]	; (800129c <HAL_RCC_ClockConfig+0x184>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2201      	movs	r2, #1
 8001132:	4013      	ands	r3, r2
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	429a      	cmp	r2, r3
 8001138:	d911      	bls.n	800115e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800113a:	4b58      	ldr	r3, [pc, #352]	; (800129c <HAL_RCC_ClockConfig+0x184>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2201      	movs	r2, #1
 8001140:	4393      	bics	r3, r2
 8001142:	0019      	movs	r1, r3
 8001144:	4b55      	ldr	r3, [pc, #340]	; (800129c <HAL_RCC_ClockConfig+0x184>)
 8001146:	683a      	ldr	r2, [r7, #0]
 8001148:	430a      	orrs	r2, r1
 800114a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800114c:	4b53      	ldr	r3, [pc, #332]	; (800129c <HAL_RCC_ClockConfig+0x184>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2201      	movs	r2, #1
 8001152:	4013      	ands	r3, r2
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	429a      	cmp	r2, r3
 8001158:	d001      	beq.n	800115e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e09a      	b.n	8001294 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2202      	movs	r2, #2
 8001164:	4013      	ands	r3, r2
 8001166:	d015      	beq.n	8001194 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2204      	movs	r2, #4
 800116e:	4013      	ands	r3, r2
 8001170:	d006      	beq.n	8001180 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001172:	4b4b      	ldr	r3, [pc, #300]	; (80012a0 <HAL_RCC_ClockConfig+0x188>)
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	4b4a      	ldr	r3, [pc, #296]	; (80012a0 <HAL_RCC_ClockConfig+0x188>)
 8001178:	21e0      	movs	r1, #224	; 0xe0
 800117a:	00c9      	lsls	r1, r1, #3
 800117c:	430a      	orrs	r2, r1
 800117e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001180:	4b47      	ldr	r3, [pc, #284]	; (80012a0 <HAL_RCC_ClockConfig+0x188>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	22f0      	movs	r2, #240	; 0xf0
 8001186:	4393      	bics	r3, r2
 8001188:	0019      	movs	r1, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	4b44      	ldr	r3, [pc, #272]	; (80012a0 <HAL_RCC_ClockConfig+0x188>)
 8001190:	430a      	orrs	r2, r1
 8001192:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2201      	movs	r2, #1
 800119a:	4013      	ands	r3, r2
 800119c:	d040      	beq.n	8001220 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d107      	bne.n	80011b6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a6:	4b3e      	ldr	r3, [pc, #248]	; (80012a0 <HAL_RCC_ClockConfig+0x188>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	2380      	movs	r3, #128	; 0x80
 80011ac:	029b      	lsls	r3, r3, #10
 80011ae:	4013      	ands	r3, r2
 80011b0:	d114      	bne.n	80011dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e06e      	b.n	8001294 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d107      	bne.n	80011ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011be:	4b38      	ldr	r3, [pc, #224]	; (80012a0 <HAL_RCC_ClockConfig+0x188>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	2380      	movs	r3, #128	; 0x80
 80011c4:	049b      	lsls	r3, r3, #18
 80011c6:	4013      	ands	r3, r2
 80011c8:	d108      	bne.n	80011dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e062      	b.n	8001294 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ce:	4b34      	ldr	r3, [pc, #208]	; (80012a0 <HAL_RCC_ClockConfig+0x188>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2202      	movs	r2, #2
 80011d4:	4013      	ands	r3, r2
 80011d6:	d101      	bne.n	80011dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e05b      	b.n	8001294 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011dc:	4b30      	ldr	r3, [pc, #192]	; (80012a0 <HAL_RCC_ClockConfig+0x188>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2203      	movs	r2, #3
 80011e2:	4393      	bics	r3, r2
 80011e4:	0019      	movs	r1, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685a      	ldr	r2, [r3, #4]
 80011ea:	4b2d      	ldr	r3, [pc, #180]	; (80012a0 <HAL_RCC_ClockConfig+0x188>)
 80011ec:	430a      	orrs	r2, r1
 80011ee:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011f0:	f7ff fa08 	bl	8000604 <HAL_GetTick>
 80011f4:	0003      	movs	r3, r0
 80011f6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011f8:	e009      	b.n	800120e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011fa:	f7ff fa03 	bl	8000604 <HAL_GetTick>
 80011fe:	0002      	movs	r2, r0
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	4a27      	ldr	r2, [pc, #156]	; (80012a4 <HAL_RCC_ClockConfig+0x18c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d901      	bls.n	800120e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e042      	b.n	8001294 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800120e:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <HAL_RCC_ClockConfig+0x188>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	220c      	movs	r2, #12
 8001214:	401a      	ands	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	429a      	cmp	r2, r3
 800121e:	d1ec      	bne.n	80011fa <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001220:	4b1e      	ldr	r3, [pc, #120]	; (800129c <HAL_RCC_ClockConfig+0x184>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2201      	movs	r2, #1
 8001226:	4013      	ands	r3, r2
 8001228:	683a      	ldr	r2, [r7, #0]
 800122a:	429a      	cmp	r2, r3
 800122c:	d211      	bcs.n	8001252 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800122e:	4b1b      	ldr	r3, [pc, #108]	; (800129c <HAL_RCC_ClockConfig+0x184>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2201      	movs	r2, #1
 8001234:	4393      	bics	r3, r2
 8001236:	0019      	movs	r1, r3
 8001238:	4b18      	ldr	r3, [pc, #96]	; (800129c <HAL_RCC_ClockConfig+0x184>)
 800123a:	683a      	ldr	r2, [r7, #0]
 800123c:	430a      	orrs	r2, r1
 800123e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001240:	4b16      	ldr	r3, [pc, #88]	; (800129c <HAL_RCC_ClockConfig+0x184>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2201      	movs	r2, #1
 8001246:	4013      	ands	r3, r2
 8001248:	683a      	ldr	r2, [r7, #0]
 800124a:	429a      	cmp	r2, r3
 800124c:	d001      	beq.n	8001252 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e020      	b.n	8001294 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2204      	movs	r2, #4
 8001258:	4013      	ands	r3, r2
 800125a:	d009      	beq.n	8001270 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800125c:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <HAL_RCC_ClockConfig+0x188>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	4a11      	ldr	r2, [pc, #68]	; (80012a8 <HAL_RCC_ClockConfig+0x190>)
 8001262:	4013      	ands	r3, r2
 8001264:	0019      	movs	r1, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68da      	ldr	r2, [r3, #12]
 800126a:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <HAL_RCC_ClockConfig+0x188>)
 800126c:	430a      	orrs	r2, r1
 800126e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001270:	f000 f820 	bl	80012b4 <HAL_RCC_GetSysClockFreq>
 8001274:	0001      	movs	r1, r0
 8001276:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <HAL_RCC_ClockConfig+0x188>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	091b      	lsrs	r3, r3, #4
 800127c:	220f      	movs	r2, #15
 800127e:	4013      	ands	r3, r2
 8001280:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <HAL_RCC_ClockConfig+0x194>)
 8001282:	5cd3      	ldrb	r3, [r2, r3]
 8001284:	000a      	movs	r2, r1
 8001286:	40da      	lsrs	r2, r3
 8001288:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <HAL_RCC_ClockConfig+0x198>)
 800128a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800128c:	2000      	movs	r0, #0
 800128e:	f7ff f973 	bl	8000578 <HAL_InitTick>
  
  return HAL_OK;
 8001292:	2300      	movs	r3, #0
}
 8001294:	0018      	movs	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	b004      	add	sp, #16
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40022000 	.word	0x40022000
 80012a0:	40021000 	.word	0x40021000
 80012a4:	00001388 	.word	0x00001388
 80012a8:	fffff8ff 	.word	0xfffff8ff
 80012ac:	080029b0 	.word	0x080029b0
 80012b0:	20000000 	.word	0x20000000

080012b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b08f      	sub	sp, #60	; 0x3c
 80012b8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80012ba:	2314      	movs	r3, #20
 80012bc:	18fb      	adds	r3, r7, r3
 80012be:	4a2b      	ldr	r2, [pc, #172]	; (800136c <HAL_RCC_GetSysClockFreq+0xb8>)
 80012c0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80012c2:	c313      	stmia	r3!, {r0, r1, r4}
 80012c4:	6812      	ldr	r2, [r2, #0]
 80012c6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	4a29      	ldr	r2, [pc, #164]	; (8001370 <HAL_RCC_GetSysClockFreq+0xbc>)
 80012cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80012ce:	c313      	stmia	r3!, {r0, r1, r4}
 80012d0:	6812      	ldr	r2, [r2, #0]
 80012d2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012d8:	2300      	movs	r3, #0
 80012da:	62bb      	str	r3, [r7, #40]	; 0x28
 80012dc:	2300      	movs	r3, #0
 80012de:	637b      	str	r3, [r7, #52]	; 0x34
 80012e0:	2300      	movs	r3, #0
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80012e8:	4b22      	ldr	r3, [pc, #136]	; (8001374 <HAL_RCC_GetSysClockFreq+0xc0>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f0:	220c      	movs	r2, #12
 80012f2:	4013      	ands	r3, r2
 80012f4:	2b04      	cmp	r3, #4
 80012f6:	d002      	beq.n	80012fe <HAL_RCC_GetSysClockFreq+0x4a>
 80012f8:	2b08      	cmp	r3, #8
 80012fa:	d003      	beq.n	8001304 <HAL_RCC_GetSysClockFreq+0x50>
 80012fc:	e02d      	b.n	800135a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012fe:	4b1e      	ldr	r3, [pc, #120]	; (8001378 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001300:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001302:	e02d      	b.n	8001360 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001306:	0c9b      	lsrs	r3, r3, #18
 8001308:	220f      	movs	r2, #15
 800130a:	4013      	ands	r3, r2
 800130c:	2214      	movs	r2, #20
 800130e:	18ba      	adds	r2, r7, r2
 8001310:	5cd3      	ldrb	r3, [r2, r3]
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001314:	4b17      	ldr	r3, [pc, #92]	; (8001374 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001318:	220f      	movs	r2, #15
 800131a:	4013      	ands	r3, r2
 800131c:	1d3a      	adds	r2, r7, #4
 800131e:	5cd3      	ldrb	r3, [r2, r3]
 8001320:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	025b      	lsls	r3, r3, #9
 8001328:	4013      	ands	r3, r2
 800132a:	d009      	beq.n	8001340 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800132c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800132e:	4812      	ldr	r0, [pc, #72]	; (8001378 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001330:	f7fe fefc 	bl	800012c <__udivsi3>
 8001334:	0003      	movs	r3, r0
 8001336:	001a      	movs	r2, r3
 8001338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133a:	4353      	muls	r3, r2
 800133c:	637b      	str	r3, [r7, #52]	; 0x34
 800133e:	e009      	b.n	8001354 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001340:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001342:	000a      	movs	r2, r1
 8001344:	0152      	lsls	r2, r2, #5
 8001346:	1a52      	subs	r2, r2, r1
 8001348:	0193      	lsls	r3, r2, #6
 800134a:	1a9b      	subs	r3, r3, r2
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	185b      	adds	r3, r3, r1
 8001350:	021b      	lsls	r3, r3, #8
 8001352:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001356:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001358:	e002      	b.n	8001360 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800135a:	4b07      	ldr	r3, [pc, #28]	; (8001378 <HAL_RCC_GetSysClockFreq+0xc4>)
 800135c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800135e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001362:	0018      	movs	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	b00f      	add	sp, #60	; 0x3c
 8001368:	bd90      	pop	{r4, r7, pc}
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	08002990 	.word	0x08002990
 8001370:	080029a0 	.word	0x080029a0
 8001374:	40021000 	.word	0x40021000
 8001378:	007a1200 	.word	0x007a1200

0800137c <__errno>:
 800137c:	4b01      	ldr	r3, [pc, #4]	; (8001384 <__errno+0x8>)
 800137e:	6818      	ldr	r0, [r3, #0]
 8001380:	4770      	bx	lr
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	2000000c 	.word	0x2000000c

08001388 <__libc_init_array>:
 8001388:	b570      	push	{r4, r5, r6, lr}
 800138a:	2600      	movs	r6, #0
 800138c:	4d0c      	ldr	r5, [pc, #48]	; (80013c0 <__libc_init_array+0x38>)
 800138e:	4c0d      	ldr	r4, [pc, #52]	; (80013c4 <__libc_init_array+0x3c>)
 8001390:	1b64      	subs	r4, r4, r5
 8001392:	10a4      	asrs	r4, r4, #2
 8001394:	42a6      	cmp	r6, r4
 8001396:	d109      	bne.n	80013ac <__libc_init_array+0x24>
 8001398:	2600      	movs	r6, #0
 800139a:	f001 fadd 	bl	8002958 <_init>
 800139e:	4d0a      	ldr	r5, [pc, #40]	; (80013c8 <__libc_init_array+0x40>)
 80013a0:	4c0a      	ldr	r4, [pc, #40]	; (80013cc <__libc_init_array+0x44>)
 80013a2:	1b64      	subs	r4, r4, r5
 80013a4:	10a4      	asrs	r4, r4, #2
 80013a6:	42a6      	cmp	r6, r4
 80013a8:	d105      	bne.n	80013b6 <__libc_init_array+0x2e>
 80013aa:	bd70      	pop	{r4, r5, r6, pc}
 80013ac:	00b3      	lsls	r3, r6, #2
 80013ae:	58eb      	ldr	r3, [r5, r3]
 80013b0:	4798      	blx	r3
 80013b2:	3601      	adds	r6, #1
 80013b4:	e7ee      	b.n	8001394 <__libc_init_array+0xc>
 80013b6:	00b3      	lsls	r3, r6, #2
 80013b8:	58eb      	ldr	r3, [r5, r3]
 80013ba:	4798      	blx	r3
 80013bc:	3601      	adds	r6, #1
 80013be:	e7f2      	b.n	80013a6 <__libc_init_array+0x1e>
 80013c0:	08002a74 	.word	0x08002a74
 80013c4:	08002a74 	.word	0x08002a74
 80013c8:	08002a74 	.word	0x08002a74
 80013cc:	08002a78 	.word	0x08002a78

080013d0 <memset>:
 80013d0:	0003      	movs	r3, r0
 80013d2:	1882      	adds	r2, r0, r2
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d100      	bne.n	80013da <memset+0xa>
 80013d8:	4770      	bx	lr
 80013da:	7019      	strb	r1, [r3, #0]
 80013dc:	3301      	adds	r3, #1
 80013de:	e7f9      	b.n	80013d4 <memset+0x4>

080013e0 <iprintf>:
 80013e0:	b40f      	push	{r0, r1, r2, r3}
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <iprintf+0x30>)
 80013e4:	b513      	push	{r0, r1, r4, lr}
 80013e6:	681c      	ldr	r4, [r3, #0]
 80013e8:	2c00      	cmp	r4, #0
 80013ea:	d005      	beq.n	80013f8 <iprintf+0x18>
 80013ec:	69a3      	ldr	r3, [r4, #24]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d102      	bne.n	80013f8 <iprintf+0x18>
 80013f2:	0020      	movs	r0, r4
 80013f4:	f000 fa86 	bl	8001904 <__sinit>
 80013f8:	ab05      	add	r3, sp, #20
 80013fa:	0020      	movs	r0, r4
 80013fc:	9a04      	ldr	r2, [sp, #16]
 80013fe:	68a1      	ldr	r1, [r4, #8]
 8001400:	9301      	str	r3, [sp, #4]
 8001402:	f000 fc5f 	bl	8001cc4 <_vfiprintf_r>
 8001406:	bc16      	pop	{r1, r2, r4}
 8001408:	bc08      	pop	{r3}
 800140a:	b004      	add	sp, #16
 800140c:	4718      	bx	r3
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	2000000c 	.word	0x2000000c

08001414 <_puts_r>:
 8001414:	b570      	push	{r4, r5, r6, lr}
 8001416:	0005      	movs	r5, r0
 8001418:	000e      	movs	r6, r1
 800141a:	2800      	cmp	r0, #0
 800141c:	d004      	beq.n	8001428 <_puts_r+0x14>
 800141e:	6983      	ldr	r3, [r0, #24]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d101      	bne.n	8001428 <_puts_r+0x14>
 8001424:	f000 fa6e 	bl	8001904 <__sinit>
 8001428:	69ab      	ldr	r3, [r5, #24]
 800142a:	68ac      	ldr	r4, [r5, #8]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d102      	bne.n	8001436 <_puts_r+0x22>
 8001430:	0028      	movs	r0, r5
 8001432:	f000 fa67 	bl	8001904 <__sinit>
 8001436:	4b2d      	ldr	r3, [pc, #180]	; (80014ec <_puts_r+0xd8>)
 8001438:	429c      	cmp	r4, r3
 800143a:	d122      	bne.n	8001482 <_puts_r+0x6e>
 800143c:	686c      	ldr	r4, [r5, #4]
 800143e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001440:	07db      	lsls	r3, r3, #31
 8001442:	d405      	bmi.n	8001450 <_puts_r+0x3c>
 8001444:	89a3      	ldrh	r3, [r4, #12]
 8001446:	059b      	lsls	r3, r3, #22
 8001448:	d402      	bmi.n	8001450 <_puts_r+0x3c>
 800144a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800144c:	f000 fafb 	bl	8001a46 <__retarget_lock_acquire_recursive>
 8001450:	89a3      	ldrh	r3, [r4, #12]
 8001452:	071b      	lsls	r3, r3, #28
 8001454:	d502      	bpl.n	800145c <_puts_r+0x48>
 8001456:	6923      	ldr	r3, [r4, #16]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d129      	bne.n	80014b0 <_puts_r+0x9c>
 800145c:	0021      	movs	r1, r4
 800145e:	0028      	movs	r0, r5
 8001460:	f000 f8aa 	bl	80015b8 <__swsetup_r>
 8001464:	2800      	cmp	r0, #0
 8001466:	d023      	beq.n	80014b0 <_puts_r+0x9c>
 8001468:	2501      	movs	r5, #1
 800146a:	426d      	negs	r5, r5
 800146c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800146e:	07db      	lsls	r3, r3, #31
 8001470:	d405      	bmi.n	800147e <_puts_r+0x6a>
 8001472:	89a3      	ldrh	r3, [r4, #12]
 8001474:	059b      	lsls	r3, r3, #22
 8001476:	d402      	bmi.n	800147e <_puts_r+0x6a>
 8001478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800147a:	f000 fae5 	bl	8001a48 <__retarget_lock_release_recursive>
 800147e:	0028      	movs	r0, r5
 8001480:	bd70      	pop	{r4, r5, r6, pc}
 8001482:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <_puts_r+0xdc>)
 8001484:	429c      	cmp	r4, r3
 8001486:	d101      	bne.n	800148c <_puts_r+0x78>
 8001488:	68ac      	ldr	r4, [r5, #8]
 800148a:	e7d8      	b.n	800143e <_puts_r+0x2a>
 800148c:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <_puts_r+0xe0>)
 800148e:	429c      	cmp	r4, r3
 8001490:	d1d5      	bne.n	800143e <_puts_r+0x2a>
 8001492:	68ec      	ldr	r4, [r5, #12]
 8001494:	e7d3      	b.n	800143e <_puts_r+0x2a>
 8001496:	3601      	adds	r6, #1
 8001498:	60a3      	str	r3, [r4, #8]
 800149a:	2b00      	cmp	r3, #0
 800149c:	da04      	bge.n	80014a8 <_puts_r+0x94>
 800149e:	69a2      	ldr	r2, [r4, #24]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	dc16      	bgt.n	80014d2 <_puts_r+0xbe>
 80014a4:	290a      	cmp	r1, #10
 80014a6:	d014      	beq.n	80014d2 <_puts_r+0xbe>
 80014a8:	6823      	ldr	r3, [r4, #0]
 80014aa:	1c5a      	adds	r2, r3, #1
 80014ac:	6022      	str	r2, [r4, #0]
 80014ae:	7019      	strb	r1, [r3, #0]
 80014b0:	68a3      	ldr	r3, [r4, #8]
 80014b2:	7831      	ldrb	r1, [r6, #0]
 80014b4:	3b01      	subs	r3, #1
 80014b6:	2900      	cmp	r1, #0
 80014b8:	d1ed      	bne.n	8001496 <_puts_r+0x82>
 80014ba:	60a3      	str	r3, [r4, #8]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	da0f      	bge.n	80014e0 <_puts_r+0xcc>
 80014c0:	0028      	movs	r0, r5
 80014c2:	0022      	movs	r2, r4
 80014c4:	310a      	adds	r1, #10
 80014c6:	f000 f821 	bl	800150c <__swbuf_r>
 80014ca:	250a      	movs	r5, #10
 80014cc:	1c43      	adds	r3, r0, #1
 80014ce:	d1cd      	bne.n	800146c <_puts_r+0x58>
 80014d0:	e7ca      	b.n	8001468 <_puts_r+0x54>
 80014d2:	0022      	movs	r2, r4
 80014d4:	0028      	movs	r0, r5
 80014d6:	f000 f819 	bl	800150c <__swbuf_r>
 80014da:	1c43      	adds	r3, r0, #1
 80014dc:	d1e8      	bne.n	80014b0 <_puts_r+0x9c>
 80014de:	e7c3      	b.n	8001468 <_puts_r+0x54>
 80014e0:	250a      	movs	r5, #10
 80014e2:	6823      	ldr	r3, [r4, #0]
 80014e4:	1c5a      	adds	r2, r3, #1
 80014e6:	6022      	str	r2, [r4, #0]
 80014e8:	701d      	strb	r5, [r3, #0]
 80014ea:	e7bf      	b.n	800146c <_puts_r+0x58>
 80014ec:	080029e4 	.word	0x080029e4
 80014f0:	08002a04 	.word	0x08002a04
 80014f4:	080029c4 	.word	0x080029c4

080014f8 <puts>:
 80014f8:	b510      	push	{r4, lr}
 80014fa:	4b03      	ldr	r3, [pc, #12]	; (8001508 <puts+0x10>)
 80014fc:	0001      	movs	r1, r0
 80014fe:	6818      	ldr	r0, [r3, #0]
 8001500:	f7ff ff88 	bl	8001414 <_puts_r>
 8001504:	bd10      	pop	{r4, pc}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	2000000c 	.word	0x2000000c

0800150c <__swbuf_r>:
 800150c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800150e:	0005      	movs	r5, r0
 8001510:	000e      	movs	r6, r1
 8001512:	0014      	movs	r4, r2
 8001514:	2800      	cmp	r0, #0
 8001516:	d004      	beq.n	8001522 <__swbuf_r+0x16>
 8001518:	6983      	ldr	r3, [r0, #24]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <__swbuf_r+0x16>
 800151e:	f000 f9f1 	bl	8001904 <__sinit>
 8001522:	4b22      	ldr	r3, [pc, #136]	; (80015ac <__swbuf_r+0xa0>)
 8001524:	429c      	cmp	r4, r3
 8001526:	d12e      	bne.n	8001586 <__swbuf_r+0x7a>
 8001528:	686c      	ldr	r4, [r5, #4]
 800152a:	69a3      	ldr	r3, [r4, #24]
 800152c:	60a3      	str	r3, [r4, #8]
 800152e:	89a3      	ldrh	r3, [r4, #12]
 8001530:	071b      	lsls	r3, r3, #28
 8001532:	d532      	bpl.n	800159a <__swbuf_r+0x8e>
 8001534:	6923      	ldr	r3, [r4, #16]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d02f      	beq.n	800159a <__swbuf_r+0x8e>
 800153a:	6823      	ldr	r3, [r4, #0]
 800153c:	6922      	ldr	r2, [r4, #16]
 800153e:	b2f7      	uxtb	r7, r6
 8001540:	1a98      	subs	r0, r3, r2
 8001542:	6963      	ldr	r3, [r4, #20]
 8001544:	b2f6      	uxtb	r6, r6
 8001546:	4283      	cmp	r3, r0
 8001548:	dc05      	bgt.n	8001556 <__swbuf_r+0x4a>
 800154a:	0021      	movs	r1, r4
 800154c:	0028      	movs	r0, r5
 800154e:	f000 f937 	bl	80017c0 <_fflush_r>
 8001552:	2800      	cmp	r0, #0
 8001554:	d127      	bne.n	80015a6 <__swbuf_r+0x9a>
 8001556:	68a3      	ldr	r3, [r4, #8]
 8001558:	3001      	adds	r0, #1
 800155a:	3b01      	subs	r3, #1
 800155c:	60a3      	str	r3, [r4, #8]
 800155e:	6823      	ldr	r3, [r4, #0]
 8001560:	1c5a      	adds	r2, r3, #1
 8001562:	6022      	str	r2, [r4, #0]
 8001564:	701f      	strb	r7, [r3, #0]
 8001566:	6963      	ldr	r3, [r4, #20]
 8001568:	4283      	cmp	r3, r0
 800156a:	d004      	beq.n	8001576 <__swbuf_r+0x6a>
 800156c:	89a3      	ldrh	r3, [r4, #12]
 800156e:	07db      	lsls	r3, r3, #31
 8001570:	d507      	bpl.n	8001582 <__swbuf_r+0x76>
 8001572:	2e0a      	cmp	r6, #10
 8001574:	d105      	bne.n	8001582 <__swbuf_r+0x76>
 8001576:	0021      	movs	r1, r4
 8001578:	0028      	movs	r0, r5
 800157a:	f000 f921 	bl	80017c0 <_fflush_r>
 800157e:	2800      	cmp	r0, #0
 8001580:	d111      	bne.n	80015a6 <__swbuf_r+0x9a>
 8001582:	0030      	movs	r0, r6
 8001584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001586:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <__swbuf_r+0xa4>)
 8001588:	429c      	cmp	r4, r3
 800158a:	d101      	bne.n	8001590 <__swbuf_r+0x84>
 800158c:	68ac      	ldr	r4, [r5, #8]
 800158e:	e7cc      	b.n	800152a <__swbuf_r+0x1e>
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <__swbuf_r+0xa8>)
 8001592:	429c      	cmp	r4, r3
 8001594:	d1c9      	bne.n	800152a <__swbuf_r+0x1e>
 8001596:	68ec      	ldr	r4, [r5, #12]
 8001598:	e7c7      	b.n	800152a <__swbuf_r+0x1e>
 800159a:	0021      	movs	r1, r4
 800159c:	0028      	movs	r0, r5
 800159e:	f000 f80b 	bl	80015b8 <__swsetup_r>
 80015a2:	2800      	cmp	r0, #0
 80015a4:	d0c9      	beq.n	800153a <__swbuf_r+0x2e>
 80015a6:	2601      	movs	r6, #1
 80015a8:	4276      	negs	r6, r6
 80015aa:	e7ea      	b.n	8001582 <__swbuf_r+0x76>
 80015ac:	080029e4 	.word	0x080029e4
 80015b0:	08002a04 	.word	0x08002a04
 80015b4:	080029c4 	.word	0x080029c4

080015b8 <__swsetup_r>:
 80015b8:	4b37      	ldr	r3, [pc, #220]	; (8001698 <__swsetup_r+0xe0>)
 80015ba:	b570      	push	{r4, r5, r6, lr}
 80015bc:	681d      	ldr	r5, [r3, #0]
 80015be:	0006      	movs	r6, r0
 80015c0:	000c      	movs	r4, r1
 80015c2:	2d00      	cmp	r5, #0
 80015c4:	d005      	beq.n	80015d2 <__swsetup_r+0x1a>
 80015c6:	69ab      	ldr	r3, [r5, #24]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d102      	bne.n	80015d2 <__swsetup_r+0x1a>
 80015cc:	0028      	movs	r0, r5
 80015ce:	f000 f999 	bl	8001904 <__sinit>
 80015d2:	4b32      	ldr	r3, [pc, #200]	; (800169c <__swsetup_r+0xe4>)
 80015d4:	429c      	cmp	r4, r3
 80015d6:	d10f      	bne.n	80015f8 <__swsetup_r+0x40>
 80015d8:	686c      	ldr	r4, [r5, #4]
 80015da:	230c      	movs	r3, #12
 80015dc:	5ee2      	ldrsh	r2, [r4, r3]
 80015de:	b293      	uxth	r3, r2
 80015e0:	0711      	lsls	r1, r2, #28
 80015e2:	d42d      	bmi.n	8001640 <__swsetup_r+0x88>
 80015e4:	06d9      	lsls	r1, r3, #27
 80015e6:	d411      	bmi.n	800160c <__swsetup_r+0x54>
 80015e8:	2309      	movs	r3, #9
 80015ea:	2001      	movs	r0, #1
 80015ec:	6033      	str	r3, [r6, #0]
 80015ee:	3337      	adds	r3, #55	; 0x37
 80015f0:	4313      	orrs	r3, r2
 80015f2:	81a3      	strh	r3, [r4, #12]
 80015f4:	4240      	negs	r0, r0
 80015f6:	bd70      	pop	{r4, r5, r6, pc}
 80015f8:	4b29      	ldr	r3, [pc, #164]	; (80016a0 <__swsetup_r+0xe8>)
 80015fa:	429c      	cmp	r4, r3
 80015fc:	d101      	bne.n	8001602 <__swsetup_r+0x4a>
 80015fe:	68ac      	ldr	r4, [r5, #8]
 8001600:	e7eb      	b.n	80015da <__swsetup_r+0x22>
 8001602:	4b28      	ldr	r3, [pc, #160]	; (80016a4 <__swsetup_r+0xec>)
 8001604:	429c      	cmp	r4, r3
 8001606:	d1e8      	bne.n	80015da <__swsetup_r+0x22>
 8001608:	68ec      	ldr	r4, [r5, #12]
 800160a:	e7e6      	b.n	80015da <__swsetup_r+0x22>
 800160c:	075b      	lsls	r3, r3, #29
 800160e:	d513      	bpl.n	8001638 <__swsetup_r+0x80>
 8001610:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001612:	2900      	cmp	r1, #0
 8001614:	d008      	beq.n	8001628 <__swsetup_r+0x70>
 8001616:	0023      	movs	r3, r4
 8001618:	3344      	adds	r3, #68	; 0x44
 800161a:	4299      	cmp	r1, r3
 800161c:	d002      	beq.n	8001624 <__swsetup_r+0x6c>
 800161e:	0030      	movs	r0, r6
 8001620:	f000 fa80 	bl	8001b24 <_free_r>
 8001624:	2300      	movs	r3, #0
 8001626:	6363      	str	r3, [r4, #52]	; 0x34
 8001628:	2224      	movs	r2, #36	; 0x24
 800162a:	89a3      	ldrh	r3, [r4, #12]
 800162c:	4393      	bics	r3, r2
 800162e:	81a3      	strh	r3, [r4, #12]
 8001630:	2300      	movs	r3, #0
 8001632:	6063      	str	r3, [r4, #4]
 8001634:	6923      	ldr	r3, [r4, #16]
 8001636:	6023      	str	r3, [r4, #0]
 8001638:	2308      	movs	r3, #8
 800163a:	89a2      	ldrh	r2, [r4, #12]
 800163c:	4313      	orrs	r3, r2
 800163e:	81a3      	strh	r3, [r4, #12]
 8001640:	6923      	ldr	r3, [r4, #16]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d10b      	bne.n	800165e <__swsetup_r+0xa6>
 8001646:	21a0      	movs	r1, #160	; 0xa0
 8001648:	2280      	movs	r2, #128	; 0x80
 800164a:	89a3      	ldrh	r3, [r4, #12]
 800164c:	0089      	lsls	r1, r1, #2
 800164e:	0092      	lsls	r2, r2, #2
 8001650:	400b      	ands	r3, r1
 8001652:	4293      	cmp	r3, r2
 8001654:	d003      	beq.n	800165e <__swsetup_r+0xa6>
 8001656:	0021      	movs	r1, r4
 8001658:	0030      	movs	r0, r6
 800165a:	f000 fa1f 	bl	8001a9c <__smakebuf_r>
 800165e:	220c      	movs	r2, #12
 8001660:	5ea3      	ldrsh	r3, [r4, r2]
 8001662:	2001      	movs	r0, #1
 8001664:	001a      	movs	r2, r3
 8001666:	b299      	uxth	r1, r3
 8001668:	4002      	ands	r2, r0
 800166a:	4203      	tst	r3, r0
 800166c:	d00f      	beq.n	800168e <__swsetup_r+0xd6>
 800166e:	2200      	movs	r2, #0
 8001670:	60a2      	str	r2, [r4, #8]
 8001672:	6962      	ldr	r2, [r4, #20]
 8001674:	4252      	negs	r2, r2
 8001676:	61a2      	str	r2, [r4, #24]
 8001678:	2000      	movs	r0, #0
 800167a:	6922      	ldr	r2, [r4, #16]
 800167c:	4282      	cmp	r2, r0
 800167e:	d1ba      	bne.n	80015f6 <__swsetup_r+0x3e>
 8001680:	060a      	lsls	r2, r1, #24
 8001682:	d5b8      	bpl.n	80015f6 <__swsetup_r+0x3e>
 8001684:	2240      	movs	r2, #64	; 0x40
 8001686:	4313      	orrs	r3, r2
 8001688:	81a3      	strh	r3, [r4, #12]
 800168a:	3801      	subs	r0, #1
 800168c:	e7b3      	b.n	80015f6 <__swsetup_r+0x3e>
 800168e:	0788      	lsls	r0, r1, #30
 8001690:	d400      	bmi.n	8001694 <__swsetup_r+0xdc>
 8001692:	6962      	ldr	r2, [r4, #20]
 8001694:	60a2      	str	r2, [r4, #8]
 8001696:	e7ef      	b.n	8001678 <__swsetup_r+0xc0>
 8001698:	2000000c 	.word	0x2000000c
 800169c:	080029e4 	.word	0x080029e4
 80016a0:	08002a04 	.word	0x08002a04
 80016a4:	080029c4 	.word	0x080029c4

080016a8 <__sflush_r>:
 80016a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80016aa:	898b      	ldrh	r3, [r1, #12]
 80016ac:	0005      	movs	r5, r0
 80016ae:	000c      	movs	r4, r1
 80016b0:	071a      	lsls	r2, r3, #28
 80016b2:	d45f      	bmi.n	8001774 <__sflush_r+0xcc>
 80016b4:	684a      	ldr	r2, [r1, #4]
 80016b6:	2a00      	cmp	r2, #0
 80016b8:	dc04      	bgt.n	80016c4 <__sflush_r+0x1c>
 80016ba:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80016bc:	2a00      	cmp	r2, #0
 80016be:	dc01      	bgt.n	80016c4 <__sflush_r+0x1c>
 80016c0:	2000      	movs	r0, #0
 80016c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80016c4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80016c6:	2f00      	cmp	r7, #0
 80016c8:	d0fa      	beq.n	80016c0 <__sflush_r+0x18>
 80016ca:	2200      	movs	r2, #0
 80016cc:	2180      	movs	r1, #128	; 0x80
 80016ce:	682e      	ldr	r6, [r5, #0]
 80016d0:	602a      	str	r2, [r5, #0]
 80016d2:	001a      	movs	r2, r3
 80016d4:	0149      	lsls	r1, r1, #5
 80016d6:	400a      	ands	r2, r1
 80016d8:	420b      	tst	r3, r1
 80016da:	d034      	beq.n	8001746 <__sflush_r+0x9e>
 80016dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80016de:	89a3      	ldrh	r3, [r4, #12]
 80016e0:	075b      	lsls	r3, r3, #29
 80016e2:	d506      	bpl.n	80016f2 <__sflush_r+0x4a>
 80016e4:	6863      	ldr	r3, [r4, #4]
 80016e6:	1ac0      	subs	r0, r0, r3
 80016e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <__sflush_r+0x4a>
 80016ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016f0:	1ac0      	subs	r0, r0, r3
 80016f2:	0002      	movs	r2, r0
 80016f4:	6a21      	ldr	r1, [r4, #32]
 80016f6:	2300      	movs	r3, #0
 80016f8:	0028      	movs	r0, r5
 80016fa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80016fc:	47b8      	blx	r7
 80016fe:	89a1      	ldrh	r1, [r4, #12]
 8001700:	1c43      	adds	r3, r0, #1
 8001702:	d106      	bne.n	8001712 <__sflush_r+0x6a>
 8001704:	682b      	ldr	r3, [r5, #0]
 8001706:	2b1d      	cmp	r3, #29
 8001708:	d831      	bhi.n	800176e <__sflush_r+0xc6>
 800170a:	4a2c      	ldr	r2, [pc, #176]	; (80017bc <__sflush_r+0x114>)
 800170c:	40da      	lsrs	r2, r3
 800170e:	07d3      	lsls	r3, r2, #31
 8001710:	d52d      	bpl.n	800176e <__sflush_r+0xc6>
 8001712:	2300      	movs	r3, #0
 8001714:	6063      	str	r3, [r4, #4]
 8001716:	6923      	ldr	r3, [r4, #16]
 8001718:	6023      	str	r3, [r4, #0]
 800171a:	04cb      	lsls	r3, r1, #19
 800171c:	d505      	bpl.n	800172a <__sflush_r+0x82>
 800171e:	1c43      	adds	r3, r0, #1
 8001720:	d102      	bne.n	8001728 <__sflush_r+0x80>
 8001722:	682b      	ldr	r3, [r5, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d100      	bne.n	800172a <__sflush_r+0x82>
 8001728:	6560      	str	r0, [r4, #84]	; 0x54
 800172a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800172c:	602e      	str	r6, [r5, #0]
 800172e:	2900      	cmp	r1, #0
 8001730:	d0c6      	beq.n	80016c0 <__sflush_r+0x18>
 8001732:	0023      	movs	r3, r4
 8001734:	3344      	adds	r3, #68	; 0x44
 8001736:	4299      	cmp	r1, r3
 8001738:	d002      	beq.n	8001740 <__sflush_r+0x98>
 800173a:	0028      	movs	r0, r5
 800173c:	f000 f9f2 	bl	8001b24 <_free_r>
 8001740:	2000      	movs	r0, #0
 8001742:	6360      	str	r0, [r4, #52]	; 0x34
 8001744:	e7bd      	b.n	80016c2 <__sflush_r+0x1a>
 8001746:	2301      	movs	r3, #1
 8001748:	0028      	movs	r0, r5
 800174a:	6a21      	ldr	r1, [r4, #32]
 800174c:	47b8      	blx	r7
 800174e:	1c43      	adds	r3, r0, #1
 8001750:	d1c5      	bne.n	80016de <__sflush_r+0x36>
 8001752:	682b      	ldr	r3, [r5, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0c2      	beq.n	80016de <__sflush_r+0x36>
 8001758:	2b1d      	cmp	r3, #29
 800175a:	d001      	beq.n	8001760 <__sflush_r+0xb8>
 800175c:	2b16      	cmp	r3, #22
 800175e:	d101      	bne.n	8001764 <__sflush_r+0xbc>
 8001760:	602e      	str	r6, [r5, #0]
 8001762:	e7ad      	b.n	80016c0 <__sflush_r+0x18>
 8001764:	2340      	movs	r3, #64	; 0x40
 8001766:	89a2      	ldrh	r2, [r4, #12]
 8001768:	4313      	orrs	r3, r2
 800176a:	81a3      	strh	r3, [r4, #12]
 800176c:	e7a9      	b.n	80016c2 <__sflush_r+0x1a>
 800176e:	2340      	movs	r3, #64	; 0x40
 8001770:	430b      	orrs	r3, r1
 8001772:	e7fa      	b.n	800176a <__sflush_r+0xc2>
 8001774:	690f      	ldr	r7, [r1, #16]
 8001776:	2f00      	cmp	r7, #0
 8001778:	d0a2      	beq.n	80016c0 <__sflush_r+0x18>
 800177a:	680a      	ldr	r2, [r1, #0]
 800177c:	600f      	str	r7, [r1, #0]
 800177e:	1bd2      	subs	r2, r2, r7
 8001780:	9201      	str	r2, [sp, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	079b      	lsls	r3, r3, #30
 8001786:	d100      	bne.n	800178a <__sflush_r+0xe2>
 8001788:	694a      	ldr	r2, [r1, #20]
 800178a:	60a2      	str	r2, [r4, #8]
 800178c:	9b01      	ldr	r3, [sp, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	dc00      	bgt.n	8001794 <__sflush_r+0xec>
 8001792:	e795      	b.n	80016c0 <__sflush_r+0x18>
 8001794:	003a      	movs	r2, r7
 8001796:	0028      	movs	r0, r5
 8001798:	9b01      	ldr	r3, [sp, #4]
 800179a:	6a21      	ldr	r1, [r4, #32]
 800179c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800179e:	47b0      	blx	r6
 80017a0:	2800      	cmp	r0, #0
 80017a2:	dc06      	bgt.n	80017b2 <__sflush_r+0x10a>
 80017a4:	2340      	movs	r3, #64	; 0x40
 80017a6:	2001      	movs	r0, #1
 80017a8:	89a2      	ldrh	r2, [r4, #12]
 80017aa:	4240      	negs	r0, r0
 80017ac:	4313      	orrs	r3, r2
 80017ae:	81a3      	strh	r3, [r4, #12]
 80017b0:	e787      	b.n	80016c2 <__sflush_r+0x1a>
 80017b2:	9b01      	ldr	r3, [sp, #4]
 80017b4:	183f      	adds	r7, r7, r0
 80017b6:	1a1b      	subs	r3, r3, r0
 80017b8:	9301      	str	r3, [sp, #4]
 80017ba:	e7e7      	b.n	800178c <__sflush_r+0xe4>
 80017bc:	20400001 	.word	0x20400001

080017c0 <_fflush_r>:
 80017c0:	690b      	ldr	r3, [r1, #16]
 80017c2:	b570      	push	{r4, r5, r6, lr}
 80017c4:	0005      	movs	r5, r0
 80017c6:	000c      	movs	r4, r1
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d102      	bne.n	80017d2 <_fflush_r+0x12>
 80017cc:	2500      	movs	r5, #0
 80017ce:	0028      	movs	r0, r5
 80017d0:	bd70      	pop	{r4, r5, r6, pc}
 80017d2:	2800      	cmp	r0, #0
 80017d4:	d004      	beq.n	80017e0 <_fflush_r+0x20>
 80017d6:	6983      	ldr	r3, [r0, #24]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <_fflush_r+0x20>
 80017dc:	f000 f892 	bl	8001904 <__sinit>
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <_fflush_r+0x74>)
 80017e2:	429c      	cmp	r4, r3
 80017e4:	d11b      	bne.n	800181e <_fflush_r+0x5e>
 80017e6:	686c      	ldr	r4, [r5, #4]
 80017e8:	220c      	movs	r2, #12
 80017ea:	5ea3      	ldrsh	r3, [r4, r2]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0ed      	beq.n	80017cc <_fflush_r+0xc>
 80017f0:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80017f2:	07d2      	lsls	r2, r2, #31
 80017f4:	d404      	bmi.n	8001800 <_fflush_r+0x40>
 80017f6:	059b      	lsls	r3, r3, #22
 80017f8:	d402      	bmi.n	8001800 <_fflush_r+0x40>
 80017fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80017fc:	f000 f923 	bl	8001a46 <__retarget_lock_acquire_recursive>
 8001800:	0028      	movs	r0, r5
 8001802:	0021      	movs	r1, r4
 8001804:	f7ff ff50 	bl	80016a8 <__sflush_r>
 8001808:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800180a:	0005      	movs	r5, r0
 800180c:	07db      	lsls	r3, r3, #31
 800180e:	d4de      	bmi.n	80017ce <_fflush_r+0xe>
 8001810:	89a3      	ldrh	r3, [r4, #12]
 8001812:	059b      	lsls	r3, r3, #22
 8001814:	d4db      	bmi.n	80017ce <_fflush_r+0xe>
 8001816:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001818:	f000 f916 	bl	8001a48 <__retarget_lock_release_recursive>
 800181c:	e7d7      	b.n	80017ce <_fflush_r+0xe>
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <_fflush_r+0x78>)
 8001820:	429c      	cmp	r4, r3
 8001822:	d101      	bne.n	8001828 <_fflush_r+0x68>
 8001824:	68ac      	ldr	r4, [r5, #8]
 8001826:	e7df      	b.n	80017e8 <_fflush_r+0x28>
 8001828:	4b04      	ldr	r3, [pc, #16]	; (800183c <_fflush_r+0x7c>)
 800182a:	429c      	cmp	r4, r3
 800182c:	d1dc      	bne.n	80017e8 <_fflush_r+0x28>
 800182e:	68ec      	ldr	r4, [r5, #12]
 8001830:	e7da      	b.n	80017e8 <_fflush_r+0x28>
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	080029e4 	.word	0x080029e4
 8001838:	08002a04 	.word	0x08002a04
 800183c:	080029c4 	.word	0x080029c4

08001840 <std>:
 8001840:	2300      	movs	r3, #0
 8001842:	b510      	push	{r4, lr}
 8001844:	0004      	movs	r4, r0
 8001846:	6003      	str	r3, [r0, #0]
 8001848:	6043      	str	r3, [r0, #4]
 800184a:	6083      	str	r3, [r0, #8]
 800184c:	8181      	strh	r1, [r0, #12]
 800184e:	6643      	str	r3, [r0, #100]	; 0x64
 8001850:	0019      	movs	r1, r3
 8001852:	81c2      	strh	r2, [r0, #14]
 8001854:	6103      	str	r3, [r0, #16]
 8001856:	6143      	str	r3, [r0, #20]
 8001858:	6183      	str	r3, [r0, #24]
 800185a:	2208      	movs	r2, #8
 800185c:	305c      	adds	r0, #92	; 0x5c
 800185e:	f7ff fdb7 	bl	80013d0 <memset>
 8001862:	4b05      	ldr	r3, [pc, #20]	; (8001878 <std+0x38>)
 8001864:	6263      	str	r3, [r4, #36]	; 0x24
 8001866:	4b05      	ldr	r3, [pc, #20]	; (800187c <std+0x3c>)
 8001868:	6224      	str	r4, [r4, #32]
 800186a:	62a3      	str	r3, [r4, #40]	; 0x28
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <std+0x40>)
 800186e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001870:	4b04      	ldr	r3, [pc, #16]	; (8001884 <std+0x44>)
 8001872:	6323      	str	r3, [r4, #48]	; 0x30
 8001874:	bd10      	pop	{r4, pc}
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	08002261 	.word	0x08002261
 800187c:	08002289 	.word	0x08002289
 8001880:	080022c1 	.word	0x080022c1
 8001884:	080022ed 	.word	0x080022ed

08001888 <_cleanup_r>:
 8001888:	b510      	push	{r4, lr}
 800188a:	4902      	ldr	r1, [pc, #8]	; (8001894 <_cleanup_r+0xc>)
 800188c:	f000 f8ba 	bl	8001a04 <_fwalk_reent>
 8001890:	bd10      	pop	{r4, pc}
 8001892:	46c0      	nop			; (mov r8, r8)
 8001894:	080017c1 	.word	0x080017c1

08001898 <__sfmoreglue>:
 8001898:	b570      	push	{r4, r5, r6, lr}
 800189a:	2568      	movs	r5, #104	; 0x68
 800189c:	1e4a      	subs	r2, r1, #1
 800189e:	4355      	muls	r5, r2
 80018a0:	000e      	movs	r6, r1
 80018a2:	0029      	movs	r1, r5
 80018a4:	3174      	adds	r1, #116	; 0x74
 80018a6:	f000 f987 	bl	8001bb8 <_malloc_r>
 80018aa:	1e04      	subs	r4, r0, #0
 80018ac:	d008      	beq.n	80018c0 <__sfmoreglue+0x28>
 80018ae:	2100      	movs	r1, #0
 80018b0:	002a      	movs	r2, r5
 80018b2:	6001      	str	r1, [r0, #0]
 80018b4:	6046      	str	r6, [r0, #4]
 80018b6:	300c      	adds	r0, #12
 80018b8:	60a0      	str	r0, [r4, #8]
 80018ba:	3268      	adds	r2, #104	; 0x68
 80018bc:	f7ff fd88 	bl	80013d0 <memset>
 80018c0:	0020      	movs	r0, r4
 80018c2:	bd70      	pop	{r4, r5, r6, pc}

080018c4 <__sfp_lock_acquire>:
 80018c4:	b510      	push	{r4, lr}
 80018c6:	4802      	ldr	r0, [pc, #8]	; (80018d0 <__sfp_lock_acquire+0xc>)
 80018c8:	f000 f8bd 	bl	8001a46 <__retarget_lock_acquire_recursive>
 80018cc:	bd10      	pop	{r4, pc}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	2000015c 	.word	0x2000015c

080018d4 <__sfp_lock_release>:
 80018d4:	b510      	push	{r4, lr}
 80018d6:	4802      	ldr	r0, [pc, #8]	; (80018e0 <__sfp_lock_release+0xc>)
 80018d8:	f000 f8b6 	bl	8001a48 <__retarget_lock_release_recursive>
 80018dc:	bd10      	pop	{r4, pc}
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	2000015c 	.word	0x2000015c

080018e4 <__sinit_lock_acquire>:
 80018e4:	b510      	push	{r4, lr}
 80018e6:	4802      	ldr	r0, [pc, #8]	; (80018f0 <__sinit_lock_acquire+0xc>)
 80018e8:	f000 f8ad 	bl	8001a46 <__retarget_lock_acquire_recursive>
 80018ec:	bd10      	pop	{r4, pc}
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	20000157 	.word	0x20000157

080018f4 <__sinit_lock_release>:
 80018f4:	b510      	push	{r4, lr}
 80018f6:	4802      	ldr	r0, [pc, #8]	; (8001900 <__sinit_lock_release+0xc>)
 80018f8:	f000 f8a6 	bl	8001a48 <__retarget_lock_release_recursive>
 80018fc:	bd10      	pop	{r4, pc}
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	20000157 	.word	0x20000157

08001904 <__sinit>:
 8001904:	b513      	push	{r0, r1, r4, lr}
 8001906:	0004      	movs	r4, r0
 8001908:	f7ff ffec 	bl	80018e4 <__sinit_lock_acquire>
 800190c:	69a3      	ldr	r3, [r4, #24]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d002      	beq.n	8001918 <__sinit+0x14>
 8001912:	f7ff ffef 	bl	80018f4 <__sinit_lock_release>
 8001916:	bd13      	pop	{r0, r1, r4, pc}
 8001918:	64a3      	str	r3, [r4, #72]	; 0x48
 800191a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800191c:	6523      	str	r3, [r4, #80]	; 0x50
 800191e:	4b13      	ldr	r3, [pc, #76]	; (800196c <__sinit+0x68>)
 8001920:	4a13      	ldr	r2, [pc, #76]	; (8001970 <__sinit+0x6c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	62a2      	str	r2, [r4, #40]	; 0x28
 8001926:	9301      	str	r3, [sp, #4]
 8001928:	42a3      	cmp	r3, r4
 800192a:	d101      	bne.n	8001930 <__sinit+0x2c>
 800192c:	2301      	movs	r3, #1
 800192e:	61a3      	str	r3, [r4, #24]
 8001930:	0020      	movs	r0, r4
 8001932:	f000 f81f 	bl	8001974 <__sfp>
 8001936:	6060      	str	r0, [r4, #4]
 8001938:	0020      	movs	r0, r4
 800193a:	f000 f81b 	bl	8001974 <__sfp>
 800193e:	60a0      	str	r0, [r4, #8]
 8001940:	0020      	movs	r0, r4
 8001942:	f000 f817 	bl	8001974 <__sfp>
 8001946:	2200      	movs	r2, #0
 8001948:	2104      	movs	r1, #4
 800194a:	60e0      	str	r0, [r4, #12]
 800194c:	6860      	ldr	r0, [r4, #4]
 800194e:	f7ff ff77 	bl	8001840 <std>
 8001952:	2201      	movs	r2, #1
 8001954:	2109      	movs	r1, #9
 8001956:	68a0      	ldr	r0, [r4, #8]
 8001958:	f7ff ff72 	bl	8001840 <std>
 800195c:	2202      	movs	r2, #2
 800195e:	2112      	movs	r1, #18
 8001960:	68e0      	ldr	r0, [r4, #12]
 8001962:	f7ff ff6d 	bl	8001840 <std>
 8001966:	2301      	movs	r3, #1
 8001968:	61a3      	str	r3, [r4, #24]
 800196a:	e7d2      	b.n	8001912 <__sinit+0xe>
 800196c:	080029c0 	.word	0x080029c0
 8001970:	08001889 	.word	0x08001889

08001974 <__sfp>:
 8001974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001976:	0007      	movs	r7, r0
 8001978:	f7ff ffa4 	bl	80018c4 <__sfp_lock_acquire>
 800197c:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <__sfp+0x88>)
 800197e:	681e      	ldr	r6, [r3, #0]
 8001980:	69b3      	ldr	r3, [r6, #24]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d102      	bne.n	800198c <__sfp+0x18>
 8001986:	0030      	movs	r0, r6
 8001988:	f7ff ffbc 	bl	8001904 <__sinit>
 800198c:	3648      	adds	r6, #72	; 0x48
 800198e:	68b4      	ldr	r4, [r6, #8]
 8001990:	6873      	ldr	r3, [r6, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	d504      	bpl.n	80019a0 <__sfp+0x2c>
 8001996:	6833      	ldr	r3, [r6, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d022      	beq.n	80019e2 <__sfp+0x6e>
 800199c:	6836      	ldr	r6, [r6, #0]
 800199e:	e7f6      	b.n	800198e <__sfp+0x1a>
 80019a0:	220c      	movs	r2, #12
 80019a2:	5ea5      	ldrsh	r5, [r4, r2]
 80019a4:	2d00      	cmp	r5, #0
 80019a6:	d11a      	bne.n	80019de <__sfp+0x6a>
 80019a8:	0020      	movs	r0, r4
 80019aa:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <__sfp+0x8c>)
 80019ac:	3058      	adds	r0, #88	; 0x58
 80019ae:	60e3      	str	r3, [r4, #12]
 80019b0:	6665      	str	r5, [r4, #100]	; 0x64
 80019b2:	f000 f847 	bl	8001a44 <__retarget_lock_init_recursive>
 80019b6:	f7ff ff8d 	bl	80018d4 <__sfp_lock_release>
 80019ba:	0020      	movs	r0, r4
 80019bc:	2208      	movs	r2, #8
 80019be:	0029      	movs	r1, r5
 80019c0:	6025      	str	r5, [r4, #0]
 80019c2:	60a5      	str	r5, [r4, #8]
 80019c4:	6065      	str	r5, [r4, #4]
 80019c6:	6125      	str	r5, [r4, #16]
 80019c8:	6165      	str	r5, [r4, #20]
 80019ca:	61a5      	str	r5, [r4, #24]
 80019cc:	305c      	adds	r0, #92	; 0x5c
 80019ce:	f7ff fcff 	bl	80013d0 <memset>
 80019d2:	6365      	str	r5, [r4, #52]	; 0x34
 80019d4:	63a5      	str	r5, [r4, #56]	; 0x38
 80019d6:	64a5      	str	r5, [r4, #72]	; 0x48
 80019d8:	64e5      	str	r5, [r4, #76]	; 0x4c
 80019da:	0020      	movs	r0, r4
 80019dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019de:	3468      	adds	r4, #104	; 0x68
 80019e0:	e7d7      	b.n	8001992 <__sfp+0x1e>
 80019e2:	2104      	movs	r1, #4
 80019e4:	0038      	movs	r0, r7
 80019e6:	f7ff ff57 	bl	8001898 <__sfmoreglue>
 80019ea:	1e04      	subs	r4, r0, #0
 80019ec:	6030      	str	r0, [r6, #0]
 80019ee:	d1d5      	bne.n	800199c <__sfp+0x28>
 80019f0:	f7ff ff70 	bl	80018d4 <__sfp_lock_release>
 80019f4:	230c      	movs	r3, #12
 80019f6:	603b      	str	r3, [r7, #0]
 80019f8:	e7ef      	b.n	80019da <__sfp+0x66>
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	080029c0 	.word	0x080029c0
 8001a00:	ffff0001 	.word	0xffff0001

08001a04 <_fwalk_reent>:
 8001a04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001a06:	0004      	movs	r4, r0
 8001a08:	0006      	movs	r6, r0
 8001a0a:	2700      	movs	r7, #0
 8001a0c:	9101      	str	r1, [sp, #4]
 8001a0e:	3448      	adds	r4, #72	; 0x48
 8001a10:	6863      	ldr	r3, [r4, #4]
 8001a12:	68a5      	ldr	r5, [r4, #8]
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	9b00      	ldr	r3, [sp, #0]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	d504      	bpl.n	8001a28 <_fwalk_reent+0x24>
 8001a1e:	6824      	ldr	r4, [r4, #0]
 8001a20:	2c00      	cmp	r4, #0
 8001a22:	d1f5      	bne.n	8001a10 <_fwalk_reent+0xc>
 8001a24:	0038      	movs	r0, r7
 8001a26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001a28:	89ab      	ldrh	r3, [r5, #12]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d908      	bls.n	8001a40 <_fwalk_reent+0x3c>
 8001a2e:	220e      	movs	r2, #14
 8001a30:	5eab      	ldrsh	r3, [r5, r2]
 8001a32:	3301      	adds	r3, #1
 8001a34:	d004      	beq.n	8001a40 <_fwalk_reent+0x3c>
 8001a36:	0029      	movs	r1, r5
 8001a38:	0030      	movs	r0, r6
 8001a3a:	9b01      	ldr	r3, [sp, #4]
 8001a3c:	4798      	blx	r3
 8001a3e:	4307      	orrs	r7, r0
 8001a40:	3568      	adds	r5, #104	; 0x68
 8001a42:	e7e8      	b.n	8001a16 <_fwalk_reent+0x12>

08001a44 <__retarget_lock_init_recursive>:
 8001a44:	4770      	bx	lr

08001a46 <__retarget_lock_acquire_recursive>:
 8001a46:	4770      	bx	lr

08001a48 <__retarget_lock_release_recursive>:
 8001a48:	4770      	bx	lr
	...

08001a4c <__swhatbuf_r>:
 8001a4c:	b570      	push	{r4, r5, r6, lr}
 8001a4e:	000e      	movs	r6, r1
 8001a50:	001d      	movs	r5, r3
 8001a52:	230e      	movs	r3, #14
 8001a54:	5ec9      	ldrsh	r1, [r1, r3]
 8001a56:	0014      	movs	r4, r2
 8001a58:	b096      	sub	sp, #88	; 0x58
 8001a5a:	2900      	cmp	r1, #0
 8001a5c:	da07      	bge.n	8001a6e <__swhatbuf_r+0x22>
 8001a5e:	2300      	movs	r3, #0
 8001a60:	602b      	str	r3, [r5, #0]
 8001a62:	89b3      	ldrh	r3, [r6, #12]
 8001a64:	061b      	lsls	r3, r3, #24
 8001a66:	d411      	bmi.n	8001a8c <__swhatbuf_r+0x40>
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	e00f      	b.n	8001a8e <__swhatbuf_r+0x42>
 8001a6e:	466a      	mov	r2, sp
 8001a70:	f000 fc68 	bl	8002344 <_fstat_r>
 8001a74:	2800      	cmp	r0, #0
 8001a76:	dbf2      	blt.n	8001a5e <__swhatbuf_r+0x12>
 8001a78:	23f0      	movs	r3, #240	; 0xf0
 8001a7a:	9901      	ldr	r1, [sp, #4]
 8001a7c:	021b      	lsls	r3, r3, #8
 8001a7e:	4019      	ands	r1, r3
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <__swhatbuf_r+0x4c>)
 8001a82:	18c9      	adds	r1, r1, r3
 8001a84:	424b      	negs	r3, r1
 8001a86:	4159      	adcs	r1, r3
 8001a88:	6029      	str	r1, [r5, #0]
 8001a8a:	e7ed      	b.n	8001a68 <__swhatbuf_r+0x1c>
 8001a8c:	2340      	movs	r3, #64	; 0x40
 8001a8e:	2000      	movs	r0, #0
 8001a90:	6023      	str	r3, [r4, #0]
 8001a92:	b016      	add	sp, #88	; 0x58
 8001a94:	bd70      	pop	{r4, r5, r6, pc}
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	ffffe000 	.word	0xffffe000

08001a9c <__smakebuf_r>:
 8001a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001a9e:	2602      	movs	r6, #2
 8001aa0:	898b      	ldrh	r3, [r1, #12]
 8001aa2:	0005      	movs	r5, r0
 8001aa4:	000c      	movs	r4, r1
 8001aa6:	4233      	tst	r3, r6
 8001aa8:	d006      	beq.n	8001ab8 <__smakebuf_r+0x1c>
 8001aaa:	0023      	movs	r3, r4
 8001aac:	3347      	adds	r3, #71	; 0x47
 8001aae:	6023      	str	r3, [r4, #0]
 8001ab0:	6123      	str	r3, [r4, #16]
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	6163      	str	r3, [r4, #20]
 8001ab6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001ab8:	466a      	mov	r2, sp
 8001aba:	ab01      	add	r3, sp, #4
 8001abc:	f7ff ffc6 	bl	8001a4c <__swhatbuf_r>
 8001ac0:	9900      	ldr	r1, [sp, #0]
 8001ac2:	0007      	movs	r7, r0
 8001ac4:	0028      	movs	r0, r5
 8001ac6:	f000 f877 	bl	8001bb8 <_malloc_r>
 8001aca:	2800      	cmp	r0, #0
 8001acc:	d108      	bne.n	8001ae0 <__smakebuf_r+0x44>
 8001ace:	220c      	movs	r2, #12
 8001ad0:	5ea3      	ldrsh	r3, [r4, r2]
 8001ad2:	059a      	lsls	r2, r3, #22
 8001ad4:	d4ef      	bmi.n	8001ab6 <__smakebuf_r+0x1a>
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	4393      	bics	r3, r2
 8001ada:	431e      	orrs	r6, r3
 8001adc:	81a6      	strh	r6, [r4, #12]
 8001ade:	e7e4      	b.n	8001aaa <__smakebuf_r+0xe>
 8001ae0:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <__smakebuf_r+0x84>)
 8001ae2:	62ab      	str	r3, [r5, #40]	; 0x28
 8001ae4:	2380      	movs	r3, #128	; 0x80
 8001ae6:	89a2      	ldrh	r2, [r4, #12]
 8001ae8:	6020      	str	r0, [r4, #0]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	81a3      	strh	r3, [r4, #12]
 8001aee:	9b00      	ldr	r3, [sp, #0]
 8001af0:	6120      	str	r0, [r4, #16]
 8001af2:	6163      	str	r3, [r4, #20]
 8001af4:	9b01      	ldr	r3, [sp, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00d      	beq.n	8001b16 <__smakebuf_r+0x7a>
 8001afa:	0028      	movs	r0, r5
 8001afc:	230e      	movs	r3, #14
 8001afe:	5ee1      	ldrsh	r1, [r4, r3]
 8001b00:	f000 fc32 	bl	8002368 <_isatty_r>
 8001b04:	2800      	cmp	r0, #0
 8001b06:	d006      	beq.n	8001b16 <__smakebuf_r+0x7a>
 8001b08:	2203      	movs	r2, #3
 8001b0a:	89a3      	ldrh	r3, [r4, #12]
 8001b0c:	4393      	bics	r3, r2
 8001b0e:	001a      	movs	r2, r3
 8001b10:	2301      	movs	r3, #1
 8001b12:	4313      	orrs	r3, r2
 8001b14:	81a3      	strh	r3, [r4, #12]
 8001b16:	89a0      	ldrh	r0, [r4, #12]
 8001b18:	4307      	orrs	r7, r0
 8001b1a:	81a7      	strh	r7, [r4, #12]
 8001b1c:	e7cb      	b.n	8001ab6 <__smakebuf_r+0x1a>
 8001b1e:	46c0      	nop			; (mov r8, r8)
 8001b20:	08001889 	.word	0x08001889

08001b24 <_free_r>:
 8001b24:	b570      	push	{r4, r5, r6, lr}
 8001b26:	0005      	movs	r5, r0
 8001b28:	2900      	cmp	r1, #0
 8001b2a:	d010      	beq.n	8001b4e <_free_r+0x2a>
 8001b2c:	1f0c      	subs	r4, r1, #4
 8001b2e:	6823      	ldr	r3, [r4, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	da00      	bge.n	8001b36 <_free_r+0x12>
 8001b34:	18e4      	adds	r4, r4, r3
 8001b36:	0028      	movs	r0, r5
 8001b38:	f000 fc48 	bl	80023cc <__malloc_lock>
 8001b3c:	4a1d      	ldr	r2, [pc, #116]	; (8001bb4 <_free_r+0x90>)
 8001b3e:	6813      	ldr	r3, [r2, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d105      	bne.n	8001b50 <_free_r+0x2c>
 8001b44:	6063      	str	r3, [r4, #4]
 8001b46:	6014      	str	r4, [r2, #0]
 8001b48:	0028      	movs	r0, r5
 8001b4a:	f000 fc47 	bl	80023dc <__malloc_unlock>
 8001b4e:	bd70      	pop	{r4, r5, r6, pc}
 8001b50:	42a3      	cmp	r3, r4
 8001b52:	d908      	bls.n	8001b66 <_free_r+0x42>
 8001b54:	6821      	ldr	r1, [r4, #0]
 8001b56:	1860      	adds	r0, r4, r1
 8001b58:	4283      	cmp	r3, r0
 8001b5a:	d1f3      	bne.n	8001b44 <_free_r+0x20>
 8001b5c:	6818      	ldr	r0, [r3, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	1841      	adds	r1, r0, r1
 8001b62:	6021      	str	r1, [r4, #0]
 8001b64:	e7ee      	b.n	8001b44 <_free_r+0x20>
 8001b66:	001a      	movs	r2, r3
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <_free_r+0x4e>
 8001b6e:	42a3      	cmp	r3, r4
 8001b70:	d9f9      	bls.n	8001b66 <_free_r+0x42>
 8001b72:	6811      	ldr	r1, [r2, #0]
 8001b74:	1850      	adds	r0, r2, r1
 8001b76:	42a0      	cmp	r0, r4
 8001b78:	d10b      	bne.n	8001b92 <_free_r+0x6e>
 8001b7a:	6820      	ldr	r0, [r4, #0]
 8001b7c:	1809      	adds	r1, r1, r0
 8001b7e:	1850      	adds	r0, r2, r1
 8001b80:	6011      	str	r1, [r2, #0]
 8001b82:	4283      	cmp	r3, r0
 8001b84:	d1e0      	bne.n	8001b48 <_free_r+0x24>
 8001b86:	6818      	ldr	r0, [r3, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	1841      	adds	r1, r0, r1
 8001b8c:	6011      	str	r1, [r2, #0]
 8001b8e:	6053      	str	r3, [r2, #4]
 8001b90:	e7da      	b.n	8001b48 <_free_r+0x24>
 8001b92:	42a0      	cmp	r0, r4
 8001b94:	d902      	bls.n	8001b9c <_free_r+0x78>
 8001b96:	230c      	movs	r3, #12
 8001b98:	602b      	str	r3, [r5, #0]
 8001b9a:	e7d5      	b.n	8001b48 <_free_r+0x24>
 8001b9c:	6821      	ldr	r1, [r4, #0]
 8001b9e:	1860      	adds	r0, r4, r1
 8001ba0:	4283      	cmp	r3, r0
 8001ba2:	d103      	bne.n	8001bac <_free_r+0x88>
 8001ba4:	6818      	ldr	r0, [r3, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	1841      	adds	r1, r0, r1
 8001baa:	6021      	str	r1, [r4, #0]
 8001bac:	6063      	str	r3, [r4, #4]
 8001bae:	6054      	str	r4, [r2, #4]
 8001bb0:	e7ca      	b.n	8001b48 <_free_r+0x24>
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	2000009c 	.word	0x2000009c

08001bb8 <_malloc_r>:
 8001bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bba:	2303      	movs	r3, #3
 8001bbc:	1ccd      	adds	r5, r1, #3
 8001bbe:	439d      	bics	r5, r3
 8001bc0:	3508      	adds	r5, #8
 8001bc2:	0006      	movs	r6, r0
 8001bc4:	2d0c      	cmp	r5, #12
 8001bc6:	d21f      	bcs.n	8001c08 <_malloc_r+0x50>
 8001bc8:	250c      	movs	r5, #12
 8001bca:	42a9      	cmp	r1, r5
 8001bcc:	d81e      	bhi.n	8001c0c <_malloc_r+0x54>
 8001bce:	0030      	movs	r0, r6
 8001bd0:	f000 fbfc 	bl	80023cc <__malloc_lock>
 8001bd4:	4925      	ldr	r1, [pc, #148]	; (8001c6c <_malloc_r+0xb4>)
 8001bd6:	680a      	ldr	r2, [r1, #0]
 8001bd8:	0014      	movs	r4, r2
 8001bda:	2c00      	cmp	r4, #0
 8001bdc:	d11a      	bne.n	8001c14 <_malloc_r+0x5c>
 8001bde:	4f24      	ldr	r7, [pc, #144]	; (8001c70 <_malloc_r+0xb8>)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d104      	bne.n	8001bf0 <_malloc_r+0x38>
 8001be6:	0021      	movs	r1, r4
 8001be8:	0030      	movs	r0, r6
 8001bea:	f000 fb27 	bl	800223c <_sbrk_r>
 8001bee:	6038      	str	r0, [r7, #0]
 8001bf0:	0029      	movs	r1, r5
 8001bf2:	0030      	movs	r0, r6
 8001bf4:	f000 fb22 	bl	800223c <_sbrk_r>
 8001bf8:	1c43      	adds	r3, r0, #1
 8001bfa:	d12b      	bne.n	8001c54 <_malloc_r+0x9c>
 8001bfc:	230c      	movs	r3, #12
 8001bfe:	0030      	movs	r0, r6
 8001c00:	6033      	str	r3, [r6, #0]
 8001c02:	f000 fbeb 	bl	80023dc <__malloc_unlock>
 8001c06:	e003      	b.n	8001c10 <_malloc_r+0x58>
 8001c08:	2d00      	cmp	r5, #0
 8001c0a:	dade      	bge.n	8001bca <_malloc_r+0x12>
 8001c0c:	230c      	movs	r3, #12
 8001c0e:	6033      	str	r3, [r6, #0]
 8001c10:	2000      	movs	r0, #0
 8001c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c14:	6823      	ldr	r3, [r4, #0]
 8001c16:	1b5b      	subs	r3, r3, r5
 8001c18:	d419      	bmi.n	8001c4e <_malloc_r+0x96>
 8001c1a:	2b0b      	cmp	r3, #11
 8001c1c:	d903      	bls.n	8001c26 <_malloc_r+0x6e>
 8001c1e:	6023      	str	r3, [r4, #0]
 8001c20:	18e4      	adds	r4, r4, r3
 8001c22:	6025      	str	r5, [r4, #0]
 8001c24:	e003      	b.n	8001c2e <_malloc_r+0x76>
 8001c26:	6863      	ldr	r3, [r4, #4]
 8001c28:	42a2      	cmp	r2, r4
 8001c2a:	d10e      	bne.n	8001c4a <_malloc_r+0x92>
 8001c2c:	600b      	str	r3, [r1, #0]
 8001c2e:	0030      	movs	r0, r6
 8001c30:	f000 fbd4 	bl	80023dc <__malloc_unlock>
 8001c34:	0020      	movs	r0, r4
 8001c36:	2207      	movs	r2, #7
 8001c38:	300b      	adds	r0, #11
 8001c3a:	1d23      	adds	r3, r4, #4
 8001c3c:	4390      	bics	r0, r2
 8001c3e:	1ac2      	subs	r2, r0, r3
 8001c40:	4298      	cmp	r0, r3
 8001c42:	d0e6      	beq.n	8001c12 <_malloc_r+0x5a>
 8001c44:	1a1b      	subs	r3, r3, r0
 8001c46:	50a3      	str	r3, [r4, r2]
 8001c48:	e7e3      	b.n	8001c12 <_malloc_r+0x5a>
 8001c4a:	6053      	str	r3, [r2, #4]
 8001c4c:	e7ef      	b.n	8001c2e <_malloc_r+0x76>
 8001c4e:	0022      	movs	r2, r4
 8001c50:	6864      	ldr	r4, [r4, #4]
 8001c52:	e7c2      	b.n	8001bda <_malloc_r+0x22>
 8001c54:	2303      	movs	r3, #3
 8001c56:	1cc4      	adds	r4, r0, #3
 8001c58:	439c      	bics	r4, r3
 8001c5a:	42a0      	cmp	r0, r4
 8001c5c:	d0e1      	beq.n	8001c22 <_malloc_r+0x6a>
 8001c5e:	1a21      	subs	r1, r4, r0
 8001c60:	0030      	movs	r0, r6
 8001c62:	f000 faeb 	bl	800223c <_sbrk_r>
 8001c66:	1c43      	adds	r3, r0, #1
 8001c68:	d1db      	bne.n	8001c22 <_malloc_r+0x6a>
 8001c6a:	e7c7      	b.n	8001bfc <_malloc_r+0x44>
 8001c6c:	2000009c 	.word	0x2000009c
 8001c70:	200000a0 	.word	0x200000a0

08001c74 <__sfputc_r>:
 8001c74:	6893      	ldr	r3, [r2, #8]
 8001c76:	b510      	push	{r4, lr}
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	6093      	str	r3, [r2, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	da04      	bge.n	8001c8a <__sfputc_r+0x16>
 8001c80:	6994      	ldr	r4, [r2, #24]
 8001c82:	42a3      	cmp	r3, r4
 8001c84:	db07      	blt.n	8001c96 <__sfputc_r+0x22>
 8001c86:	290a      	cmp	r1, #10
 8001c88:	d005      	beq.n	8001c96 <__sfputc_r+0x22>
 8001c8a:	6813      	ldr	r3, [r2, #0]
 8001c8c:	1c58      	adds	r0, r3, #1
 8001c8e:	6010      	str	r0, [r2, #0]
 8001c90:	7019      	strb	r1, [r3, #0]
 8001c92:	0008      	movs	r0, r1
 8001c94:	bd10      	pop	{r4, pc}
 8001c96:	f7ff fc39 	bl	800150c <__swbuf_r>
 8001c9a:	0001      	movs	r1, r0
 8001c9c:	e7f9      	b.n	8001c92 <__sfputc_r+0x1e>

08001c9e <__sfputs_r>:
 8001c9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ca0:	0006      	movs	r6, r0
 8001ca2:	000f      	movs	r7, r1
 8001ca4:	0014      	movs	r4, r2
 8001ca6:	18d5      	adds	r5, r2, r3
 8001ca8:	42ac      	cmp	r4, r5
 8001caa:	d101      	bne.n	8001cb0 <__sfputs_r+0x12>
 8001cac:	2000      	movs	r0, #0
 8001cae:	e007      	b.n	8001cc0 <__sfputs_r+0x22>
 8001cb0:	7821      	ldrb	r1, [r4, #0]
 8001cb2:	003a      	movs	r2, r7
 8001cb4:	0030      	movs	r0, r6
 8001cb6:	f7ff ffdd 	bl	8001c74 <__sfputc_r>
 8001cba:	3401      	adds	r4, #1
 8001cbc:	1c43      	adds	r3, r0, #1
 8001cbe:	d1f3      	bne.n	8001ca8 <__sfputs_r+0xa>
 8001cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001cc4 <_vfiprintf_r>:
 8001cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cc6:	b0a1      	sub	sp, #132	; 0x84
 8001cc8:	0006      	movs	r6, r0
 8001cca:	000c      	movs	r4, r1
 8001ccc:	001f      	movs	r7, r3
 8001cce:	9203      	str	r2, [sp, #12]
 8001cd0:	2800      	cmp	r0, #0
 8001cd2:	d004      	beq.n	8001cde <_vfiprintf_r+0x1a>
 8001cd4:	6983      	ldr	r3, [r0, #24]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <_vfiprintf_r+0x1a>
 8001cda:	f7ff fe13 	bl	8001904 <__sinit>
 8001cde:	4b8e      	ldr	r3, [pc, #568]	; (8001f18 <_vfiprintf_r+0x254>)
 8001ce0:	429c      	cmp	r4, r3
 8001ce2:	d11c      	bne.n	8001d1e <_vfiprintf_r+0x5a>
 8001ce4:	6874      	ldr	r4, [r6, #4]
 8001ce6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001ce8:	07db      	lsls	r3, r3, #31
 8001cea:	d405      	bmi.n	8001cf8 <_vfiprintf_r+0x34>
 8001cec:	89a3      	ldrh	r3, [r4, #12]
 8001cee:	059b      	lsls	r3, r3, #22
 8001cf0:	d402      	bmi.n	8001cf8 <_vfiprintf_r+0x34>
 8001cf2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001cf4:	f7ff fea7 	bl	8001a46 <__retarget_lock_acquire_recursive>
 8001cf8:	89a3      	ldrh	r3, [r4, #12]
 8001cfa:	071b      	lsls	r3, r3, #28
 8001cfc:	d502      	bpl.n	8001d04 <_vfiprintf_r+0x40>
 8001cfe:	6923      	ldr	r3, [r4, #16]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d11d      	bne.n	8001d40 <_vfiprintf_r+0x7c>
 8001d04:	0021      	movs	r1, r4
 8001d06:	0030      	movs	r0, r6
 8001d08:	f7ff fc56 	bl	80015b8 <__swsetup_r>
 8001d0c:	2800      	cmp	r0, #0
 8001d0e:	d017      	beq.n	8001d40 <_vfiprintf_r+0x7c>
 8001d10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001d12:	07db      	lsls	r3, r3, #31
 8001d14:	d50d      	bpl.n	8001d32 <_vfiprintf_r+0x6e>
 8001d16:	2001      	movs	r0, #1
 8001d18:	4240      	negs	r0, r0
 8001d1a:	b021      	add	sp, #132	; 0x84
 8001d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d1e:	4b7f      	ldr	r3, [pc, #508]	; (8001f1c <_vfiprintf_r+0x258>)
 8001d20:	429c      	cmp	r4, r3
 8001d22:	d101      	bne.n	8001d28 <_vfiprintf_r+0x64>
 8001d24:	68b4      	ldr	r4, [r6, #8]
 8001d26:	e7de      	b.n	8001ce6 <_vfiprintf_r+0x22>
 8001d28:	4b7d      	ldr	r3, [pc, #500]	; (8001f20 <_vfiprintf_r+0x25c>)
 8001d2a:	429c      	cmp	r4, r3
 8001d2c:	d1db      	bne.n	8001ce6 <_vfiprintf_r+0x22>
 8001d2e:	68f4      	ldr	r4, [r6, #12]
 8001d30:	e7d9      	b.n	8001ce6 <_vfiprintf_r+0x22>
 8001d32:	89a3      	ldrh	r3, [r4, #12]
 8001d34:	059b      	lsls	r3, r3, #22
 8001d36:	d4ee      	bmi.n	8001d16 <_vfiprintf_r+0x52>
 8001d38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d3a:	f7ff fe85 	bl	8001a48 <__retarget_lock_release_recursive>
 8001d3e:	e7ea      	b.n	8001d16 <_vfiprintf_r+0x52>
 8001d40:	2300      	movs	r3, #0
 8001d42:	ad08      	add	r5, sp, #32
 8001d44:	616b      	str	r3, [r5, #20]
 8001d46:	3320      	adds	r3, #32
 8001d48:	766b      	strb	r3, [r5, #25]
 8001d4a:	3310      	adds	r3, #16
 8001d4c:	76ab      	strb	r3, [r5, #26]
 8001d4e:	9707      	str	r7, [sp, #28]
 8001d50:	9f03      	ldr	r7, [sp, #12]
 8001d52:	783b      	ldrb	r3, [r7, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <_vfiprintf_r+0x98>
 8001d58:	2b25      	cmp	r3, #37	; 0x25
 8001d5a:	d14e      	bne.n	8001dfa <_vfiprintf_r+0x136>
 8001d5c:	9b03      	ldr	r3, [sp, #12]
 8001d5e:	1afb      	subs	r3, r7, r3
 8001d60:	9305      	str	r3, [sp, #20]
 8001d62:	9b03      	ldr	r3, [sp, #12]
 8001d64:	429f      	cmp	r7, r3
 8001d66:	d00d      	beq.n	8001d84 <_vfiprintf_r+0xc0>
 8001d68:	9b05      	ldr	r3, [sp, #20]
 8001d6a:	0021      	movs	r1, r4
 8001d6c:	0030      	movs	r0, r6
 8001d6e:	9a03      	ldr	r2, [sp, #12]
 8001d70:	f7ff ff95 	bl	8001c9e <__sfputs_r>
 8001d74:	1c43      	adds	r3, r0, #1
 8001d76:	d100      	bne.n	8001d7a <_vfiprintf_r+0xb6>
 8001d78:	e0b5      	b.n	8001ee6 <_vfiprintf_r+0x222>
 8001d7a:	696a      	ldr	r2, [r5, #20]
 8001d7c:	9b05      	ldr	r3, [sp, #20]
 8001d7e:	4694      	mov	ip, r2
 8001d80:	4463      	add	r3, ip
 8001d82:	616b      	str	r3, [r5, #20]
 8001d84:	783b      	ldrb	r3, [r7, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d100      	bne.n	8001d8c <_vfiprintf_r+0xc8>
 8001d8a:	e0ac      	b.n	8001ee6 <_vfiprintf_r+0x222>
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	1c7b      	adds	r3, r7, #1
 8001d90:	9303      	str	r3, [sp, #12]
 8001d92:	2300      	movs	r3, #0
 8001d94:	4252      	negs	r2, r2
 8001d96:	606a      	str	r2, [r5, #4]
 8001d98:	a904      	add	r1, sp, #16
 8001d9a:	3254      	adds	r2, #84	; 0x54
 8001d9c:	1852      	adds	r2, r2, r1
 8001d9e:	602b      	str	r3, [r5, #0]
 8001da0:	60eb      	str	r3, [r5, #12]
 8001da2:	60ab      	str	r3, [r5, #8]
 8001da4:	7013      	strb	r3, [r2, #0]
 8001da6:	65ab      	str	r3, [r5, #88]	; 0x58
 8001da8:	9b03      	ldr	r3, [sp, #12]
 8001daa:	2205      	movs	r2, #5
 8001dac:	7819      	ldrb	r1, [r3, #0]
 8001dae:	485d      	ldr	r0, [pc, #372]	; (8001f24 <_vfiprintf_r+0x260>)
 8001db0:	f000 fb00 	bl	80023b4 <memchr>
 8001db4:	9b03      	ldr	r3, [sp, #12]
 8001db6:	1c5f      	adds	r7, r3, #1
 8001db8:	2800      	cmp	r0, #0
 8001dba:	d120      	bne.n	8001dfe <_vfiprintf_r+0x13a>
 8001dbc:	682a      	ldr	r2, [r5, #0]
 8001dbe:	06d3      	lsls	r3, r2, #27
 8001dc0:	d504      	bpl.n	8001dcc <_vfiprintf_r+0x108>
 8001dc2:	2353      	movs	r3, #83	; 0x53
 8001dc4:	a904      	add	r1, sp, #16
 8001dc6:	185b      	adds	r3, r3, r1
 8001dc8:	2120      	movs	r1, #32
 8001dca:	7019      	strb	r1, [r3, #0]
 8001dcc:	0713      	lsls	r3, r2, #28
 8001dce:	d504      	bpl.n	8001dda <_vfiprintf_r+0x116>
 8001dd0:	2353      	movs	r3, #83	; 0x53
 8001dd2:	a904      	add	r1, sp, #16
 8001dd4:	185b      	adds	r3, r3, r1
 8001dd6:	212b      	movs	r1, #43	; 0x2b
 8001dd8:	7019      	strb	r1, [r3, #0]
 8001dda:	9b03      	ldr	r3, [sp, #12]
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b2a      	cmp	r3, #42	; 0x2a
 8001de0:	d016      	beq.n	8001e10 <_vfiprintf_r+0x14c>
 8001de2:	2100      	movs	r1, #0
 8001de4:	68eb      	ldr	r3, [r5, #12]
 8001de6:	9f03      	ldr	r7, [sp, #12]
 8001de8:	783a      	ldrb	r2, [r7, #0]
 8001dea:	1c78      	adds	r0, r7, #1
 8001dec:	3a30      	subs	r2, #48	; 0x30
 8001dee:	4684      	mov	ip, r0
 8001df0:	2a09      	cmp	r2, #9
 8001df2:	d94f      	bls.n	8001e94 <_vfiprintf_r+0x1d0>
 8001df4:	2900      	cmp	r1, #0
 8001df6:	d111      	bne.n	8001e1c <_vfiprintf_r+0x158>
 8001df8:	e017      	b.n	8001e2a <_vfiprintf_r+0x166>
 8001dfa:	3701      	adds	r7, #1
 8001dfc:	e7a9      	b.n	8001d52 <_vfiprintf_r+0x8e>
 8001dfe:	4b49      	ldr	r3, [pc, #292]	; (8001f24 <_vfiprintf_r+0x260>)
 8001e00:	682a      	ldr	r2, [r5, #0]
 8001e02:	1ac0      	subs	r0, r0, r3
 8001e04:	2301      	movs	r3, #1
 8001e06:	4083      	lsls	r3, r0
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	602b      	str	r3, [r5, #0]
 8001e0c:	9703      	str	r7, [sp, #12]
 8001e0e:	e7cb      	b.n	8001da8 <_vfiprintf_r+0xe4>
 8001e10:	9b07      	ldr	r3, [sp, #28]
 8001e12:	1d19      	adds	r1, r3, #4
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	9107      	str	r1, [sp, #28]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	db01      	blt.n	8001e20 <_vfiprintf_r+0x15c>
 8001e1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8001e1e:	e004      	b.n	8001e2a <_vfiprintf_r+0x166>
 8001e20:	425b      	negs	r3, r3
 8001e22:	60eb      	str	r3, [r5, #12]
 8001e24:	2302      	movs	r3, #2
 8001e26:	4313      	orrs	r3, r2
 8001e28:	602b      	str	r3, [r5, #0]
 8001e2a:	783b      	ldrb	r3, [r7, #0]
 8001e2c:	2b2e      	cmp	r3, #46	; 0x2e
 8001e2e:	d10a      	bne.n	8001e46 <_vfiprintf_r+0x182>
 8001e30:	787b      	ldrb	r3, [r7, #1]
 8001e32:	2b2a      	cmp	r3, #42	; 0x2a
 8001e34:	d137      	bne.n	8001ea6 <_vfiprintf_r+0x1e2>
 8001e36:	9b07      	ldr	r3, [sp, #28]
 8001e38:	3702      	adds	r7, #2
 8001e3a:	1d1a      	adds	r2, r3, #4
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	9207      	str	r2, [sp, #28]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	db2d      	blt.n	8001ea0 <_vfiprintf_r+0x1dc>
 8001e44:	9309      	str	r3, [sp, #36]	; 0x24
 8001e46:	2203      	movs	r2, #3
 8001e48:	7839      	ldrb	r1, [r7, #0]
 8001e4a:	4837      	ldr	r0, [pc, #220]	; (8001f28 <_vfiprintf_r+0x264>)
 8001e4c:	f000 fab2 	bl	80023b4 <memchr>
 8001e50:	2800      	cmp	r0, #0
 8001e52:	d007      	beq.n	8001e64 <_vfiprintf_r+0x1a0>
 8001e54:	4b34      	ldr	r3, [pc, #208]	; (8001f28 <_vfiprintf_r+0x264>)
 8001e56:	682a      	ldr	r2, [r5, #0]
 8001e58:	1ac0      	subs	r0, r0, r3
 8001e5a:	2340      	movs	r3, #64	; 0x40
 8001e5c:	4083      	lsls	r3, r0
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	3701      	adds	r7, #1
 8001e62:	602b      	str	r3, [r5, #0]
 8001e64:	7839      	ldrb	r1, [r7, #0]
 8001e66:	1c7b      	adds	r3, r7, #1
 8001e68:	2206      	movs	r2, #6
 8001e6a:	4830      	ldr	r0, [pc, #192]	; (8001f2c <_vfiprintf_r+0x268>)
 8001e6c:	9303      	str	r3, [sp, #12]
 8001e6e:	7629      	strb	r1, [r5, #24]
 8001e70:	f000 faa0 	bl	80023b4 <memchr>
 8001e74:	2800      	cmp	r0, #0
 8001e76:	d045      	beq.n	8001f04 <_vfiprintf_r+0x240>
 8001e78:	4b2d      	ldr	r3, [pc, #180]	; (8001f30 <_vfiprintf_r+0x26c>)
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d127      	bne.n	8001ece <_vfiprintf_r+0x20a>
 8001e7e:	2207      	movs	r2, #7
 8001e80:	9b07      	ldr	r3, [sp, #28]
 8001e82:	3307      	adds	r3, #7
 8001e84:	4393      	bics	r3, r2
 8001e86:	3308      	adds	r3, #8
 8001e88:	9307      	str	r3, [sp, #28]
 8001e8a:	696b      	ldr	r3, [r5, #20]
 8001e8c:	9a04      	ldr	r2, [sp, #16]
 8001e8e:	189b      	adds	r3, r3, r2
 8001e90:	616b      	str	r3, [r5, #20]
 8001e92:	e75d      	b.n	8001d50 <_vfiprintf_r+0x8c>
 8001e94:	210a      	movs	r1, #10
 8001e96:	434b      	muls	r3, r1
 8001e98:	4667      	mov	r7, ip
 8001e9a:	189b      	adds	r3, r3, r2
 8001e9c:	3909      	subs	r1, #9
 8001e9e:	e7a3      	b.n	8001de8 <_vfiprintf_r+0x124>
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	425b      	negs	r3, r3
 8001ea4:	e7ce      	b.n	8001e44 <_vfiprintf_r+0x180>
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	001a      	movs	r2, r3
 8001eaa:	3701      	adds	r7, #1
 8001eac:	606b      	str	r3, [r5, #4]
 8001eae:	7839      	ldrb	r1, [r7, #0]
 8001eb0:	1c78      	adds	r0, r7, #1
 8001eb2:	3930      	subs	r1, #48	; 0x30
 8001eb4:	4684      	mov	ip, r0
 8001eb6:	2909      	cmp	r1, #9
 8001eb8:	d903      	bls.n	8001ec2 <_vfiprintf_r+0x1fe>
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0c3      	beq.n	8001e46 <_vfiprintf_r+0x182>
 8001ebe:	9209      	str	r2, [sp, #36]	; 0x24
 8001ec0:	e7c1      	b.n	8001e46 <_vfiprintf_r+0x182>
 8001ec2:	230a      	movs	r3, #10
 8001ec4:	435a      	muls	r2, r3
 8001ec6:	4667      	mov	r7, ip
 8001ec8:	1852      	adds	r2, r2, r1
 8001eca:	3b09      	subs	r3, #9
 8001ecc:	e7ef      	b.n	8001eae <_vfiprintf_r+0x1ea>
 8001ece:	ab07      	add	r3, sp, #28
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	0022      	movs	r2, r4
 8001ed4:	0029      	movs	r1, r5
 8001ed6:	0030      	movs	r0, r6
 8001ed8:	4b16      	ldr	r3, [pc, #88]	; (8001f34 <_vfiprintf_r+0x270>)
 8001eda:	e000      	b.n	8001ede <_vfiprintf_r+0x21a>
 8001edc:	bf00      	nop
 8001ede:	9004      	str	r0, [sp, #16]
 8001ee0:	9b04      	ldr	r3, [sp, #16]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	d1d1      	bne.n	8001e8a <_vfiprintf_r+0x1c6>
 8001ee6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001ee8:	07db      	lsls	r3, r3, #31
 8001eea:	d405      	bmi.n	8001ef8 <_vfiprintf_r+0x234>
 8001eec:	89a3      	ldrh	r3, [r4, #12]
 8001eee:	059b      	lsls	r3, r3, #22
 8001ef0:	d402      	bmi.n	8001ef8 <_vfiprintf_r+0x234>
 8001ef2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ef4:	f7ff fda8 	bl	8001a48 <__retarget_lock_release_recursive>
 8001ef8:	89a3      	ldrh	r3, [r4, #12]
 8001efa:	065b      	lsls	r3, r3, #25
 8001efc:	d500      	bpl.n	8001f00 <_vfiprintf_r+0x23c>
 8001efe:	e70a      	b.n	8001d16 <_vfiprintf_r+0x52>
 8001f00:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001f02:	e70a      	b.n	8001d1a <_vfiprintf_r+0x56>
 8001f04:	ab07      	add	r3, sp, #28
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	0022      	movs	r2, r4
 8001f0a:	0029      	movs	r1, r5
 8001f0c:	0030      	movs	r0, r6
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <_vfiprintf_r+0x270>)
 8001f10:	f000 f882 	bl	8002018 <_printf_i>
 8001f14:	e7e3      	b.n	8001ede <_vfiprintf_r+0x21a>
 8001f16:	46c0      	nop			; (mov r8, r8)
 8001f18:	080029e4 	.word	0x080029e4
 8001f1c:	08002a04 	.word	0x08002a04
 8001f20:	080029c4 	.word	0x080029c4
 8001f24:	08002a24 	.word	0x08002a24
 8001f28:	08002a2a 	.word	0x08002a2a
 8001f2c:	08002a2e 	.word	0x08002a2e
 8001f30:	00000000 	.word	0x00000000
 8001f34:	08001c9f 	.word	0x08001c9f

08001f38 <_printf_common>:
 8001f38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f3a:	0015      	movs	r5, r2
 8001f3c:	9301      	str	r3, [sp, #4]
 8001f3e:	688a      	ldr	r2, [r1, #8]
 8001f40:	690b      	ldr	r3, [r1, #16]
 8001f42:	000c      	movs	r4, r1
 8001f44:	9000      	str	r0, [sp, #0]
 8001f46:	4293      	cmp	r3, r2
 8001f48:	da00      	bge.n	8001f4c <_printf_common+0x14>
 8001f4a:	0013      	movs	r3, r2
 8001f4c:	0022      	movs	r2, r4
 8001f4e:	602b      	str	r3, [r5, #0]
 8001f50:	3243      	adds	r2, #67	; 0x43
 8001f52:	7812      	ldrb	r2, [r2, #0]
 8001f54:	2a00      	cmp	r2, #0
 8001f56:	d001      	beq.n	8001f5c <_printf_common+0x24>
 8001f58:	3301      	adds	r3, #1
 8001f5a:	602b      	str	r3, [r5, #0]
 8001f5c:	6823      	ldr	r3, [r4, #0]
 8001f5e:	069b      	lsls	r3, r3, #26
 8001f60:	d502      	bpl.n	8001f68 <_printf_common+0x30>
 8001f62:	682b      	ldr	r3, [r5, #0]
 8001f64:	3302      	adds	r3, #2
 8001f66:	602b      	str	r3, [r5, #0]
 8001f68:	6822      	ldr	r2, [r4, #0]
 8001f6a:	2306      	movs	r3, #6
 8001f6c:	0017      	movs	r7, r2
 8001f6e:	401f      	ands	r7, r3
 8001f70:	421a      	tst	r2, r3
 8001f72:	d027      	beq.n	8001fc4 <_printf_common+0x8c>
 8001f74:	0023      	movs	r3, r4
 8001f76:	3343      	adds	r3, #67	; 0x43
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	1e5a      	subs	r2, r3, #1
 8001f7c:	4193      	sbcs	r3, r2
 8001f7e:	6822      	ldr	r2, [r4, #0]
 8001f80:	0692      	lsls	r2, r2, #26
 8001f82:	d430      	bmi.n	8001fe6 <_printf_common+0xae>
 8001f84:	0022      	movs	r2, r4
 8001f86:	9901      	ldr	r1, [sp, #4]
 8001f88:	9800      	ldr	r0, [sp, #0]
 8001f8a:	9e08      	ldr	r6, [sp, #32]
 8001f8c:	3243      	adds	r2, #67	; 0x43
 8001f8e:	47b0      	blx	r6
 8001f90:	1c43      	adds	r3, r0, #1
 8001f92:	d025      	beq.n	8001fe0 <_printf_common+0xa8>
 8001f94:	2306      	movs	r3, #6
 8001f96:	6820      	ldr	r0, [r4, #0]
 8001f98:	682a      	ldr	r2, [r5, #0]
 8001f9a:	68e1      	ldr	r1, [r4, #12]
 8001f9c:	2500      	movs	r5, #0
 8001f9e:	4003      	ands	r3, r0
 8001fa0:	2b04      	cmp	r3, #4
 8001fa2:	d103      	bne.n	8001fac <_printf_common+0x74>
 8001fa4:	1a8d      	subs	r5, r1, r2
 8001fa6:	43eb      	mvns	r3, r5
 8001fa8:	17db      	asrs	r3, r3, #31
 8001faa:	401d      	ands	r5, r3
 8001fac:	68a3      	ldr	r3, [r4, #8]
 8001fae:	6922      	ldr	r2, [r4, #16]
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	dd01      	ble.n	8001fb8 <_printf_common+0x80>
 8001fb4:	1a9b      	subs	r3, r3, r2
 8001fb6:	18ed      	adds	r5, r5, r3
 8001fb8:	2700      	movs	r7, #0
 8001fba:	42bd      	cmp	r5, r7
 8001fbc:	d120      	bne.n	8002000 <_printf_common+0xc8>
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	e010      	b.n	8001fe4 <_printf_common+0xac>
 8001fc2:	3701      	adds	r7, #1
 8001fc4:	68e3      	ldr	r3, [r4, #12]
 8001fc6:	682a      	ldr	r2, [r5, #0]
 8001fc8:	1a9b      	subs	r3, r3, r2
 8001fca:	42bb      	cmp	r3, r7
 8001fcc:	ddd2      	ble.n	8001f74 <_printf_common+0x3c>
 8001fce:	0022      	movs	r2, r4
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	9901      	ldr	r1, [sp, #4]
 8001fd4:	9800      	ldr	r0, [sp, #0]
 8001fd6:	9e08      	ldr	r6, [sp, #32]
 8001fd8:	3219      	adds	r2, #25
 8001fda:	47b0      	blx	r6
 8001fdc:	1c43      	adds	r3, r0, #1
 8001fde:	d1f0      	bne.n	8001fc2 <_printf_common+0x8a>
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	4240      	negs	r0, r0
 8001fe4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001fe6:	2030      	movs	r0, #48	; 0x30
 8001fe8:	18e1      	adds	r1, r4, r3
 8001fea:	3143      	adds	r1, #67	; 0x43
 8001fec:	7008      	strb	r0, [r1, #0]
 8001fee:	0021      	movs	r1, r4
 8001ff0:	1c5a      	adds	r2, r3, #1
 8001ff2:	3145      	adds	r1, #69	; 0x45
 8001ff4:	7809      	ldrb	r1, [r1, #0]
 8001ff6:	18a2      	adds	r2, r4, r2
 8001ff8:	3243      	adds	r2, #67	; 0x43
 8001ffa:	3302      	adds	r3, #2
 8001ffc:	7011      	strb	r1, [r2, #0]
 8001ffe:	e7c1      	b.n	8001f84 <_printf_common+0x4c>
 8002000:	0022      	movs	r2, r4
 8002002:	2301      	movs	r3, #1
 8002004:	9901      	ldr	r1, [sp, #4]
 8002006:	9800      	ldr	r0, [sp, #0]
 8002008:	9e08      	ldr	r6, [sp, #32]
 800200a:	321a      	adds	r2, #26
 800200c:	47b0      	blx	r6
 800200e:	1c43      	adds	r3, r0, #1
 8002010:	d0e6      	beq.n	8001fe0 <_printf_common+0xa8>
 8002012:	3701      	adds	r7, #1
 8002014:	e7d1      	b.n	8001fba <_printf_common+0x82>
	...

08002018 <_printf_i>:
 8002018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800201a:	b08b      	sub	sp, #44	; 0x2c
 800201c:	9206      	str	r2, [sp, #24]
 800201e:	000a      	movs	r2, r1
 8002020:	3243      	adds	r2, #67	; 0x43
 8002022:	9307      	str	r3, [sp, #28]
 8002024:	9005      	str	r0, [sp, #20]
 8002026:	9204      	str	r2, [sp, #16]
 8002028:	7e0a      	ldrb	r2, [r1, #24]
 800202a:	000c      	movs	r4, r1
 800202c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800202e:	2a78      	cmp	r2, #120	; 0x78
 8002030:	d806      	bhi.n	8002040 <_printf_i+0x28>
 8002032:	2a62      	cmp	r2, #98	; 0x62
 8002034:	d808      	bhi.n	8002048 <_printf_i+0x30>
 8002036:	2a00      	cmp	r2, #0
 8002038:	d100      	bne.n	800203c <_printf_i+0x24>
 800203a:	e0c0      	b.n	80021be <_printf_i+0x1a6>
 800203c:	2a58      	cmp	r2, #88	; 0x58
 800203e:	d052      	beq.n	80020e6 <_printf_i+0xce>
 8002040:	0026      	movs	r6, r4
 8002042:	3642      	adds	r6, #66	; 0x42
 8002044:	7032      	strb	r2, [r6, #0]
 8002046:	e022      	b.n	800208e <_printf_i+0x76>
 8002048:	0010      	movs	r0, r2
 800204a:	3863      	subs	r0, #99	; 0x63
 800204c:	2815      	cmp	r0, #21
 800204e:	d8f7      	bhi.n	8002040 <_printf_i+0x28>
 8002050:	f7fe f862 	bl	8000118 <__gnu_thumb1_case_shi>
 8002054:	001f0016 	.word	0x001f0016
 8002058:	fff6fff6 	.word	0xfff6fff6
 800205c:	fff6fff6 	.word	0xfff6fff6
 8002060:	fff6001f 	.word	0xfff6001f
 8002064:	fff6fff6 	.word	0xfff6fff6
 8002068:	00a8fff6 	.word	0x00a8fff6
 800206c:	009a0036 	.word	0x009a0036
 8002070:	fff6fff6 	.word	0xfff6fff6
 8002074:	fff600b9 	.word	0xfff600b9
 8002078:	fff60036 	.word	0xfff60036
 800207c:	009efff6 	.word	0x009efff6
 8002080:	0026      	movs	r6, r4
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	3642      	adds	r6, #66	; 0x42
 8002086:	1d11      	adds	r1, r2, #4
 8002088:	6019      	str	r1, [r3, #0]
 800208a:	6813      	ldr	r3, [r2, #0]
 800208c:	7033      	strb	r3, [r6, #0]
 800208e:	2301      	movs	r3, #1
 8002090:	e0a7      	b.n	80021e2 <_printf_i+0x1ca>
 8002092:	6808      	ldr	r0, [r1, #0]
 8002094:	6819      	ldr	r1, [r3, #0]
 8002096:	1d0a      	adds	r2, r1, #4
 8002098:	0605      	lsls	r5, r0, #24
 800209a:	d50b      	bpl.n	80020b4 <_printf_i+0x9c>
 800209c:	680d      	ldr	r5, [r1, #0]
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	2d00      	cmp	r5, #0
 80020a2:	da03      	bge.n	80020ac <_printf_i+0x94>
 80020a4:	232d      	movs	r3, #45	; 0x2d
 80020a6:	9a04      	ldr	r2, [sp, #16]
 80020a8:	426d      	negs	r5, r5
 80020aa:	7013      	strb	r3, [r2, #0]
 80020ac:	4b61      	ldr	r3, [pc, #388]	; (8002234 <_printf_i+0x21c>)
 80020ae:	270a      	movs	r7, #10
 80020b0:	9303      	str	r3, [sp, #12]
 80020b2:	e032      	b.n	800211a <_printf_i+0x102>
 80020b4:	680d      	ldr	r5, [r1, #0]
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	0641      	lsls	r1, r0, #25
 80020ba:	d5f1      	bpl.n	80020a0 <_printf_i+0x88>
 80020bc:	b22d      	sxth	r5, r5
 80020be:	e7ef      	b.n	80020a0 <_printf_i+0x88>
 80020c0:	680d      	ldr	r5, [r1, #0]
 80020c2:	6819      	ldr	r1, [r3, #0]
 80020c4:	1d08      	adds	r0, r1, #4
 80020c6:	6018      	str	r0, [r3, #0]
 80020c8:	062e      	lsls	r6, r5, #24
 80020ca:	d501      	bpl.n	80020d0 <_printf_i+0xb8>
 80020cc:	680d      	ldr	r5, [r1, #0]
 80020ce:	e003      	b.n	80020d8 <_printf_i+0xc0>
 80020d0:	066d      	lsls	r5, r5, #25
 80020d2:	d5fb      	bpl.n	80020cc <_printf_i+0xb4>
 80020d4:	680d      	ldr	r5, [r1, #0]
 80020d6:	b2ad      	uxth	r5, r5
 80020d8:	4b56      	ldr	r3, [pc, #344]	; (8002234 <_printf_i+0x21c>)
 80020da:	270a      	movs	r7, #10
 80020dc:	9303      	str	r3, [sp, #12]
 80020de:	2a6f      	cmp	r2, #111	; 0x6f
 80020e0:	d117      	bne.n	8002112 <_printf_i+0xfa>
 80020e2:	2708      	movs	r7, #8
 80020e4:	e015      	b.n	8002112 <_printf_i+0xfa>
 80020e6:	3145      	adds	r1, #69	; 0x45
 80020e8:	700a      	strb	r2, [r1, #0]
 80020ea:	4a52      	ldr	r2, [pc, #328]	; (8002234 <_printf_i+0x21c>)
 80020ec:	9203      	str	r2, [sp, #12]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	6821      	ldr	r1, [r4, #0]
 80020f2:	ca20      	ldmia	r2!, {r5}
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	0608      	lsls	r0, r1, #24
 80020f8:	d550      	bpl.n	800219c <_printf_i+0x184>
 80020fa:	07cb      	lsls	r3, r1, #31
 80020fc:	d502      	bpl.n	8002104 <_printf_i+0xec>
 80020fe:	2320      	movs	r3, #32
 8002100:	4319      	orrs	r1, r3
 8002102:	6021      	str	r1, [r4, #0]
 8002104:	2710      	movs	r7, #16
 8002106:	2d00      	cmp	r5, #0
 8002108:	d103      	bne.n	8002112 <_printf_i+0xfa>
 800210a:	2320      	movs	r3, #32
 800210c:	6822      	ldr	r2, [r4, #0]
 800210e:	439a      	bics	r2, r3
 8002110:	6022      	str	r2, [r4, #0]
 8002112:	0023      	movs	r3, r4
 8002114:	2200      	movs	r2, #0
 8002116:	3343      	adds	r3, #67	; 0x43
 8002118:	701a      	strb	r2, [r3, #0]
 800211a:	6863      	ldr	r3, [r4, #4]
 800211c:	60a3      	str	r3, [r4, #8]
 800211e:	2b00      	cmp	r3, #0
 8002120:	db03      	blt.n	800212a <_printf_i+0x112>
 8002122:	2204      	movs	r2, #4
 8002124:	6821      	ldr	r1, [r4, #0]
 8002126:	4391      	bics	r1, r2
 8002128:	6021      	str	r1, [r4, #0]
 800212a:	2d00      	cmp	r5, #0
 800212c:	d102      	bne.n	8002134 <_printf_i+0x11c>
 800212e:	9e04      	ldr	r6, [sp, #16]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00c      	beq.n	800214e <_printf_i+0x136>
 8002134:	9e04      	ldr	r6, [sp, #16]
 8002136:	0028      	movs	r0, r5
 8002138:	0039      	movs	r1, r7
 800213a:	f7fe f87d 	bl	8000238 <__aeabi_uidivmod>
 800213e:	9b03      	ldr	r3, [sp, #12]
 8002140:	3e01      	subs	r6, #1
 8002142:	5c5b      	ldrb	r3, [r3, r1]
 8002144:	7033      	strb	r3, [r6, #0]
 8002146:	002b      	movs	r3, r5
 8002148:	0005      	movs	r5, r0
 800214a:	429f      	cmp	r7, r3
 800214c:	d9f3      	bls.n	8002136 <_printf_i+0x11e>
 800214e:	2f08      	cmp	r7, #8
 8002150:	d109      	bne.n	8002166 <_printf_i+0x14e>
 8002152:	6823      	ldr	r3, [r4, #0]
 8002154:	07db      	lsls	r3, r3, #31
 8002156:	d506      	bpl.n	8002166 <_printf_i+0x14e>
 8002158:	6863      	ldr	r3, [r4, #4]
 800215a:	6922      	ldr	r2, [r4, #16]
 800215c:	4293      	cmp	r3, r2
 800215e:	dc02      	bgt.n	8002166 <_printf_i+0x14e>
 8002160:	2330      	movs	r3, #48	; 0x30
 8002162:	3e01      	subs	r6, #1
 8002164:	7033      	strb	r3, [r6, #0]
 8002166:	9b04      	ldr	r3, [sp, #16]
 8002168:	1b9b      	subs	r3, r3, r6
 800216a:	6123      	str	r3, [r4, #16]
 800216c:	9b07      	ldr	r3, [sp, #28]
 800216e:	0021      	movs	r1, r4
 8002170:	9300      	str	r3, [sp, #0]
 8002172:	9805      	ldr	r0, [sp, #20]
 8002174:	9b06      	ldr	r3, [sp, #24]
 8002176:	aa09      	add	r2, sp, #36	; 0x24
 8002178:	f7ff fede 	bl	8001f38 <_printf_common>
 800217c:	1c43      	adds	r3, r0, #1
 800217e:	d135      	bne.n	80021ec <_printf_i+0x1d4>
 8002180:	2001      	movs	r0, #1
 8002182:	4240      	negs	r0, r0
 8002184:	b00b      	add	sp, #44	; 0x2c
 8002186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002188:	2220      	movs	r2, #32
 800218a:	6809      	ldr	r1, [r1, #0]
 800218c:	430a      	orrs	r2, r1
 800218e:	6022      	str	r2, [r4, #0]
 8002190:	0022      	movs	r2, r4
 8002192:	2178      	movs	r1, #120	; 0x78
 8002194:	3245      	adds	r2, #69	; 0x45
 8002196:	7011      	strb	r1, [r2, #0]
 8002198:	4a27      	ldr	r2, [pc, #156]	; (8002238 <_printf_i+0x220>)
 800219a:	e7a7      	b.n	80020ec <_printf_i+0xd4>
 800219c:	0648      	lsls	r0, r1, #25
 800219e:	d5ac      	bpl.n	80020fa <_printf_i+0xe2>
 80021a0:	b2ad      	uxth	r5, r5
 80021a2:	e7aa      	b.n	80020fa <_printf_i+0xe2>
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	680d      	ldr	r5, [r1, #0]
 80021a8:	1d10      	adds	r0, r2, #4
 80021aa:	6949      	ldr	r1, [r1, #20]
 80021ac:	6018      	str	r0, [r3, #0]
 80021ae:	6813      	ldr	r3, [r2, #0]
 80021b0:	062e      	lsls	r6, r5, #24
 80021b2:	d501      	bpl.n	80021b8 <_printf_i+0x1a0>
 80021b4:	6019      	str	r1, [r3, #0]
 80021b6:	e002      	b.n	80021be <_printf_i+0x1a6>
 80021b8:	066d      	lsls	r5, r5, #25
 80021ba:	d5fb      	bpl.n	80021b4 <_printf_i+0x19c>
 80021bc:	8019      	strh	r1, [r3, #0]
 80021be:	2300      	movs	r3, #0
 80021c0:	9e04      	ldr	r6, [sp, #16]
 80021c2:	6123      	str	r3, [r4, #16]
 80021c4:	e7d2      	b.n	800216c <_printf_i+0x154>
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	1d11      	adds	r1, r2, #4
 80021ca:	6019      	str	r1, [r3, #0]
 80021cc:	6816      	ldr	r6, [r2, #0]
 80021ce:	2100      	movs	r1, #0
 80021d0:	0030      	movs	r0, r6
 80021d2:	6862      	ldr	r2, [r4, #4]
 80021d4:	f000 f8ee 	bl	80023b4 <memchr>
 80021d8:	2800      	cmp	r0, #0
 80021da:	d001      	beq.n	80021e0 <_printf_i+0x1c8>
 80021dc:	1b80      	subs	r0, r0, r6
 80021de:	6060      	str	r0, [r4, #4]
 80021e0:	6863      	ldr	r3, [r4, #4]
 80021e2:	6123      	str	r3, [r4, #16]
 80021e4:	2300      	movs	r3, #0
 80021e6:	9a04      	ldr	r2, [sp, #16]
 80021e8:	7013      	strb	r3, [r2, #0]
 80021ea:	e7bf      	b.n	800216c <_printf_i+0x154>
 80021ec:	6923      	ldr	r3, [r4, #16]
 80021ee:	0032      	movs	r2, r6
 80021f0:	9906      	ldr	r1, [sp, #24]
 80021f2:	9805      	ldr	r0, [sp, #20]
 80021f4:	9d07      	ldr	r5, [sp, #28]
 80021f6:	47a8      	blx	r5
 80021f8:	1c43      	adds	r3, r0, #1
 80021fa:	d0c1      	beq.n	8002180 <_printf_i+0x168>
 80021fc:	6823      	ldr	r3, [r4, #0]
 80021fe:	079b      	lsls	r3, r3, #30
 8002200:	d415      	bmi.n	800222e <_printf_i+0x216>
 8002202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002204:	68e0      	ldr	r0, [r4, #12]
 8002206:	4298      	cmp	r0, r3
 8002208:	dabc      	bge.n	8002184 <_printf_i+0x16c>
 800220a:	0018      	movs	r0, r3
 800220c:	e7ba      	b.n	8002184 <_printf_i+0x16c>
 800220e:	0022      	movs	r2, r4
 8002210:	2301      	movs	r3, #1
 8002212:	9906      	ldr	r1, [sp, #24]
 8002214:	9805      	ldr	r0, [sp, #20]
 8002216:	9e07      	ldr	r6, [sp, #28]
 8002218:	3219      	adds	r2, #25
 800221a:	47b0      	blx	r6
 800221c:	1c43      	adds	r3, r0, #1
 800221e:	d0af      	beq.n	8002180 <_printf_i+0x168>
 8002220:	3501      	adds	r5, #1
 8002222:	68e3      	ldr	r3, [r4, #12]
 8002224:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002226:	1a9b      	subs	r3, r3, r2
 8002228:	42ab      	cmp	r3, r5
 800222a:	dcf0      	bgt.n	800220e <_printf_i+0x1f6>
 800222c:	e7e9      	b.n	8002202 <_printf_i+0x1ea>
 800222e:	2500      	movs	r5, #0
 8002230:	e7f7      	b.n	8002222 <_printf_i+0x20a>
 8002232:	46c0      	nop			; (mov r8, r8)
 8002234:	08002a35 	.word	0x08002a35
 8002238:	08002a46 	.word	0x08002a46

0800223c <_sbrk_r>:
 800223c:	2300      	movs	r3, #0
 800223e:	b570      	push	{r4, r5, r6, lr}
 8002240:	4d06      	ldr	r5, [pc, #24]	; (800225c <_sbrk_r+0x20>)
 8002242:	0004      	movs	r4, r0
 8002244:	0008      	movs	r0, r1
 8002246:	602b      	str	r3, [r5, #0]
 8002248:	f7fe f91c 	bl	8000484 <_sbrk>
 800224c:	1c43      	adds	r3, r0, #1
 800224e:	d103      	bne.n	8002258 <_sbrk_r+0x1c>
 8002250:	682b      	ldr	r3, [r5, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d000      	beq.n	8002258 <_sbrk_r+0x1c>
 8002256:	6023      	str	r3, [r4, #0]
 8002258:	bd70      	pop	{r4, r5, r6, pc}
 800225a:	46c0      	nop			; (mov r8, r8)
 800225c:	20000160 	.word	0x20000160

08002260 <__sread>:
 8002260:	b570      	push	{r4, r5, r6, lr}
 8002262:	000c      	movs	r4, r1
 8002264:	250e      	movs	r5, #14
 8002266:	5f49      	ldrsh	r1, [r1, r5]
 8002268:	f000 f8c0 	bl	80023ec <_read_r>
 800226c:	2800      	cmp	r0, #0
 800226e:	db03      	blt.n	8002278 <__sread+0x18>
 8002270:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002272:	181b      	adds	r3, r3, r0
 8002274:	6563      	str	r3, [r4, #84]	; 0x54
 8002276:	bd70      	pop	{r4, r5, r6, pc}
 8002278:	89a3      	ldrh	r3, [r4, #12]
 800227a:	4a02      	ldr	r2, [pc, #8]	; (8002284 <__sread+0x24>)
 800227c:	4013      	ands	r3, r2
 800227e:	81a3      	strh	r3, [r4, #12]
 8002280:	e7f9      	b.n	8002276 <__sread+0x16>
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	ffffefff 	.word	0xffffefff

08002288 <__swrite>:
 8002288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800228a:	001f      	movs	r7, r3
 800228c:	898b      	ldrh	r3, [r1, #12]
 800228e:	0005      	movs	r5, r0
 8002290:	000c      	movs	r4, r1
 8002292:	0016      	movs	r6, r2
 8002294:	05db      	lsls	r3, r3, #23
 8002296:	d505      	bpl.n	80022a4 <__swrite+0x1c>
 8002298:	230e      	movs	r3, #14
 800229a:	5ec9      	ldrsh	r1, [r1, r3]
 800229c:	2200      	movs	r2, #0
 800229e:	2302      	movs	r3, #2
 80022a0:	f000 f874 	bl	800238c <_lseek_r>
 80022a4:	89a3      	ldrh	r3, [r4, #12]
 80022a6:	4a05      	ldr	r2, [pc, #20]	; (80022bc <__swrite+0x34>)
 80022a8:	0028      	movs	r0, r5
 80022aa:	4013      	ands	r3, r2
 80022ac:	81a3      	strh	r3, [r4, #12]
 80022ae:	0032      	movs	r2, r6
 80022b0:	230e      	movs	r3, #14
 80022b2:	5ee1      	ldrsh	r1, [r4, r3]
 80022b4:	003b      	movs	r3, r7
 80022b6:	f000 f81f 	bl	80022f8 <_write_r>
 80022ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022bc:	ffffefff 	.word	0xffffefff

080022c0 <__sseek>:
 80022c0:	b570      	push	{r4, r5, r6, lr}
 80022c2:	000c      	movs	r4, r1
 80022c4:	250e      	movs	r5, #14
 80022c6:	5f49      	ldrsh	r1, [r1, r5]
 80022c8:	f000 f860 	bl	800238c <_lseek_r>
 80022cc:	89a3      	ldrh	r3, [r4, #12]
 80022ce:	1c42      	adds	r2, r0, #1
 80022d0:	d103      	bne.n	80022da <__sseek+0x1a>
 80022d2:	4a05      	ldr	r2, [pc, #20]	; (80022e8 <__sseek+0x28>)
 80022d4:	4013      	ands	r3, r2
 80022d6:	81a3      	strh	r3, [r4, #12]
 80022d8:	bd70      	pop	{r4, r5, r6, pc}
 80022da:	2280      	movs	r2, #128	; 0x80
 80022dc:	0152      	lsls	r2, r2, #5
 80022de:	4313      	orrs	r3, r2
 80022e0:	81a3      	strh	r3, [r4, #12]
 80022e2:	6560      	str	r0, [r4, #84]	; 0x54
 80022e4:	e7f8      	b.n	80022d8 <__sseek+0x18>
 80022e6:	46c0      	nop			; (mov r8, r8)
 80022e8:	ffffefff 	.word	0xffffefff

080022ec <__sclose>:
 80022ec:	b510      	push	{r4, lr}
 80022ee:	230e      	movs	r3, #14
 80022f0:	5ec9      	ldrsh	r1, [r1, r3]
 80022f2:	f000 f815 	bl	8002320 <_close_r>
 80022f6:	bd10      	pop	{r4, pc}

080022f8 <_write_r>:
 80022f8:	b570      	push	{r4, r5, r6, lr}
 80022fa:	0004      	movs	r4, r0
 80022fc:	0008      	movs	r0, r1
 80022fe:	0011      	movs	r1, r2
 8002300:	001a      	movs	r2, r3
 8002302:	2300      	movs	r3, #0
 8002304:	4d05      	ldr	r5, [pc, #20]	; (800231c <_write_r+0x24>)
 8002306:	602b      	str	r3, [r5, #0]
 8002308:	f000 f935 	bl	8002576 <_write>
 800230c:	1c43      	adds	r3, r0, #1
 800230e:	d103      	bne.n	8002318 <_write_r+0x20>
 8002310:	682b      	ldr	r3, [r5, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d000      	beq.n	8002318 <_write_r+0x20>
 8002316:	6023      	str	r3, [r4, #0]
 8002318:	bd70      	pop	{r4, r5, r6, pc}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	20000160 	.word	0x20000160

08002320 <_close_r>:
 8002320:	2300      	movs	r3, #0
 8002322:	b570      	push	{r4, r5, r6, lr}
 8002324:	4d06      	ldr	r5, [pc, #24]	; (8002340 <_close_r+0x20>)
 8002326:	0004      	movs	r4, r0
 8002328:	0008      	movs	r0, r1
 800232a:	602b      	str	r3, [r5, #0]
 800232c:	f000 f94e 	bl	80025cc <_close>
 8002330:	1c43      	adds	r3, r0, #1
 8002332:	d103      	bne.n	800233c <_close_r+0x1c>
 8002334:	682b      	ldr	r3, [r5, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d000      	beq.n	800233c <_close_r+0x1c>
 800233a:	6023      	str	r3, [r4, #0]
 800233c:	bd70      	pop	{r4, r5, r6, pc}
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	20000160 	.word	0x20000160

08002344 <_fstat_r>:
 8002344:	2300      	movs	r3, #0
 8002346:	b570      	push	{r4, r5, r6, lr}
 8002348:	4d06      	ldr	r5, [pc, #24]	; (8002364 <_fstat_r+0x20>)
 800234a:	0004      	movs	r4, r0
 800234c:	0008      	movs	r0, r1
 800234e:	0011      	movs	r1, r2
 8002350:	602b      	str	r3, [r5, #0]
 8002352:	f000 f983 	bl	800265c <_fstat>
 8002356:	1c43      	adds	r3, r0, #1
 8002358:	d103      	bne.n	8002362 <_fstat_r+0x1e>
 800235a:	682b      	ldr	r3, [r5, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d000      	beq.n	8002362 <_fstat_r+0x1e>
 8002360:	6023      	str	r3, [r4, #0]
 8002362:	bd70      	pop	{r4, r5, r6, pc}
 8002364:	20000160 	.word	0x20000160

08002368 <_isatty_r>:
 8002368:	2300      	movs	r3, #0
 800236a:	b570      	push	{r4, r5, r6, lr}
 800236c:	4d06      	ldr	r5, [pc, #24]	; (8002388 <_isatty_r+0x20>)
 800236e:	0004      	movs	r4, r0
 8002370:	0008      	movs	r0, r1
 8002372:	602b      	str	r3, [r5, #0]
 8002374:	f000 fad2 	bl	800291c <_isatty>
 8002378:	1c43      	adds	r3, r0, #1
 800237a:	d103      	bne.n	8002384 <_isatty_r+0x1c>
 800237c:	682b      	ldr	r3, [r5, #0]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d000      	beq.n	8002384 <_isatty_r+0x1c>
 8002382:	6023      	str	r3, [r4, #0]
 8002384:	bd70      	pop	{r4, r5, r6, pc}
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	20000160 	.word	0x20000160

0800238c <_lseek_r>:
 800238c:	b570      	push	{r4, r5, r6, lr}
 800238e:	0004      	movs	r4, r0
 8002390:	0008      	movs	r0, r1
 8002392:	0011      	movs	r1, r2
 8002394:	001a      	movs	r2, r3
 8002396:	2300      	movs	r3, #0
 8002398:	4d05      	ldr	r5, [pc, #20]	; (80023b0 <_lseek_r+0x24>)
 800239a:	602b      	str	r3, [r5, #0]
 800239c:	f000 f8d7 	bl	800254e <_lseek>
 80023a0:	1c43      	adds	r3, r0, #1
 80023a2:	d103      	bne.n	80023ac <_lseek_r+0x20>
 80023a4:	682b      	ldr	r3, [r5, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d000      	beq.n	80023ac <_lseek_r+0x20>
 80023aa:	6023      	str	r3, [r4, #0]
 80023ac:	bd70      	pop	{r4, r5, r6, pc}
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	20000160 	.word	0x20000160

080023b4 <memchr>:
 80023b4:	b2c9      	uxtb	r1, r1
 80023b6:	1882      	adds	r2, r0, r2
 80023b8:	4290      	cmp	r0, r2
 80023ba:	d101      	bne.n	80023c0 <memchr+0xc>
 80023bc:	2000      	movs	r0, #0
 80023be:	4770      	bx	lr
 80023c0:	7803      	ldrb	r3, [r0, #0]
 80023c2:	428b      	cmp	r3, r1
 80023c4:	d0fb      	beq.n	80023be <memchr+0xa>
 80023c6:	3001      	adds	r0, #1
 80023c8:	e7f6      	b.n	80023b8 <memchr+0x4>
	...

080023cc <__malloc_lock>:
 80023cc:	b510      	push	{r4, lr}
 80023ce:	4802      	ldr	r0, [pc, #8]	; (80023d8 <__malloc_lock+0xc>)
 80023d0:	f7ff fb39 	bl	8001a46 <__retarget_lock_acquire_recursive>
 80023d4:	bd10      	pop	{r4, pc}
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	20000158 	.word	0x20000158

080023dc <__malloc_unlock>:
 80023dc:	b510      	push	{r4, lr}
 80023de:	4802      	ldr	r0, [pc, #8]	; (80023e8 <__malloc_unlock+0xc>)
 80023e0:	f7ff fb32 	bl	8001a48 <__retarget_lock_release_recursive>
 80023e4:	bd10      	pop	{r4, pc}
 80023e6:	46c0      	nop			; (mov r8, r8)
 80023e8:	20000158 	.word	0x20000158

080023ec <_read_r>:
 80023ec:	b570      	push	{r4, r5, r6, lr}
 80023ee:	0004      	movs	r4, r0
 80023f0:	0008      	movs	r0, r1
 80023f2:	0011      	movs	r1, r2
 80023f4:	001a      	movs	r2, r3
 80023f6:	2300      	movs	r3, #0
 80023f8:	4d05      	ldr	r5, [pc, #20]	; (8002410 <_read_r+0x24>)
 80023fa:	602b      	str	r3, [r5, #0]
 80023fc:	f000 f852 	bl	80024a4 <_read>
 8002400:	1c43      	adds	r3, r0, #1
 8002402:	d103      	bne.n	800240c <_read_r+0x20>
 8002404:	682b      	ldr	r3, [r5, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d000      	beq.n	800240c <_read_r+0x20>
 800240a:	6023      	str	r3, [r4, #0]
 800240c:	bd70      	pop	{r4, r5, r6, pc}
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	20000160 	.word	0x20000160

08002414 <findslot>:
 8002414:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <findslot+0x2c>)
 8002416:	b510      	push	{r4, lr}
 8002418:	0004      	movs	r4, r0
 800241a:	6818      	ldr	r0, [r3, #0]
 800241c:	2800      	cmp	r0, #0
 800241e:	d004      	beq.n	800242a <findslot+0x16>
 8002420:	6983      	ldr	r3, [r0, #24]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <findslot+0x16>
 8002426:	f7ff fa6d 	bl	8001904 <__sinit>
 800242a:	2000      	movs	r0, #0
 800242c:	2c13      	cmp	r4, #19
 800242e:	d805      	bhi.n	800243c <findslot+0x28>
 8002430:	4b04      	ldr	r3, [pc, #16]	; (8002444 <findslot+0x30>)
 8002432:	00e4      	lsls	r4, r4, #3
 8002434:	58e2      	ldr	r2, [r4, r3]
 8002436:	3201      	adds	r2, #1
 8002438:	d000      	beq.n	800243c <findslot+0x28>
 800243a:	18e0      	adds	r0, r4, r3
 800243c:	bd10      	pop	{r4, pc}
 800243e:	46c0      	nop			; (mov r8, r8)
 8002440:	2000000c 	.word	0x2000000c
 8002444:	200000b0 	.word	0x200000b0

08002448 <checkerror>:
 8002448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800244a:	0004      	movs	r4, r0
 800244c:	1c43      	adds	r3, r0, #1
 800244e:	d109      	bne.n	8002464 <checkerror+0x1c>
 8002450:	f7fe ff94 	bl	800137c <__errno>
 8002454:	2613      	movs	r6, #19
 8002456:	0005      	movs	r5, r0
 8002458:	2700      	movs	r7, #0
 800245a:	1c30      	adds	r0, r6, #0
 800245c:	1c39      	adds	r1, r7, #0
 800245e:	beab      	bkpt	0x00ab
 8002460:	1c06      	adds	r6, r0, #0
 8002462:	602e      	str	r6, [r5, #0]
 8002464:	0020      	movs	r0, r4
 8002466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002468 <error>:
 8002468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800246a:	0004      	movs	r4, r0
 800246c:	f7fe ff86 	bl	800137c <__errno>
 8002470:	2613      	movs	r6, #19
 8002472:	0005      	movs	r5, r0
 8002474:	2700      	movs	r7, #0
 8002476:	1c30      	adds	r0, r6, #0
 8002478:	1c39      	adds	r1, r7, #0
 800247a:	beab      	bkpt	0x00ab
 800247c:	1c06      	adds	r6, r0, #0
 800247e:	602e      	str	r6, [r5, #0]
 8002480:	0020      	movs	r0, r4
 8002482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002484 <_swiread>:
 8002484:	b530      	push	{r4, r5, lr}
 8002486:	b085      	sub	sp, #20
 8002488:	ad01      	add	r5, sp, #4
 800248a:	9001      	str	r0, [sp, #4]
 800248c:	9102      	str	r1, [sp, #8]
 800248e:	9203      	str	r2, [sp, #12]
 8002490:	2406      	movs	r4, #6
 8002492:	1c20      	adds	r0, r4, #0
 8002494:	1c29      	adds	r1, r5, #0
 8002496:	beab      	bkpt	0x00ab
 8002498:	1c04      	adds	r4, r0, #0
 800249a:	0020      	movs	r0, r4
 800249c:	f7ff ffd4 	bl	8002448 <checkerror>
 80024a0:	b005      	add	sp, #20
 80024a2:	bd30      	pop	{r4, r5, pc}

080024a4 <_read>:
 80024a4:	b570      	push	{r4, r5, r6, lr}
 80024a6:	000e      	movs	r6, r1
 80024a8:	0015      	movs	r5, r2
 80024aa:	f7ff ffb3 	bl	8002414 <findslot>
 80024ae:	1e04      	subs	r4, r0, #0
 80024b0:	d106      	bne.n	80024c0 <_read+0x1c>
 80024b2:	f7fe ff63 	bl	800137c <__errno>
 80024b6:	2309      	movs	r3, #9
 80024b8:	6003      	str	r3, [r0, #0]
 80024ba:	2001      	movs	r0, #1
 80024bc:	4240      	negs	r0, r0
 80024be:	bd70      	pop	{r4, r5, r6, pc}
 80024c0:	002a      	movs	r2, r5
 80024c2:	0031      	movs	r1, r6
 80024c4:	6800      	ldr	r0, [r0, #0]
 80024c6:	f7ff ffdd 	bl	8002484 <_swiread>
 80024ca:	1c43      	adds	r3, r0, #1
 80024cc:	d0f7      	beq.n	80024be <_read+0x1a>
 80024ce:	6863      	ldr	r3, [r4, #4]
 80024d0:	1a28      	subs	r0, r5, r0
 80024d2:	181b      	adds	r3, r3, r0
 80024d4:	6063      	str	r3, [r4, #4]
 80024d6:	e7f2      	b.n	80024be <_read+0x1a>

080024d8 <_swilseek>:
 80024d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80024da:	000c      	movs	r4, r1
 80024dc:	0016      	movs	r6, r2
 80024de:	f7ff ff99 	bl	8002414 <findslot>
 80024e2:	1e05      	subs	r5, r0, #0
 80024e4:	d107      	bne.n	80024f6 <_swilseek+0x1e>
 80024e6:	f7fe ff49 	bl	800137c <__errno>
 80024ea:	2309      	movs	r3, #9
 80024ec:	6003      	str	r3, [r0, #0]
 80024ee:	2401      	movs	r4, #1
 80024f0:	4264      	negs	r4, r4
 80024f2:	0020      	movs	r0, r4
 80024f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80024f6:	2e02      	cmp	r6, #2
 80024f8:	d903      	bls.n	8002502 <_swilseek+0x2a>
 80024fa:	f7fe ff3f 	bl	800137c <__errno>
 80024fe:	2316      	movs	r3, #22
 8002500:	e7f4      	b.n	80024ec <_swilseek+0x14>
 8002502:	2e01      	cmp	r6, #1
 8002504:	d112      	bne.n	800252c <_swilseek+0x54>
 8002506:	6843      	ldr	r3, [r0, #4]
 8002508:	18e4      	adds	r4, r4, r3
 800250a:	d4f6      	bmi.n	80024fa <_swilseek+0x22>
 800250c:	466f      	mov	r7, sp
 800250e:	682b      	ldr	r3, [r5, #0]
 8002510:	260a      	movs	r6, #10
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	607c      	str	r4, [r7, #4]
 8002516:	1c30      	adds	r0, r6, #0
 8002518:	1c39      	adds	r1, r7, #0
 800251a:	beab      	bkpt	0x00ab
 800251c:	1c06      	adds	r6, r0, #0
 800251e:	0030      	movs	r0, r6
 8002520:	f7ff ff92 	bl	8002448 <checkerror>
 8002524:	2800      	cmp	r0, #0
 8002526:	dbe2      	blt.n	80024ee <_swilseek+0x16>
 8002528:	606c      	str	r4, [r5, #4]
 800252a:	e7e2      	b.n	80024f2 <_swilseek+0x1a>
 800252c:	2e02      	cmp	r6, #2
 800252e:	d1ed      	bne.n	800250c <_swilseek+0x34>
 8002530:	6803      	ldr	r3, [r0, #0]
 8002532:	466f      	mov	r7, sp
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	360a      	adds	r6, #10
 8002538:	1c30      	adds	r0, r6, #0
 800253a:	1c39      	adds	r1, r7, #0
 800253c:	beab      	bkpt	0x00ab
 800253e:	1c06      	adds	r6, r0, #0
 8002540:	0030      	movs	r0, r6
 8002542:	f7ff ff81 	bl	8002448 <checkerror>
 8002546:	1824      	adds	r4, r4, r0
 8002548:	1c43      	adds	r3, r0, #1
 800254a:	d1df      	bne.n	800250c <_swilseek+0x34>
 800254c:	e7cf      	b.n	80024ee <_swilseek+0x16>

0800254e <_lseek>:
 800254e:	b510      	push	{r4, lr}
 8002550:	f7ff ffc2 	bl	80024d8 <_swilseek>
 8002554:	bd10      	pop	{r4, pc}

08002556 <_swiwrite>:
 8002556:	b530      	push	{r4, r5, lr}
 8002558:	b085      	sub	sp, #20
 800255a:	ad01      	add	r5, sp, #4
 800255c:	9001      	str	r0, [sp, #4]
 800255e:	9102      	str	r1, [sp, #8]
 8002560:	9203      	str	r2, [sp, #12]
 8002562:	2405      	movs	r4, #5
 8002564:	1c20      	adds	r0, r4, #0
 8002566:	1c29      	adds	r1, r5, #0
 8002568:	beab      	bkpt	0x00ab
 800256a:	1c04      	adds	r4, r0, #0
 800256c:	0020      	movs	r0, r4
 800256e:	f7ff ff6b 	bl	8002448 <checkerror>
 8002572:	b005      	add	sp, #20
 8002574:	bd30      	pop	{r4, r5, pc}

08002576 <_write>:
 8002576:	b570      	push	{r4, r5, r6, lr}
 8002578:	000e      	movs	r6, r1
 800257a:	0015      	movs	r5, r2
 800257c:	f7ff ff4a 	bl	8002414 <findslot>
 8002580:	1e04      	subs	r4, r0, #0
 8002582:	d106      	bne.n	8002592 <_write+0x1c>
 8002584:	f7fe fefa 	bl	800137c <__errno>
 8002588:	2309      	movs	r3, #9
 800258a:	6003      	str	r3, [r0, #0]
 800258c:	2001      	movs	r0, #1
 800258e:	4240      	negs	r0, r0
 8002590:	e00f      	b.n	80025b2 <_write+0x3c>
 8002592:	002a      	movs	r2, r5
 8002594:	0031      	movs	r1, r6
 8002596:	6800      	ldr	r0, [r0, #0]
 8002598:	f7ff ffdd 	bl	8002556 <_swiwrite>
 800259c:	1e03      	subs	r3, r0, #0
 800259e:	dbf5      	blt.n	800258c <_write+0x16>
 80025a0:	6862      	ldr	r2, [r4, #4]
 80025a2:	1a28      	subs	r0, r5, r0
 80025a4:	1812      	adds	r2, r2, r0
 80025a6:	6062      	str	r2, [r4, #4]
 80025a8:	42ab      	cmp	r3, r5
 80025aa:	d102      	bne.n	80025b2 <_write+0x3c>
 80025ac:	2000      	movs	r0, #0
 80025ae:	f7ff ff5b 	bl	8002468 <error>
 80025b2:	bd70      	pop	{r4, r5, r6, pc}

080025b4 <_swiclose>:
 80025b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80025b6:	2402      	movs	r4, #2
 80025b8:	9001      	str	r0, [sp, #4]
 80025ba:	ad01      	add	r5, sp, #4
 80025bc:	1c20      	adds	r0, r4, #0
 80025be:	1c29      	adds	r1, r5, #0
 80025c0:	beab      	bkpt	0x00ab
 80025c2:	1c04      	adds	r4, r0, #0
 80025c4:	0020      	movs	r0, r4
 80025c6:	f7ff ff3f 	bl	8002448 <checkerror>
 80025ca:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

080025cc <_close>:
 80025cc:	b570      	push	{r4, r5, r6, lr}
 80025ce:	0005      	movs	r5, r0
 80025d0:	f7ff ff20 	bl	8002414 <findslot>
 80025d4:	1e04      	subs	r4, r0, #0
 80025d6:	d106      	bne.n	80025e6 <_close+0x1a>
 80025d8:	f7fe fed0 	bl	800137c <__errno>
 80025dc:	2309      	movs	r3, #9
 80025de:	6003      	str	r3, [r0, #0]
 80025e0:	2001      	movs	r0, #1
 80025e2:	4240      	negs	r0, r0
 80025e4:	bd70      	pop	{r4, r5, r6, pc}
 80025e6:	3d01      	subs	r5, #1
 80025e8:	2d01      	cmp	r5, #1
 80025ea:	d809      	bhi.n	8002600 <_close+0x34>
 80025ec:	4b09      	ldr	r3, [pc, #36]	; (8002614 <_close+0x48>)
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d104      	bne.n	8002600 <_close+0x34>
 80025f6:	2301      	movs	r3, #1
 80025f8:	425b      	negs	r3, r3
 80025fa:	6003      	str	r3, [r0, #0]
 80025fc:	2000      	movs	r0, #0
 80025fe:	e7f1      	b.n	80025e4 <_close+0x18>
 8002600:	6820      	ldr	r0, [r4, #0]
 8002602:	f7ff ffd7 	bl	80025b4 <_swiclose>
 8002606:	2800      	cmp	r0, #0
 8002608:	d1ec      	bne.n	80025e4 <_close+0x18>
 800260a:	2301      	movs	r3, #1
 800260c:	425b      	negs	r3, r3
 800260e:	6023      	str	r3, [r4, #0]
 8002610:	e7e8      	b.n	80025e4 <_close+0x18>
 8002612:	46c0      	nop			; (mov r8, r8)
 8002614:	200000b0 	.word	0x200000b0

08002618 <_swistat>:
 8002618:	b570      	push	{r4, r5, r6, lr}
 800261a:	000c      	movs	r4, r1
 800261c:	f7ff fefa 	bl	8002414 <findslot>
 8002620:	1e05      	subs	r5, r0, #0
 8002622:	d106      	bne.n	8002632 <_swistat+0x1a>
 8002624:	f7fe feaa 	bl	800137c <__errno>
 8002628:	2309      	movs	r3, #9
 800262a:	6003      	str	r3, [r0, #0]
 800262c:	2001      	movs	r0, #1
 800262e:	4240      	negs	r0, r0
 8002630:	bd70      	pop	{r4, r5, r6, pc}
 8002632:	2380      	movs	r3, #128	; 0x80
 8002634:	6862      	ldr	r2, [r4, #4]
 8002636:	019b      	lsls	r3, r3, #6
 8002638:	4313      	orrs	r3, r2
 800263a:	6063      	str	r3, [r4, #4]
 800263c:	2380      	movs	r3, #128	; 0x80
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	260c      	movs	r6, #12
 8002642:	64a3      	str	r3, [r4, #72]	; 0x48
 8002644:	1c30      	adds	r0, r6, #0
 8002646:	1c29      	adds	r1, r5, #0
 8002648:	beab      	bkpt	0x00ab
 800264a:	1c05      	adds	r5, r0, #0
 800264c:	0028      	movs	r0, r5
 800264e:	f7ff fefb 	bl	8002448 <checkerror>
 8002652:	1c43      	adds	r3, r0, #1
 8002654:	d0ec      	beq.n	8002630 <_swistat+0x18>
 8002656:	6120      	str	r0, [r4, #16]
 8002658:	2000      	movs	r0, #0
 800265a:	e7e9      	b.n	8002630 <_swistat+0x18>

0800265c <_fstat>:
 800265c:	b570      	push	{r4, r5, r6, lr}
 800265e:	000c      	movs	r4, r1
 8002660:	0005      	movs	r5, r0
 8002662:	2258      	movs	r2, #88	; 0x58
 8002664:	2100      	movs	r1, #0
 8002666:	0020      	movs	r0, r4
 8002668:	f7fe feb2 	bl	80013d0 <memset>
 800266c:	0028      	movs	r0, r5
 800266e:	0021      	movs	r1, r4
 8002670:	f7ff ffd2 	bl	8002618 <_swistat>
 8002674:	bd70      	pop	{r4, r5, r6, pc}

08002676 <_stat>:
 8002676:	b570      	push	{r4, r5, r6, lr}
 8002678:	000d      	movs	r5, r1
 800267a:	0004      	movs	r4, r0
 800267c:	2258      	movs	r2, #88	; 0x58
 800267e:	2100      	movs	r1, #0
 8002680:	0028      	movs	r0, r5
 8002682:	f7fe fea5 	bl	80013d0 <memset>
 8002686:	0020      	movs	r0, r4
 8002688:	2100      	movs	r1, #0
 800268a:	f000 f813 	bl	80026b4 <_swiopen>
 800268e:	0004      	movs	r4, r0
 8002690:	1c43      	adds	r3, r0, #1
 8002692:	d00c      	beq.n	80026ae <_stat+0x38>
 8002694:	2381      	movs	r3, #129	; 0x81
 8002696:	686a      	ldr	r2, [r5, #4]
 8002698:	021b      	lsls	r3, r3, #8
 800269a:	4313      	orrs	r3, r2
 800269c:	0029      	movs	r1, r5
 800269e:	606b      	str	r3, [r5, #4]
 80026a0:	f7ff ffba 	bl	8002618 <_swistat>
 80026a4:	0005      	movs	r5, r0
 80026a6:	0020      	movs	r0, r4
 80026a8:	f7ff ff90 	bl	80025cc <_close>
 80026ac:	002c      	movs	r4, r5
 80026ae:	0020      	movs	r0, r4
 80026b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080026b4 <_swiopen>:
 80026b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026b6:	000d      	movs	r5, r1
 80026b8:	2600      	movs	r6, #0
 80026ba:	b099      	sub	sp, #100	; 0x64
 80026bc:	9000      	str	r0, [sp, #0]
 80026be:	00f3      	lsls	r3, r6, #3
 80026c0:	9301      	str	r3, [sp, #4]
 80026c2:	4b29      	ldr	r3, [pc, #164]	; (8002768 <_swiopen+0xb4>)
 80026c4:	00f2      	lsls	r2, r6, #3
 80026c6:	589c      	ldr	r4, [r3, r2]
 80026c8:	1c63      	adds	r3, r4, #1
 80026ca:	d038      	beq.n	800273e <_swiopen+0x8a>
 80026cc:	3601      	adds	r6, #1
 80026ce:	2e14      	cmp	r6, #20
 80026d0:	d1f5      	bne.n	80026be <_swiopen+0xa>
 80026d2:	f7fe fe53 	bl	800137c <__errno>
 80026d6:	2401      	movs	r4, #1
 80026d8:	2318      	movs	r3, #24
 80026da:	4264      	negs	r4, r4
 80026dc:	6003      	str	r3, [r0, #0]
 80026de:	e03f      	b.n	8002760 <_swiopen+0xac>
 80026e0:	2302      	movs	r3, #2
 80026e2:	03ec      	lsls	r4, r5, #15
 80026e4:	0fe4      	lsrs	r4, r4, #31
 80026e6:	421d      	tst	r5, r3
 80026e8:	d000      	beq.n	80026ec <_swiopen+0x38>
 80026ea:	431c      	orrs	r4, r3
 80026ec:	4b1f      	ldr	r3, [pc, #124]	; (800276c <_swiopen+0xb8>)
 80026ee:	421d      	tst	r5, r3
 80026f0:	d001      	beq.n	80026f6 <_swiopen+0x42>
 80026f2:	2304      	movs	r3, #4
 80026f4:	431c      	orrs	r4, r3
 80026f6:	2308      	movs	r3, #8
 80026f8:	421d      	tst	r5, r3
 80026fa:	d002      	beq.n	8002702 <_swiopen+0x4e>
 80026fc:	2204      	movs	r2, #4
 80026fe:	4394      	bics	r4, r2
 8002700:	431c      	orrs	r4, r3
 8002702:	9b00      	ldr	r3, [sp, #0]
 8002704:	0018      	movs	r0, r3
 8002706:	9302      	str	r3, [sp, #8]
 8002708:	f7fd fcfe 	bl	8000108 <strlen>
 800270c:	607c      	str	r4, [r7, #4]
 800270e:	60b8      	str	r0, [r7, #8]
 8002710:	2401      	movs	r4, #1
 8002712:	1c20      	adds	r0, r4, #0
 8002714:	1c39      	adds	r1, r7, #0
 8002716:	beab      	bkpt	0x00ab
 8002718:	1c07      	adds	r7, r0, #0
 800271a:	2f00      	cmp	r7, #0
 800271c:	db0a      	blt.n	8002734 <_swiopen+0x80>
 800271e:	4b12      	ldr	r3, [pc, #72]	; (8002768 <_swiopen+0xb4>)
 8002720:	00f2      	lsls	r2, r6, #3
 8002722:	509f      	str	r7, [r3, r2]
 8002724:	0013      	movs	r3, r2
 8002726:	4a10      	ldr	r2, [pc, #64]	; (8002768 <_swiopen+0xb4>)
 8002728:	0034      	movs	r4, r6
 800272a:	4694      	mov	ip, r2
 800272c:	2200      	movs	r2, #0
 800272e:	4463      	add	r3, ip
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	e015      	b.n	8002760 <_swiopen+0xac>
 8002734:	0038      	movs	r0, r7
 8002736:	f7ff fe97 	bl	8002468 <error>
 800273a:	0004      	movs	r4, r0
 800273c:	e010      	b.n	8002760 <_swiopen+0xac>
 800273e:	23a0      	movs	r3, #160	; 0xa0
 8002740:	002a      	movs	r2, r5
 8002742:	011b      	lsls	r3, r3, #4
 8002744:	401a      	ands	r2, r3
 8002746:	af02      	add	r7, sp, #8
 8002748:	429a      	cmp	r2, r3
 800274a:	d1c9      	bne.n	80026e0 <_swiopen+0x2c>
 800274c:	0039      	movs	r1, r7
 800274e:	9800      	ldr	r0, [sp, #0]
 8002750:	f7ff ff91 	bl	8002676 <_stat>
 8002754:	1c43      	adds	r3, r0, #1
 8002756:	d0c3      	beq.n	80026e0 <_swiopen+0x2c>
 8002758:	f7fe fe10 	bl	800137c <__errno>
 800275c:	2311      	movs	r3, #17
 800275e:	6003      	str	r3, [r0, #0]
 8002760:	0020      	movs	r0, r4
 8002762:	b019      	add	sp, #100	; 0x64
 8002764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	200000b0 	.word	0x200000b0
 800276c:	00000601 	.word	0x00000601

08002770 <_get_semihosting_exts>:
 8002770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002772:	b085      	sub	sp, #20
 8002774:	9000      	str	r0, [sp, #0]
 8002776:	9101      	str	r1, [sp, #4]
 8002778:	4827      	ldr	r0, [pc, #156]	; (8002818 <_get_semihosting_exts+0xa8>)
 800277a:	2100      	movs	r1, #0
 800277c:	0015      	movs	r5, r2
 800277e:	f7ff ff99 	bl	80026b4 <_swiopen>
 8002782:	0004      	movs	r4, r0
 8002784:	002a      	movs	r2, r5
 8002786:	2100      	movs	r1, #0
 8002788:	9800      	ldr	r0, [sp, #0]
 800278a:	f7fe fe21 	bl	80013d0 <memset>
 800278e:	1c63      	adds	r3, r4, #1
 8002790:	d015      	beq.n	80027be <_get_semihosting_exts+0x4e>
 8002792:	0020      	movs	r0, r4
 8002794:	f7ff fe3e 	bl	8002414 <findslot>
 8002798:	260c      	movs	r6, #12
 800279a:	0007      	movs	r7, r0
 800279c:	1c30      	adds	r0, r6, #0
 800279e:	1c39      	adds	r1, r7, #0
 80027a0:	beab      	bkpt	0x00ab
 80027a2:	1c06      	adds	r6, r0, #0
 80027a4:	0030      	movs	r0, r6
 80027a6:	f7ff fe4f 	bl	8002448 <checkerror>
 80027aa:	2803      	cmp	r0, #3
 80027ac:	dd02      	ble.n	80027b4 <_get_semihosting_exts+0x44>
 80027ae:	3803      	subs	r0, #3
 80027b0:	42a8      	cmp	r0, r5
 80027b2:	dc07      	bgt.n	80027c4 <_get_semihosting_exts+0x54>
 80027b4:	0020      	movs	r0, r4
 80027b6:	2401      	movs	r4, #1
 80027b8:	f7ff ff08 	bl	80025cc <_close>
 80027bc:	4264      	negs	r4, r4
 80027be:	0020      	movs	r0, r4
 80027c0:	b005      	add	sp, #20
 80027c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027c4:	ae03      	add	r6, sp, #12
 80027c6:	2204      	movs	r2, #4
 80027c8:	0031      	movs	r1, r6
 80027ca:	0020      	movs	r0, r4
 80027cc:	f7ff fe6a 	bl	80024a4 <_read>
 80027d0:	2803      	cmp	r0, #3
 80027d2:	ddef      	ble.n	80027b4 <_get_semihosting_exts+0x44>
 80027d4:	7833      	ldrb	r3, [r6, #0]
 80027d6:	2b53      	cmp	r3, #83	; 0x53
 80027d8:	d1ec      	bne.n	80027b4 <_get_semihosting_exts+0x44>
 80027da:	7873      	ldrb	r3, [r6, #1]
 80027dc:	2b48      	cmp	r3, #72	; 0x48
 80027de:	d1e9      	bne.n	80027b4 <_get_semihosting_exts+0x44>
 80027e0:	78b3      	ldrb	r3, [r6, #2]
 80027e2:	2b46      	cmp	r3, #70	; 0x46
 80027e4:	d1e6      	bne.n	80027b4 <_get_semihosting_exts+0x44>
 80027e6:	78f3      	ldrb	r3, [r6, #3]
 80027e8:	2b42      	cmp	r3, #66	; 0x42
 80027ea:	d1e3      	bne.n	80027b4 <_get_semihosting_exts+0x44>
 80027ec:	2201      	movs	r2, #1
 80027ee:	0020      	movs	r0, r4
 80027f0:	9901      	ldr	r1, [sp, #4]
 80027f2:	f7ff fe71 	bl	80024d8 <_swilseek>
 80027f6:	2800      	cmp	r0, #0
 80027f8:	dbdc      	blt.n	80027b4 <_get_semihosting_exts+0x44>
 80027fa:	002a      	movs	r2, r5
 80027fc:	9900      	ldr	r1, [sp, #0]
 80027fe:	0020      	movs	r0, r4
 8002800:	f7ff fe50 	bl	80024a4 <_read>
 8002804:	0005      	movs	r5, r0
 8002806:	0020      	movs	r0, r4
 8002808:	f7ff fee0 	bl	80025cc <_close>
 800280c:	0028      	movs	r0, r5
 800280e:	f7ff fe1b 	bl	8002448 <checkerror>
 8002812:	0004      	movs	r4, r0
 8002814:	e7d3      	b.n	80027be <_get_semihosting_exts+0x4e>
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	08002a57 	.word	0x08002a57

0800281c <initialise_semihosting_exts>:
 800281c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800281e:	2401      	movs	r4, #1
 8002820:	2100      	movs	r1, #0
 8002822:	4e09      	ldr	r6, [pc, #36]	; (8002848 <initialise_semihosting_exts+0x2c>)
 8002824:	4d09      	ldr	r5, [pc, #36]	; (800284c <initialise_semihosting_exts+0x30>)
 8002826:	af01      	add	r7, sp, #4
 8002828:	0022      	movs	r2, r4
 800282a:	0038      	movs	r0, r7
 800282c:	6031      	str	r1, [r6, #0]
 800282e:	602c      	str	r4, [r5, #0]
 8002830:	f7ff ff9e 	bl	8002770 <_get_semihosting_exts>
 8002834:	2800      	cmp	r0, #0
 8002836:	dd05      	ble.n	8002844 <initialise_semihosting_exts+0x28>
 8002838:	2202      	movs	r2, #2
 800283a:	783b      	ldrb	r3, [r7, #0]
 800283c:	401c      	ands	r4, r3
 800283e:	4013      	ands	r3, r2
 8002840:	6034      	str	r4, [r6, #0]
 8002842:	602b      	str	r3, [r5, #0]
 8002844:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	20000070 	.word	0x20000070
 800284c:	20000074 	.word	0x20000074

08002850 <_has_ext_stdout_stderr>:
 8002850:	b510      	push	{r4, lr}
 8002852:	4c04      	ldr	r4, [pc, #16]	; (8002864 <_has_ext_stdout_stderr+0x14>)
 8002854:	6823      	ldr	r3, [r4, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	da01      	bge.n	800285e <_has_ext_stdout_stderr+0xe>
 800285a:	f7ff ffdf 	bl	800281c <initialise_semihosting_exts>
 800285e:	6820      	ldr	r0, [r4, #0]
 8002860:	bd10      	pop	{r4, pc}
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	20000074 	.word	0x20000074

08002868 <initialise_monitor_handles>:
 8002868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800286a:	4b27      	ldr	r3, [pc, #156]	; (8002908 <initialise_monitor_handles+0xa0>)
 800286c:	b085      	sub	sp, #20
 800286e:	9301      	str	r3, [sp, #4]
 8002870:	2500      	movs	r5, #0
 8002872:	2303      	movs	r3, #3
 8002874:	ac01      	add	r4, sp, #4
 8002876:	60a3      	str	r3, [r4, #8]
 8002878:	2701      	movs	r7, #1
 800287a:	6065      	str	r5, [r4, #4]
 800287c:	1c38      	adds	r0, r7, #0
 800287e:	1c21      	adds	r1, r4, #0
 8002880:	beab      	bkpt	0x00ab
 8002882:	1c07      	adds	r7, r0, #0
 8002884:	2101      	movs	r1, #1
 8002886:	4b21      	ldr	r3, [pc, #132]	; (800290c <initialise_monitor_handles+0xa4>)
 8002888:	4249      	negs	r1, r1
 800288a:	601f      	str	r7, [r3, #0]
 800288c:	002b      	movs	r3, r5
 800288e:	4d20      	ldr	r5, [pc, #128]	; (8002910 <initialise_monitor_handles+0xa8>)
 8002890:	00da      	lsls	r2, r3, #3
 8002892:	3301      	adds	r3, #1
 8002894:	50a9      	str	r1, [r5, r2]
 8002896:	2b14      	cmp	r3, #20
 8002898:	d1fa      	bne.n	8002890 <initialise_monitor_handles+0x28>
 800289a:	f7ff ffd9 	bl	8002850 <_has_ext_stdout_stderr>
 800289e:	2800      	cmp	r0, #0
 80028a0:	d018      	beq.n	80028d4 <initialise_monitor_handles+0x6c>
 80028a2:	4b19      	ldr	r3, [pc, #100]	; (8002908 <initialise_monitor_handles+0xa0>)
 80028a4:	2701      	movs	r7, #1
 80028a6:	9301      	str	r3, [sp, #4]
 80028a8:	2303      	movs	r3, #3
 80028aa:	60a3      	str	r3, [r4, #8]
 80028ac:	3301      	adds	r3, #1
 80028ae:	6063      	str	r3, [r4, #4]
 80028b0:	1c38      	adds	r0, r7, #0
 80028b2:	1c21      	adds	r1, r4, #0
 80028b4:	beab      	bkpt	0x00ab
 80028b6:	1c06      	adds	r6, r0, #0
 80028b8:	4b16      	ldr	r3, [pc, #88]	; (8002914 <initialise_monitor_handles+0xac>)
 80028ba:	4a13      	ldr	r2, [pc, #76]	; (8002908 <initialise_monitor_handles+0xa0>)
 80028bc:	601e      	str	r6, [r3, #0]
 80028be:	2303      	movs	r3, #3
 80028c0:	9201      	str	r2, [sp, #4]
 80028c2:	60a3      	str	r3, [r4, #8]
 80028c4:	3305      	adds	r3, #5
 80028c6:	6063      	str	r3, [r4, #4]
 80028c8:	1c38      	adds	r0, r7, #0
 80028ca:	1c21      	adds	r1, r4, #0
 80028cc:	beab      	bkpt	0x00ab
 80028ce:	1c04      	adds	r4, r0, #0
 80028d0:	4b11      	ldr	r3, [pc, #68]	; (8002918 <initialise_monitor_handles+0xb0>)
 80028d2:	601c      	str	r4, [r3, #0]
 80028d4:	4f10      	ldr	r7, [pc, #64]	; (8002918 <initialise_monitor_handles+0xb0>)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	3301      	adds	r3, #1
 80028da:	d102      	bne.n	80028e2 <initialise_monitor_handles+0x7a>
 80028dc:	4b0d      	ldr	r3, [pc, #52]	; (8002914 <initialise_monitor_handles+0xac>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	603b      	str	r3, [r7, #0]
 80028e2:	2400      	movs	r4, #0
 80028e4:	4b09      	ldr	r3, [pc, #36]	; (800290c <initialise_monitor_handles+0xa4>)
 80028e6:	606c      	str	r4, [r5, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	602b      	str	r3, [r5, #0]
 80028ec:	f7ff ffb0 	bl	8002850 <_has_ext_stdout_stderr>
 80028f0:	42a0      	cmp	r0, r4
 80028f2:	d006      	beq.n	8002902 <initialise_monitor_handles+0x9a>
 80028f4:	4b07      	ldr	r3, [pc, #28]	; (8002914 <initialise_monitor_handles+0xac>)
 80028f6:	60ec      	str	r4, [r5, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	616c      	str	r4, [r5, #20]
 80028fc:	60ab      	str	r3, [r5, #8]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	612b      	str	r3, [r5, #16]
 8002902:	b005      	add	sp, #20
 8002904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	08002a6d 	.word	0x08002a6d
 800290c:	200000a8 	.word	0x200000a8
 8002910:	200000b0 	.word	0x200000b0
 8002914:	200000ac 	.word	0x200000ac
 8002918:	200000a4 	.word	0x200000a4

0800291c <_isatty>:
 800291c:	b570      	push	{r4, r5, r6, lr}
 800291e:	f7ff fd79 	bl	8002414 <findslot>
 8002922:	2509      	movs	r5, #9
 8002924:	1e04      	subs	r4, r0, #0
 8002926:	d104      	bne.n	8002932 <_isatty+0x16>
 8002928:	f7fe fd28 	bl	800137c <__errno>
 800292c:	6005      	str	r5, [r0, #0]
 800292e:	0020      	movs	r0, r4
 8002930:	bd70      	pop	{r4, r5, r6, pc}
 8002932:	1c28      	adds	r0, r5, #0
 8002934:	1c21      	adds	r1, r4, #0
 8002936:	beab      	bkpt	0x00ab
 8002938:	1c04      	adds	r4, r0, #0
 800293a:	0020      	movs	r0, r4
 800293c:	2c01      	cmp	r4, #1
 800293e:	d0f7      	beq.n	8002930 <_isatty+0x14>
 8002940:	f7fe fd1c 	bl	800137c <__errno>
 8002944:	2400      	movs	r4, #0
 8002946:	0005      	movs	r5, r0
 8002948:	2613      	movs	r6, #19
 800294a:	1c30      	adds	r0, r6, #0
 800294c:	1c21      	adds	r1, r4, #0
 800294e:	beab      	bkpt	0x00ab
 8002950:	1c06      	adds	r6, r0, #0
 8002952:	602e      	str	r6, [r5, #0]
 8002954:	e7eb      	b.n	800292e <_isatty+0x12>
	...

08002958 <_init>:
 8002958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800295a:	46c0      	nop			; (mov r8, r8)
 800295c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800295e:	bc08      	pop	{r3}
 8002960:	469e      	mov	lr, r3
 8002962:	4770      	bx	lr

08002964 <_fini>:
 8002964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800296a:	bc08      	pop	{r3}
 800296c:	469e      	mov	lr, r3
 800296e:	4770      	bx	lr
